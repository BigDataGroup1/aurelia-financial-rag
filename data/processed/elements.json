[
  {
    "element_type": "formula",
    "content": "Y = y1, y2, \u2026, yn\nX = x1, x2, \u2026, xn\nthen the dot product\nX \u00b7 Y = x1y1 + x2y2 + \u2026 + xnyn\nis the scalar product of the two vectors",
    "page_number": 34,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "ple.\nComputing Dot Products of Vectors\nIn matrix algebra, if X and Y are vectors of the same length\nY = y1, y2, \u2026, yn\nX = x1, x2, \u2026, xn\nthen the dot product\nX \u00b7 Y = x1y1 + x2y2 + \u2026 + xnyn\nis the scalar product of the two vectors. It is an exception to the commutative rule. To compute the\ndot product in MATLAB, use sum(X .* Y) "
  },
  {
    "element_type": "formula",
    "content": "A =\na11 a12 \u22efa1n\n\u22ee\n\u22ee\n\u22ee\nai1\nai2 \u22efain\n\u22ee\n\u22ee\n\u22ee\nam1 am2 \u22efamn\n, \u00a0\u00a0B =\nb11 \u22efb1 j \u22efb1p\nb21 \u22efb2 j \u22efb2p\n\u22ee\n\u22ee\n\u22ee\nbn1 \u22efbn j \u22efbnp\nthen C = A*B is an m-by-p matrix; and the element cij in the ith row and jth column of C is\nci j = ai1b1 j + ai2b12 + \u2026 + ainbn j ",
    "page_number": 35,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": " of matrix algebra. In matrix algebra notation, if A is an m-\nby-n matrix and B is an n-by-p matrix\nA =\na11 a12 \u22efa1n\n\u22ee\n\u22ee\n\u22ee\nai1\nai2 \u22efain\n\u22ee\n\u22ee\n\u22ee\nam1 am2 \u22efamn\n, \u00a0\u00a0B =\nb11 \u22efb1 j \u22efb1p\nb21 \u22efb2 j \u22efb2p\n\u22ee\n\u22ee\n\u22ee\nbn1 \u22efbn j \u22efbnp\nthen C = A*B is an m-by-p matrix; and the element cij in the ith row and jth column of C is\nci j = ai1b1 j + ai2b12 + \u2026 + ainbn j .\nTo illustrate, assume that there are two portfolios of the same three stocks previously mentioned "
  },
  {
    "element_type": "formula",
    "content": "X = B",
    "page_number": 36,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "ee \u201cSolving Simultaneous Linear Equations\u201d on page 1-11). For example, you want to\nsolve for X in A*X = B.\nIn ordinary algebra, you would divide both sides of the equation by A, and X would equal B/A.\nHowe"
  },
  {
    "element_type": "formula",
    "content": "X = A\\B solves for X in A*X = B and\nX = B/A solves for X in X*A = B",
    "page_number": 36,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "plifies the process by\nproviding two matrix division symbols, left and right (\\ and /). In general,\nX = A\\B solves for X in A*X = B and\nX = B/A solves for X in X*A = B.\nIn general, matrix A must be a nonsingular square matrix; that is, it must be invertible and it mu"
  },
  {
    "element_type": "formula",
    "content": "$100 and $",
    "page_number": 37,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": " two portfolios of mortgage-based instruments, M1 and\nM2. They have current annual cash payments of $100 and $70 per unit, respectively, based on today's\nprime rate. If the prime rate moves down one percentage "
  },
  {
    "element_type": "formula",
    "content": "$80 and\n$",
    "page_number": 37,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "d on today's\nprime rate. If the prime rate moves down one percentage point, their payments would be $80 and\n$40. An investor holds 10 units of M1 and 20 units of M2. The investor's receipts equal cash\npayments"
  },
  {
    "element_type": "formula",
    "content": "$100 * 10 units\n+ $",
    "page_number": 37,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "nts times units, or R = C * U, for each prime-rate scenario. As word equations:\n \nM1\nM2\nPrime flat:\n$100 * 10 units\n+ $70 * 20 units = $2400\nreceipts\nPrime down:\n$80 * 10 units\n+ $40 * 20 units = $1600\nreceipts\nAs MATLA"
  },
  {
    "element_type": "formula",
    "content": "$2400\nreceipts\nPrime down:\n$",
    "page_number": 37,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "each prime-rate scenario. As word equations:\n \nM1\nM2\nPrime flat:\n$100 * 10 units\n+ $70 * 20 units = $2400\nreceipts\nPrime down:\n$80 * 10 units\n+ $40 * 20 units = $1600\nreceipts\nAs MATLAB matrices:\n1\nGetting Started\n1-12\n"
  },
  {
    "element_type": "formula",
    "content": "$40 * 20 units = $",
    "page_number": 37,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "\n \nM1\nM2\nPrime flat:\n$100 * 10 units\n+ $70 * 20 units = $2400\nreceipts\nPrime down:\n$80 * 10 units\n+ $40 * 20 units = $1600\nreceipts\nAs MATLAB matrices:\n1\nGetting Started\n1-12\n"
  },
  {
    "element_type": "formula",
    "content": "A = 2\n1\n1 \u22123 ,\u00a0\u00a0\u00a0\u00a0\u00a0X = x\ny ,\u00a0\u00a0\u00a0\u00a0\u00a0B =\n13\n\u221218 ,\nwhere A*X = B",
    "page_number": 37,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "ee matrices: A for the left-side constants, X for the variables, and B for the right-side\nconstants\nA = 2\n1\n1 \u22123 ,\u00a0\u00a0\u00a0\u00a0\u00a0X = x\ny ,\u00a0\u00a0\u00a0\u00a0\u00a0B =\n13\n\u221218 ,\nwhere A*X = B.\nSolving the system simultaneously means solving for X. Using MATLAB,\nA = [2  1\n     1 -3];\nB = [13"
  },
  {
    "element_type": "formula",
    "content": "A = [2  1\n     1 -3];\nB = [13\n    -18];\nX = A \\ B\nsolves for X in A * X = B",
    "page_number": 37,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "\u00a0\u00a0\u00a0B =\n13\n\u221218 ,\nwhere A*X = B.\nSolving the system simultaneously means solving for X. Using MATLAB,\nA = [2  1\n     1 -3];\nB = [13\n    -18];\nX = A \\ B\nsolves for X in A * X = B.\nX = [3 7]\nSo x = 3 and y = 7 in this example. In general, you can use matrix algebra to solve any "
  },
  {
    "element_type": "formula",
    "content": "X = [3 7]\nSo x = 3 and y = 7 in this example",
    "page_number": 37,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "g for X. Using MATLAB,\nA = [2  1\n     1 -3];\nB = [13\n    -18];\nX = A \\ B\nsolves for X in A * X = B.\nX = [3 7]\nSo x = 3 and y = 7 in this example. In general, you can use matrix algebra to solve any system of\nlinear equations such as\na11x1 + a12"
  },
  {
    "element_type": "formula",
    "content": "A =\na11 a12 \u22efa1n\na21 a22 \u22efa2n\n\u22ee\n\u22ee\n\u22ee\nam1 am2 \u22efamn\n, \u00a0\u00a0\u00a0\u00a0\u00a0X =\nx1\nx2\n\u22ee\nxn\n, \u00a0\u00a0\u00a0\u00a0\u00a0B =\nb1\nb2\n\u22ee\nbm\nand solving for X in A*X = B",
    "page_number": 37,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "b1\na21x1 + a22x2 + \u2026 + a2nxn = b2\n\u22ee\nam1x1 + am2x2 + \u2026 + amnxn = bm\nby representing them as matrices\nA =\na11 a12 \u22efa1n\na21 a22 \u22efa2n\n\u22ee\n\u22ee\n\u22ee\nam1 am2 \u22efamn\n, \u00a0\u00a0\u00a0\u00a0\u00a0X =\nx1\nx2\n\u22ee\nxn\n, \u00a0\u00a0\u00a0\u00a0\u00a0B =\nb1\nb2\n\u22ee\nbm\nand solving for X in A*X = B.\nTo illustrate, consider this situation. There are two portfolios of mortgage-based instruments, M1"
  },
  {
    "element_type": "formula",
    "content": "R = C * U, for each prime-rate scenario",
    "page_number": 37,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "olds 10 units of M1 and 20 units of M2. The investor's receipts equal cash\npayments times units, or R = C * U, for each prime-rate scenario. As word equations:\n \nM1\nM2\nPrime flat:\n$100 * 10 units\n+ $70 * 20 units = $2400\nreceipts\nPrime dow"
  },
  {
    "element_type": "formula",
    "content": "$7000 if the prime rate stays flat and $",
    "page_number": 38,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": " these two portfolios and their characteristics, how many\nunits of each should they hold to receive $7000 if the prime rate stays flat and $5000 if the prime\ndrops one percentage point? Find the answer by solving two linear equations.\n \nM1\n"
  },
  {
    "element_type": "formula",
    "content": "$100 * x units\n+ $",
    "page_number": 38,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "me\ndrops one percentage point? Find the answer by solving two linear equations.\n \nM1\nM2\nPrime flat:\n$100 * x units\n+ $70 * y units = $7000\nreceipts\nPrime down:\n$80 * x units\n+ $40 * y units = $5000\nreceipts\nIn other wo"
  },
  {
    "element_type": "formula",
    "content": "$7000\nreceipts\nPrime down:\n$",
    "page_number": 38,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "nd the answer by solving two linear equations.\n \nM1\nM2\nPrime flat:\n$100 * x units\n+ $70 * y units = $7000\nreceipts\nPrime down:\n$80 * x units\n+ $40 * y units = $5000\nreceipts\nIn other words, solve for U (units) in the equation R "
  },
  {
    "element_type": "formula",
    "content": "$40 * y units = $",
    "page_number": 38,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "ns.\n \nM1\nM2\nPrime flat:\n$100 * x units\n+ $70 * y units = $7000\nreceipts\nPrime down:\n$80 * x units\n+ $40 * y units = $5000\nreceipts\nIn other words, solve for U (units) in the equation R (receipts) = C (cash) * U (units"
  },
  {
    "element_type": "formula",
    "content": "$100, from which you then receive by\na series of annual cash receipts of $",
    "page_number": 40,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "ial\nToolbox functions work similarly.\nAs an example, suppose that you make an initial investment of $100, from which you then receive by\na series of annual cash receipts of $10, $20, $30, $40, and $50. This cash flow stream is stored in a\nvector\nCashFlows = [-100 10 20 30 4"
  },
  {
    "element_type": "formula",
    "content": "$20, $",
    "page_number": 40,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "initial investment of $100, from which you then receive by\na series of annual cash receipts of $10, $20, $30, $40, and $50. This cash flow stream is stored in a\nvector\nCashFlows = [-100 10 20 30 40 50]'\nCas"
  },
  {
    "element_type": "formula",
    "content": "$40, and $",
    "page_number": 40,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "vestment of $100, from which you then receive by\na series of annual cash receipts of $10, $20, $30, $40, and $50. This cash flow stream is stored in a\nvector\nCashFlows = [-100 10 20 30 40 50]'\nCashFlows =\n  -10"
  },
  {
    "element_type": "formula",
    "content": "X = function(input_arguments",
    "page_number": 42,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "X = function(input_arguments...)\nthe function returns a value for A, but not for B or C.\nSome functions that return vectors acce"
  },
  {
    "element_type": "formula",
    "content": "S = char(t);\nfilename = ['myTest_',S]\nfilename =\n    'myTest_2016-12-11T125628'\nConvert Serial Date Numbers to Datetime Arrays\nSerial time can represent fractions of days beginning at midnight",
    "page_number": 47,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "ile name.\nt = datetime('now','Format','yyyy-MM-dd''T''HHmmss')\nt = \n  datetime\n   2016-12-11T125628\nS = char(t);\nfilename = ['myTest_',S]\nfilename =\n    'myTest_2016-12-11T125628'\nConvert Serial Date Numbers to Datetime Arrays\nSerial time can represent fractions of days beginning at midnight. For example, 6 p.m. equals 0.75\nserial days, so the character vector '31-Oct-2003, 6:00 PM' in MAT"
  },
  {
    "element_type": "formula",
    "content": "$20,000 followed by\nthree annual return payments, a second investment of $",
    "page_number": 54,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "eams, and annuities.\nSome examples in this section use this income stream: an initial investment of $20,000 followed by\nthree annual return payments, a second investment of $5,000, then four more returns. Investments\nare negative cash flows, return payments are positive cas"
  },
  {
    "element_type": "formula",
    "content": "$20,000 followed by three annual return\npayments, a second investment of $",
    "page_number": 54,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": " rate of return of the cash stream using irr.\nSpecify the income stream as an initial investment of $20,000 followed by three annual return\npayments, a second investment of $5,000, then four more returns. Investments are negative cash\nflows, return payments are positive cas"
  },
  {
    "element_type": "formula",
    "content": "$20,000 followed by three annual return\npayments, a second investment of $",
    "page_number": 55,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "ow irregular cash flows at irregular periods.\nSpecify the income stream as an initial investment of $20,000 followed by three annual return\npayments, a second investment of $5,000, then four more returns. Investments are negative cash\nflows, return payments are positive cas"
  },
  {
    "element_type": "formula",
    "content": "$15,000 over five years with a salvage value of\n$",
    "page_number": 56,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": " standard depreciation schedules using depgendb.\nThe following code depreciates an automobile worth $15,000 over five years with a salvage value of\n$1,500. It computes the general declining balance using two different depreciation rates: 50% (or\n1.5"
  },
  {
    "element_type": "formula",
    "content": "$5000.00 and which was paid back monthly over four years at $",
    "page_number": 56,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "payments\nwhen only the payment amounts and principal are known. For a loan whose original value was\n$5000.00 and which was paid back monthly over four years at $130.00/month:\nRate = annurate(4*12, 130, 5000, 0, 0)\nRate = \n0.0094\nThe function returns a rate of 0"
  },
  {
    "element_type": "formula",
    "content": "$300.00/month over four years at 11% annual interest:\nPrincipal = pvfix(0.11/12, 4*12, 300, 0, 0)\nPrincipal = \n1.1607e+04\nThe function returns the original principal value of $",
    "page_number": 56,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "on (pvfix) to compute the initial principal when the payment and\nrate are known. For a loan paid at $300.00/month over four years at 11% annual interest:\nPrincipal = pvfix(0.11/12, 4*12, 300, 0, 0)\nPrincipal = \n1.1607e+04\nThe function returns the original principal value of $11,607.43.\n Analyzing and Computing Cash Flows\n2-13\n"
  },
  {
    "element_type": "formula",
    "content": "$100. Calling the function:\n[Price, AccruedInt] = bndprice(Yield, CouponRate, Settle, ... \nMaturity, [], [], [], IssueDate, FirstCouponDate)\nPrice = \n113.5977\nAccruedInt = \n0.5855\nbndprice returns a price of $",
    "page_number": 64,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "t values. Also, assume that there is no odd last coupon date\nand that the face value of the bond is $100. Calling the function:\n[Price, AccruedInt] = bndprice(Yield, CouponRate, Settle, ... \nMaturity, [], [], [], IssueDate, FirstCouponDate)\nPrice = \n113.5977\nAccruedInt = \n0.5855\nbndprice returns a price of $113.60 and accrued interest of $0.59.\nNote, bndprice uses nonlinear formulas to compute the price of"
  },
  {
    "element_type": "formula",
    "content": "$100. Specify a purchase price of $",
    "page_number": 65,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "Assume a face value of $100. Specify a purchase price of $95.70, a coupon rate of 4%, quarterly\ncoupon payments, and a 30/360 day-count convention (Basis = 1)"
  },
  {
    "element_type": "formula",
    "content": "$100.00, the exercise price is $",
    "page_number": 84,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "rices of a European option and its delta,\ngamma, lambda, and implied volatility. The asset price is $100.00, the exercise price is $95.00, the\nrisk-free interest rate is 10%, the time to maturity is 0.25 years, the volatility is 0.5"
  },
  {
    "element_type": "formula",
    "content": "$13.70\n\u2022\nThe option put price OptPut = $",
    "page_number": 84,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": " 0.25, 0.50, 0)\nLamCall = \n4.8664\nLamPut = \n-5.2528\nTo summarize:\n\u2022\nThe option call price OptCall = $13.70\n\u2022\nThe option put price OptPut = $6.35\n\u2022\ndelta for a call CallVal = 0.6665 and delta for a put PutVal = -0.3335\n\u2022\ngamma GammaVal = 0.0"
  },
  {
    "element_type": "formula",
    "content": "$100.00, the\nexercise price is $",
    "page_number": 85,
    "bbox": [
      0,
      0,
      0,
      0
    ],
    "caption": null,
    "context": "ration date.\nThis example prices an American call option using a binomial model. The asset price is $100.00, the\nexercise price is $95.00, the risk-free interest rate is 10%, and the time to maturity is 0.25 years. The\nfunction binp"
  },
  {
    "element_type": "code",
    "content": "Latest news:\nwww.mathworks.com",
    "page_number": 1,
    "bbox": [
      140.04000854492188,
      88.76158142089844,
      348.530517578125,
      100.3915786743164
    ],
    "caption": null,
    "context": "How to Contact MathWorks\nLatest news:\nwww.mathworks.com\nSales and services:\nwww.mathworks.com/sales_and_services\nUser community:\nwww.mathworks.com/matlabcentral\nTechnical support:\nwww.mathworks.com/support/contact_us\nPhone:\n508-647-7000\nThe MathWorks, Inc."
  },
  {
    "element_type": "code",
    "content": "Sales and services:\nwww.mathworks.com/sales_and_services",
    "page_number": 1,
    "bbox": [
      140.04051208496094,
      110.76158142089844,
      445.75360107421875,
      122.3915786743164
    ],
    "caption": null,
    "context": "How to Contact MathWorks\nLatest news:\nwww.mathworks.com\nSales and services:\nwww.mathworks.com/sales_and_services\nUser community:\nwww.mathworks.com/matlabcentral\nTechnical support:\nwww.mathworks.com/support/contact_us\nPhone:\n508-647-7000\nThe MathWorks, Inc.\n1 Apple Hill Drive\nNatick, MA 01760-2098\nFinancial Toolb"
  },
  {
    "element_type": "code",
    "content": "User community:\nwww.mathworks.com/matlabcentral",
    "page_number": 1,
    "bbox": [
      140.0435028076172,
      132.76158142089844,
      420.16510009765625,
      144.39158630371094
    ],
    "caption": null,
    "context": "How to Contact MathWorks\nLatest news:\nwww.mathworks.com\nSales and services:\nwww.mathworks.com/sales_and_services\nUser community:\nwww.mathworks.com/matlabcentral\nTechnical support:\nwww.mathworks.com/support/contact_us\nPhone:\n508-647-7000\nThe MathWorks, Inc.\n1 Apple Hill Drive\nNatick, MA 01760-2098\nFinancial Toolbox\u2122 User's Guide\n\u00a9 COPYRIGHT 1995\u20132025 by The Ma"
  },
  {
    "element_type": "code",
    "content": "Technical support:\nwww.mathworks.com/support/contact_us",
    "page_number": 1,
    "bbox": [
      140.03500366210938,
      154.76158142089844,
      445.74859619140625,
      166.39158630371094
    ],
    "caption": null,
    "context": "How to Contact MathWorks\nLatest news:\nwww.mathworks.com\nSales and services:\nwww.mathworks.com/sales_and_services\nUser community:\nwww.mathworks.com/matlabcentral\nTechnical support:\nwww.mathworks.com/support/contact_us\nPhone:\n508-647-7000\nThe MathWorks, Inc.\n1 Apple Hill Drive\nNatick, MA 01760-2098\nFinancial Toolbox\u2122 User's Guide\n\u00a9 COPYRIGHT 1995\u20132025 by The MathWorks, Inc.\nThe software described in this document is"
  },
  {
    "element_type": "code",
    "content": "MATLAB and Simulink are registered trademarks of The MathWorks, Inc. See\nwww.mathworks.com/trademarks\n for a list of additional trademarks. Other product or brand names may be\ntrademarks or registered trademarks of their respective holders.",
    "page_number": 1,
    "bbox": [
      140.0387725830078,
      413.97576904296875,
      545.306640625,
      444.2612609863281
    ],
    "caption": null,
    "context": "to meet the government's needs or is\ninconsistent in any respect with federal procurement law, the government agrees to return the Program and\nDocumentation, unused, to The MathWorks, Inc.\nTrademarks\nMATLAB and Simulink are registered trademarks of The MathWorks, Inc. See\nwww.mathworks.com/trademarks for a list of additional trademarks. Other product or brand names may be\ntrademarks or registered trademarks of their respective holders.\nPatents\nMathWorks products are protected by one or more U.S. patents. Please see www.mathworks.com/patents for\nmore information.\n"
  },
  {
    "element_type": "code",
    "content": "MathWorks products are protected by one or more U.S. patents. Please see \nwww.mathworks.com/patents\n for\nmore information.",
    "page_number": 1,
    "bbox": [
      140.03781127929688,
      464.17578125,
      553.5458374023438,
      484.2612609863281
    ],
    "caption": null,
    "context": " The MathWorks, Inc. See\nwww.mathworks.com/trademarks for a list of additional trademarks. Other product or brand names may be\ntrademarks or registered trademarks of their respective holders.\nPatents\nMathWorks products are protected by one or more U.S. patents. Please see www.mathworks.com/patents for\nmore information.\n"
  },
  {
    "element_type": "code",
    "content": "A rectangular array of numeric or algebraic quantities subject to mathematical operations; the\nregular formation of elements into rows and columns. Described as a \u201c\nm\n-by-\nn\n\u201d matrix, with \nm \nthe\nnumber of rows and \nn \nthe number of columns. The description is always \u201crow-by-column.\u201d For\nexample, here is a \n2\n-by-\n3\n matrix of two bonds (the rows) with different par values, coupon rates, and\ncoupon payment frequencies per year (the columns) entered using MATLAB notation:",
    "page_number": 29,
    "bbox": [
      90.00272369384766,
      393.11273193359375,
      551.4925537109375,
      452.74273681640625
    ],
    "caption": null,
    "context": "a matrix-oriented tool like MATLAB\u00ae software manipulates sets of numbers\nmore quickly, easily, and naturally. For more information, see \u201cMatrix Algebra Refresher\u201d on page 1-\n7.\nKey Definitions\nMatrix\nA rectangular array of numeric or algebraic quantities subject to mathematical operations; the\nregular formation of elements into rows and columns. Described as a \u201cm-by-n\u201d matrix, with m the\nnumber of rows and n the number of columns. The description is always \u201crow-by-column.\u201d For\nexample, here is a 2-by-3 matrix of two bonds (the rows) with different par values, coupon rates, and\ncoupon payment frequencies per year (the columns) entered using MATLAB notation:\nBonds = [1000   0.06   2\n          500   0.055  4]\nVector\nA matrix with only one row or column. Described as a \u201c1-by-n\u201d or \u201cm-by-1\u201d matrix. The description is\nalways \u201crow-by-column.\u201d For example, here is a 1-by-4"
  },
  {
    "element_type": "code",
    "content": "Bonds = [1000   0.06   2\n          500   0.055  4]",
    "page_number": 29,
    "bbox": [
      90.00379943847656,
      462.30828857421875,
      225.45379638671875,
      483.57525634765625
    ],
    "caption": null,
    "context": "-by-column.\u201d For\nexample, here is a 2-by-3 matrix of two bonds (the rows) with different par values, coupon rates, and\ncoupon payment frequencies per year (the columns) entered using MATLAB notation:\nBonds = [1000   0.06   2\n          500   0.055  4]\nVector\nA matrix with only one row or column. Described as a \u201c1-by-n\u201d or \u201cm-by-1\u201d matrix. The description is\nalways \u201crow-by-column.\u201d For example, here is a 1-by-4 vector of cash flows in MATLAB notatio"
  },
  {
    "element_type": "code",
    "content": "A matrix with only one row or column. Described as a \u201c\n1\n-by-\nn\n\u201d or \u201c\nm\n-by-\n1\n\u201d matrix. The description is\nalways \u201crow-by-column.\u201d For example, here is a \n1\n-by-\n4\n vector of cash flows in MATLAB notation:",
    "page_number": 29,
    "bbox": [
      90.0037841796875,
      516.1370239257812,
      552.4036865234375,
      539.7670288085938
    ],
    "caption": null,
    "context": "onds (the rows) with different par values, coupon rates, and\ncoupon payment frequencies per year (the columns) entered using MATLAB notation:\nBonds = [1000   0.06   2\n          500   0.055  4]\nVector\nA matrix with only one row or column. Described as a \u201c1-by-n\u201d or \u201cm-by-1\u201d matrix. The description is\nalways \u201crow-by-column.\u201d For example, here is a 1-by-4 vector of cash flows in MATLAB notation:\nCash = [1500   4470   5280   -1299]\nScalar\nA 1-by-1 matrix; that is, a single number.\nReferencing Matrix Elements\nTo reference specific matrix elements, use (row, column) notation. For example:\nBonds(1,2)\nans =\n "
  },
  {
    "element_type": "code",
    "content": "Cash = [1500   4470   5280   -1299]",
    "page_number": 29,
    "bbox": [
      90.00384521484375,
      549.3326416015625,
      279.6338195800781,
      559.7996215820312
    ],
    "caption": null,
    "context": "tor\nA matrix with only one row or column. Described as a \u201c1-by-n\u201d or \u201cm-by-1\u201d matrix. The description is\nalways \u201crow-by-column.\u201d For example, here is a 1-by-4 vector of cash flows in MATLAB notation:\nCash = [1500   4470   5280   -1299]\nScalar\nA 1-by-1 matrix; that is, a single number.\nReferencing Matrix Elements\nTo reference specific matrix elements, use (row, column) notation. For example:\nBonds(1,2)\nans =\n          0.06\n1\nGetting "
  },
  {
    "element_type": "code",
    "content": "A \n1\n-by-\n1\n matrix; that is, a single number.",
    "page_number": 29,
    "bbox": [
      90.00384521484375,
      592.3613891601562,
      276.8538513183594,
      603.9913940429688
    ],
    "caption": null,
    "context": "Analyze Sets of Numbers Using Matrix Functions\nIn this section...\n\u201cIntroduction\u201d on page 1-4\n\u201cKey Definitions\u201d on page 1-4\n\u201cReferencing Matrix Elements\u201d on page 1-4\n\u201cTransposing Matrices\u201d on page 1-5\nIntroduction\nMany financial analysis procedure"
  },
  {
    "element_type": "code",
    "content": "AddBond = [1000   0.065   2];\nBonds = [Bonds; AddBond]",
    "page_number": 30,
    "bbox": [
      89.99600219726562,
      174.62054443359375,
      247.1179962158203,
      195.88755798339844
    ],
    "caption": null,
    "context": "Cash(3)\nans =\n       5280.00\nYou can enlarge matrices using small matrices or vectors as elements. For example,\nAddBond = [1000   0.065   2];\nBonds = [Bonds; AddBond]\nadds another row to the matrix and creates\nBonds =\n       1000   0.06    2\n        500   0.055   4\n       1000   0.065   2\nLikewise,\nPrices = [987.50\n          475.00\n          995.00]\nBonds = [Prices"
  },
  {
    "element_type": "code",
    "content": "1000   0.06    2\n        500   0.055   4\n       1000   0.065   2",
    "page_number": 30,
    "bbox": [
      89.99700927734375,
      247.7314910888672,
      214.6110076904297,
      279.7984619140625
    ],
    "caption": null,
    "context": "   5280.00\nYou can enlarge matrices using small matrices or vectors as elements. For example,\nAddBond = [1000   0.065   2];\nBonds = [Bonds; AddBond]\nadds another row to the matrix and creates\nBonds =\n       1000   0.06    2\n        500   0.055   4\n       1000   0.065   2\nLikewise,\nPrices = [987.50\n          475.00\n          995.00]\nBonds = [Prices, Bonds]\nadds another column and creates\nBonds =\n    987.50   1000   0.06    2\n    475.00    500   0.055   4\n    995.00   1"
  },
  {
    "element_type": "code",
    "content": "Prices = [987.50\n          475.00\n          995.00]",
    "page_number": 30,
    "bbox": [
      89.99900817871094,
      310.04241943359375,
      182.10501098632812,
      342.109375
    ],
    "caption": null,
    "context": "or example,\nAddBond = [1000   0.065   2];\nBonds = [Bonds; AddBond]\nadds another row to the matrix and creates\nBonds =\n       1000   0.06    2\n        500   0.055   4\n       1000   0.065   2\nLikewise,\nPrices = [987.50\n          475.00\n          995.00]\nBonds = [Prices, Bonds]\nadds another column and creates\nBonds =\n    987.50   1000   0.06    2\n    475.00    500   0.055   4\n    995.00   1000   0.065   2\nFinally, the colon (:) is important in generat"
  },
  {
    "element_type": "code",
    "content": "Bonds = [Prices, Bonds]",
    "page_number": 30,
    "bbox": [
      89.99900817871094,
      353.2424011230469,
      214.61300659179688,
      363.7093811035156
    ],
    "caption": null,
    "context": "onds; AddBond]\nadds another row to the matrix and creates\nBonds =\n       1000   0.06    2\n        500   0.055   4\n       1000   0.065   2\nLikewise,\nPrices = [987.50\n          475.00\n          995.00]\nBonds = [Prices, Bonds]\nadds another column and creates\nBonds =\n    987.50   1000   0.06    2\n    475.00    500   0.055   4\n    995.00   1000   0.065   2\nFinally, the colon (:) is important in generating and referencing matr"
  },
  {
    "element_type": "code",
    "content": "987.50   1000   0.06    2\n    475.00    500   0.055   4\n    995.00   1000   0.065   2",
    "page_number": 30,
    "bbox": [
      89.99700927734375,
      415.5533142089844,
      247.11900329589844,
      447.6202697753906
    ],
    "caption": null,
    "context": "=\n       1000   0.06    2\n        500   0.055   4\n       1000   0.065   2\nLikewise,\nPrices = [987.50\n          475.00\n          995.00]\nBonds = [Prices, Bonds]\nadds another column and creates\nBonds =\n    987.50   1000   0.06    2\n    475.00    500   0.055   4\n    995.00   1000   0.065   2\nFinally, the colon (:) is important in generating and referencing matrix elements. For example, to\nreference the par value, coupon rate, and coupon frequency of the second bond:\nBondItems = Bonds(2, 2"
  },
  {
    "element_type": "code",
    "content": "Finally, the colon (\n:\n) is important in generating and referencing matrix elements. For example, to\nreference the par value, coupon rate, and coupon frequency of the second bond:",
    "page_number": 30,
    "bbox": [
      89.9990005493164,
      457.3162536621094,
      535.9589233398438,
      480.9462585449219
    ],
    "caption": null,
    "context": "Cash(3)\nans =\n       5280.00\nYou can enlarge matrices using small matrices or vectors as elements. For example,\nAddBond = [1000   0.065   2];\nBonds = [Bonds; AddBond]\nadds another row to the matrix and creates\nBonds =\n       1000   0.06    2\n        500   0.055   4\n       1000   0.065   2\nLikewise,\nPrices = [987.50\n          475.00\n          995.00]\nBonds = [Prices, Bonds]\nadd"
  },
  {
    "element_type": "code",
    "content": "BondItems = Bonds(2, 2:4)",
    "page_number": 30,
    "bbox": [
      89.99604034423828,
      489.8642272949219,
      225.44602966308594,
      500.3312072753906
    ],
    "caption": null,
    "context": "00   1000   0.065   2\nFinally, the colon (:) is important in generating and referencing matrix elements. For example, to\nreference the par value, coupon rate, and coupon frequency of the second bond:\nBondItems = Bonds(2, 2:4)\nBondItems =\n    500.00   0.055   4\nTransposing Matrices\nSometimes matrices are in the wrong configuration for an operation. In MATLAB, the apostrophe or\nprime character (') transposes a matrix: column"
  },
  {
    "element_type": "code",
    "content": "Sometimes matrices are in the wrong configuration for an operation. In MATLAB, the apostrophe or\nprime character (\n'\n) transposes a matrix: columns become rows, rows become columns. For example,",
    "page_number": 30,
    "bbox": [
      89.99801635742188,
      581.3660888671875,
      551.907958984375,
      604.99609375
    ],
    "caption": null,
    "context": "ncing matrix elements. For example, to\nreference the par value, coupon rate, and coupon frequency of the second bond:\nBondItems = Bonds(2, 2:4)\nBondItems =\n    500.00   0.055   4\nTransposing Matrices\nSometimes matrices are in the wrong configuration for an operation. In MATLAB, the apostrophe or\nprime character (') transposes a matrix: columns become rows, rows become columns. For example,\nCash = [1500   4470   5280   -1299]'\nproduces\nCash =\n        1500\n        4470\n        5280\n       -1299\n Analyze Sets of Numbers Using Matrix Functions\n1-5\n"
  },
  {
    "element_type": "code",
    "content": "Cash = [1500   4470   5280   -1299]'",
    "page_number": 30,
    "bbox": [
      90.00099182128906,
      613.9141235351562,
      285.0489807128906,
      624.381103515625
    ],
    "caption": null,
    "context": "trices\nSometimes matrices are in the wrong configuration for an operation. In MATLAB, the apostrophe or\nprime character (') transposes a matrix: columns become rows, rows become columns. For example,\nCash = [1500   4470   5280   -1299]'\nproduces\nCash =\n        1500\n        4470\n        5280\n       -1299\n Analyze Sets of Numbers Using Matrix Functions\n1-5\n"
  },
  {
    "element_type": "code",
    "content": "1500\n        4470\n        5280\n       -1299",
    "page_number": 30,
    "bbox": [
      89.99699401855469,
      676.2252197265625,
      155.01300048828125,
      719.0923461914062
    ],
    "caption": null,
    "context": "ion for an operation. In MATLAB, the apostrophe or\nprime character (') transposes a matrix: columns become rows, rows become columns. For example,\nCash = [1500   4470   5280   -1299]'\nproduces\nCash =\n        1500\n        4470\n        5280\n       -1299\n Analyze Sets of Numbers Using Matrix Functions\n1-5\n"
  },
  {
    "element_type": "code",
    "content": "https://www.stanford.edu/~wfsharpe/mia/mia.htm",
    "page_number": 32,
    "bbox": [
      89.99903106689453,
      350.63189697265625,
      339.2270202636719,
      361.098876953125
    ],
    "caption": null,
    "context": "a\nand using MATLAB functions.\nIn addition, Macro-Investment Analysis by William Sharpe also provides an excellent explanation of\nmatrix algebra operations using MATLAB. It is available on the web at:\nhttps://www.stanford.edu/~wfsharpe/mia/mia.htm\nTip When you are setting up a problem, it helps to \"talk through\" the units and dimensions\nassociated with each input and output matrix. In the example under \u201cMultiplying Matrices\u201d on page\n1-8, one in"
  },
  {
    "element_type": "code",
    "content": "Portfolios_PQ = [100   200\n                 500   400\n                 300   150];",
    "page_number": 32,
    "bbox": [
      89.99613189697266,
      558.5201416015625,
      241.7001190185547,
      590.5870971679688
    ],
    "caption": null,
    "context": "sider combining portfolios of\ndifferent quantities of the same stocks (\u201cshares of stocks A, B, and C [the rows] in portfolios P and Q\n[the columns] plus shares of A, B, and C in portfolios R and S\u201d).\nPortfolios_PQ = [100   200\n                 500   400\n                 300   150];\nPortfolios_RS = [175   125\n                 200   200\n                 100   500];\nNewPortfolios = Portfolios_PQ + Portfolios_RS\nNewPortfolios =\n        275           325\n        700           600\n   "
  },
  {
    "element_type": "code",
    "content": "Portfolios_RS = [175   125\n                 200   200\n                 100   500];",
    "page_number": 32,
    "bbox": [
      89.99613189697266,
      601.7200317382812,
      241.7001190185547,
      633.787109375
    ],
    "caption": null,
    "context": "tocks A, B, and C [the rows] in portfolios P and Q\n[the columns] plus shares of A, B, and C in portfolios R and S\u201d).\nPortfolios_PQ = [100   200\n                 500   400\n                 300   150];\nPortfolios_RS = [175   125\n                 200   200\n                 100   500];\nNewPortfolios = Portfolios_PQ + Portfolios_RS\nNewPortfolios =\n        275           325\n        700           600\n        400           650\n Matrix Algebra Refresher\n1-7\n"
  },
  {
    "element_type": "code",
    "content": "NewPortfolios = Portfolios_PQ + Portfolios_RS",
    "page_number": 32,
    "bbox": [
      89.99613189697266,
      644.9202270507812,
      333.8061218261719,
      655.38720703125
    ],
    "caption": null,
    "context": "B, and C in portfolios R and S\u201d).\nPortfolios_PQ = [100   200\n                 500   400\n                 300   150];\nPortfolios_RS = [175   125\n                 200   200\n                 100   500];\nNewPortfolios = Portfolios_PQ + Portfolios_RS\nNewPortfolios =\n        275           325\n        700           600\n        400           650\n Matrix Algebra Refresher\n1-7\n"
  },
  {
    "element_type": "code",
    "content": "275           325\n        700           600\n        400           650",
    "page_number": 32,
    "bbox": [
      89.99615478515625,
      687.0253295898438,
      225.44615173339844,
      719.0924072265625
    ],
    "caption": null,
    "context": "                500   400\n                 300   150];\nPortfolios_RS = [175   125\n                 200   200\n                 100   500];\nNewPortfolios = Portfolios_PQ + Portfolios_RS\nNewPortfolios =\n        275           325\n        700           600\n        400           650\n Matrix Algebra Refresher\n1-7\n"
  },
  {
    "element_type": "code",
    "content": "SmallerPortf = NewPortfolios-10",
    "page_number": 33,
    "bbox": [
      90.00102233886719,
      113.5317153930664,
      257.9590148925781,
      123.99871063232422
    ],
    "caption": null,
    "context": "Adding or subtracting a scalar and a matrix is allowed and also operates element-by-element.\nSmallerPortf = NewPortfolios-10\nSmallerPortf =\n        265.00        315.00\n        690.00        590.00\n        390.00        640.00\nMultiplying Matrices\nMatrix multiplication does not operate element-by-element. It operates accord"
  },
  {
    "element_type": "code",
    "content": "SmallerPortf =\n        265.00        315.00\n        690.00        590.00\n        390.00        640.00",
    "page_number": 33,
    "bbox": [
      90.00102233886719,
      132.8379669189453,
      241.70501708984375,
      175.70498657226562
    ],
    "caption": null,
    "context": "Adding or subtracting a scalar and a matrix is allowed and also operates element-by-element.\nSmallerPortf = NewPortfolios-10\nSmallerPortf =\n        265.00        315.00\n        690.00        590.00\n        390.00        640.00\nMultiplying Matrices\nMatrix multiplication does not operate element-by-element. It operates according to the rules of\nlinear algebra. In multiplying matrices, it helps to remember this key rule: the i"
  },
  {
    "element_type": "code",
    "content": "Matrix multiplication does \nnot\n operate element-by-element. It operates according to the rules of\nlinear algebra. In multiplying matrices, it helps to remember this key rule: the inner dimensions must\nbe the same. That is, if the first matrix is \nm\n-by-\n3\n, the second must be \n3\n-by-\nn\n. The resulting matrix is\nm\n-by-\nn\n. It also helps to \u201ctalk through\u201d the units of each matrix, as mentioned in \u201cAnalyze Sets of\nNumbers Using Matrix Functions\u201d on page 1-4.",
    "page_number": 33,
    "bbox": [
      89.99800872802734,
      215.91241455078125,
      555.0978393554688,
      275.54241943359375
    ],
    "caption": null,
    "context": "Adding or subtracting a scalar and a matrix is allowed and also operates element-by-element.\nSmallerPortf = NewPortfolios-10\nSmallerPortf =\n        265.00        315.00\n        690.00        590.00\n        390.00        640.00\nMultiplying Matrices\nMatrix multiplication does not operate element-by-element. It operates according to the rules of\nlinear algebra. In multiplying matrices, it helps to remember this key rule: the inner dimensions must\nbe the same. That is, if the first matrix is m-by-3, the second must be 3-by-n. The resulting matrix is\nm-by-n. It also helps to \u201ctalk through\u201d the units of each matrix, as mentioned in \u201cAnalyze Sets of\nNumbers U"
  },
  {
    "element_type": "code",
    "content": "Matrix multiplication also is \nnot\n commutative; that is, it is not independent of order. A*B does \nnot\nequal B*A. The dimension rule illustrates this property. If A is \n1\n-by-\n3\n matrix and B is \n3\n-by-\n1\n matrix,\nA*B yields a scalar (\n1\n-by-\n1\n) matrix but B*A yields a \n3\n-by-\n3\n matrix.",
    "page_number": 33,
    "bbox": [
      89.99801635742188,
      285.36383056640625,
      542.5379638671875,
      320.99383544921875
    ],
    "caption": null,
    "context": "Adding or subtracting a scalar and a matrix is allowed and also operates element-by-element.\nSmallerPortf = NewPortfolios-10\nSmallerPortf =\n        265.00        315.00\n        690.00        590.00\n        390.00        640.00\nMultiplying Matrices\nMatrix multiplication does not operate element-by-element. It operates according to the rules of\nlinear algebra. In multiplying matrices, it helps to remember this key rule: the inner dimensions must\nbe the same. That is, if the first matrix "
  },
  {
    "element_type": "code",
    "content": "ClosePrices = [42.5   15   78.875]",
    "page_number": 33,
    "bbox": [
      90.00393676757812,
      384.8367614746094,
      274.2159118652344,
      395.3037414550781
    ],
    "caption": null,
    "context": "ix.\nMultiplying Vectors\nVector multiplication follows the same rules and helps illustrate the principles. For example, a stock\nportfolio has three different stocks and their closing prices today are:\nClosePrices = [42.5   15   78.875]\nThe portfolio contains these numbers of shares of each stock.\nNumShares = [100\n             500\n             300]\nTo find the value of the portfolio, multiply the vectors\nPortfValue = ClosePrices * Nu"
  },
  {
    "element_type": "code",
    "content": "NumShares = [100\n             500\n             300]",
    "page_number": 33,
    "bbox": [
      89.99893951416016,
      425.59442138671875,
      182.1049346923828,
      457.661376953125
    ],
    "caption": null,
    "context": "nciples. For example, a stock\nportfolio has three different stocks and their closing prices today are:\nClosePrices = [42.5   15   78.875]\nThe portfolio contains these numbers of shares of each stock.\nNumShares = [100\n             500\n             300]\nTo find the value of the portfolio, multiply the vectors\nPortfValue = ClosePrices * NumShares\nwhich yields:\nPortfValue =\n            3.5413e+004\nThe vectors are 1-by-3 and 3-by-1; the resulting vector"
  },
  {
    "element_type": "code",
    "content": "PortfValue = ClosePrices * NumShares",
    "page_number": 33,
    "bbox": [
      90.00394439697266,
      487.9520568847656,
      285.05194091796875,
      498.4190368652344
    ],
    "caption": null,
    "context": "rices = [42.5   15   78.875]\nThe portfolio contains these numbers of shares of each stock.\nNumShares = [100\n             500\n             300]\nTo find the value of the portfolio, multiply the vectors\nPortfValue = ClosePrices * NumShares\nwhich yields:\nPortfValue =\n            3.5413e+004\nThe vectors are 1-by-3 and 3-by-1; the resulting vector is 1-by-1, a scalar. Multiplying these vectors\nthus means multiplying each closing price by i"
  },
  {
    "element_type": "code",
    "content": "The vectors are \n1\n-by-\n3\n and \n3\n-by-\n1\n; the resulting vector is \n1\n-by-\n1\n, a scalar. Multiplying these vectors\nthus means multiplying each closing price by its respective number of shares and summing the result.",
    "page_number": 33,
    "bbox": [
      90.0029296875,
      570.4971923828125,
      557.7926025390625,
      594.127197265625
    ],
    "caption": null,
    "context": "Adding or subtracting a scalar and a matrix is allowed and also operates element-by-element.\nSmallerPortf = NewPortfolios-10\nSmallerPortf =\n        265.00        315.00\n        690.00        590.00\n        390.00        640.00\nMultiplying Matrices\nMatrix multiplication does not operate element-by-element. It operates according to the rules of\nlinear algebra. In multiplying matrices, it helps to remember this key"
  },
  {
    "element_type": "code",
    "content": "Values = NumShares * ClosePrices",
    "page_number": 33,
    "bbox": [
      89.99591827392578,
      624.518798828125,
      263.3719177246094,
      634.9857788085938
    ],
    "caption": null,
    "context": " scalar. Multiplying these vectors\nthus means multiplying each closing price by its respective number of shares and summing the result.\nTo illustrate order dependence, switch the order of the vectors\nValues = NumShares * ClosePrices\nValues =\n  1.0e+004 *\n    0.4250    0.1500    0.7887\n    2.1250    0.7500    3.9438\n    1.2750    0.4500    2.3663\n1\nGetting Started\n1-8\n"
  },
  {
    "element_type": "code",
    "content": "0.4250    0.1500    0.7887\n    2.1250    0.7500    3.9438\n    1.2750    0.4500    2.3663",
    "page_number": 33,
    "bbox": [
      89.99594116210938,
      687.0253295898438,
      252.5359344482422,
      719.0924072265625
    ],
    "caption": null,
    "context": "ng each closing price by its respective number of shares and summing the result.\nTo illustrate order dependence, switch the order of the vectors\nValues = NumShares * ClosePrices\nValues =\n  1.0e+004 *\n    0.4250    0.1500    0.7887\n    2.1250    0.7500    3.9438\n    1.2750    0.4500    2.3663\n1\nGetting Started\n1-8\n"
  },
  {
    "element_type": "code",
    "content": "is the scalar product of the two vectors. It is an exception to the commutative rule. To compute the\ndot product in MATLAB, use \nsum(X .* Y)\n or \nsum(Y .* X)\n. Be sure that the two vectors have the\nsame dimensions. To illustrate, use the previous vectors.",
    "page_number": 34,
    "bbox": [
      89.99600219726562,
      256.7303161621094,
      547.355712890625,
      292.3603210449219
    ],
    "caption": null,
    "context": "or this example.\nComputing Dot Products of Vectors\nIn matrix algebra, if X and Y are vectors of the same length\nY = y1, y2, \u2026, yn\nX = x1, x2, \u2026, xn\nthen the dot product\nX \u00b7 Y = x1y1 + x2y2 + \u2026 + xnyn\nis the scalar product of the two vectors. It is an exception to the commutative rule. To compute the\ndot product in MATLAB, use sum(X .* Y) or sum(Y .* X). Be sure that the two vectors have the\nsame dimensions. To illustrate, use the previous vectors.\nValue = sum(NumShares .* ClosePrices')\nValue =\n      3.5413e+004\nValue = sum(ClosePrices .* NumShares')\nValue =\n      3.5413e+004\nAs expected, the value in these cases matches the PortfValue computed prev"
  },
  {
    "element_type": "code",
    "content": "Value = sum(NumShares .* ClosePrices')",
    "page_number": 34,
    "bbox": [
      89.99703979492188,
      302.07647705078125,
      295.8810119628906,
      312.54345703125
    ],
    "caption": null,
    "context": "xception to the commutative rule. To compute the\ndot product in MATLAB, use sum(X .* Y) or sum(Y .* X). Be sure that the two vectors have the\nsame dimensions. To illustrate, use the previous vectors.\nValue = sum(NumShares .* ClosePrices')\nValue =\n      3.5413e+004\nValue = sum(ClosePrices .* NumShares')\nValue =\n      3.5413e+004\nAs expected, the value in these cases matches the PortfValue computed previously.\nMultiplying Vectors and Mat"
  },
  {
    "element_type": "code",
    "content": "Value = sum(ClosePrices .* NumShares')",
    "page_number": 34,
    "bbox": [
      89.99703979492188,
      363.84112548828125,
      295.8810119628906,
      374.30810546875
    ],
    "caption": null,
    "context": "ATLAB, use sum(X .* Y) or sum(Y .* X). Be sure that the two vectors have the\nsame dimensions. To illustrate, use the previous vectors.\nValue = sum(NumShares .* ClosePrices')\nValue =\n      3.5413e+004\nValue = sum(ClosePrices .* NumShares')\nValue =\n      3.5413e+004\nAs expected, the value in these cases matches the PortfValue computed previously.\nMultiplying Vectors and Matrices\nMultiplying vectors and matrices follows the matrix multipl"
  },
  {
    "element_type": "code",
    "content": "As expected, the value in these cases matches the \nPortfValue\n computed previously.",
    "page_number": 34,
    "bbox": [
      90.00304412841797,
      426.5732727050781,
      481.1730041503906,
      438.2032775878906
    ],
    "caption": null,
    "context": "rs have the\nsame dimensions. To illustrate, use the previous vectors.\nValue = sum(NumShares .* ClosePrices')\nValue =\n      3.5413e+004\nValue = sum(ClosePrices .* NumShares')\nValue =\n      3.5413e+004\nAs expected, the value in these cases matches the PortfValue computed previously.\nMultiplying Vectors and Matrices\nMultiplying vectors and matrices follows the matrix multiplication rules and process. For example, a\nportfolio matrix contains closing prices for a week. A second matrix"
  },
  {
    "element_type": "code",
    "content": "WeekClosePr = [42.5     15      78.875\n               42.125   15.5    78.75\n               42.125   15.125  79\n               42.625   15.25   78.875\n               43       15.25   78.625];\nPortQuan = [100\n            500\n            300];",
    "page_number": 34,
    "bbox": [
      90.00101470947266,
      516.5468139648438,
      306.7210388183594,
      602.6137084960938
    ],
    "caption": null,
    "context": "rices follows the matrix multiplication rules and process. For example, a\nportfolio matrix contains closing prices for a week. A second matrix (vector) contains the stock\nquantities in the portfolio.\nWeekClosePr = [42.5     15      78.875\n               42.125   15.5    78.75\n               42.125   15.125  79\n               42.625   15.25   78.875\n               43       15.25   78.625];\nPortQuan = [100\n            500\n            300];\nTo see the closing portfolio value for each day, simply multiply\nWeekPortValue = WeekClosePr * PortQuan\nWeekPortValue =\n1.0e+004 *\n    3.5412\n    3.5587\n Matrix Algebra Refresher\n1-9\n"
  },
  {
    "element_type": "code",
    "content": "WeekPortValue = WeekClosePr * PortQuan",
    "page_number": 34,
    "bbox": [
      90.0020523071289,
      634.5427856445312,
      295.8860168457031,
      645.009765625
    ],
    "caption": null,
    "context": "  79\n               42.625   15.25   78.875\n               43       15.25   78.625];\nPortQuan = [100\n            500\n            300];\nTo see the closing portfolio value for each day, simply multiply\nWeekPortValue = WeekClosePr * PortQuan\nWeekPortValue =\n1.0e+004 *\n    3.5412\n    3.5587\n Matrix Algebra Refresher\n1-9\n"
  },
  {
    "element_type": "code",
    "content": "3.5475\n    3.5550\n    3.5513",
    "page_number": 35,
    "bbox": [
      90.0,
      93.02544403076172,
      144.17999267578125,
      125.09243774414062
    ],
    "caption": null,
    "context": "    3.5475\n    3.5550\n    3.5513\nThe prices matrix is 5-by-3, the quantity matrix (vector) is 3-by-1, so the resulting matrix (vector) is 5-\nby-1.\nMultiplying Two Matrices\nMatrix multiplication also follows the rules of matrix algebr"
  },
  {
    "element_type": "code",
    "content": "The prices matrix is \n5\n-by-\n3\n, the quantity matrix (vector) is \n3\n-by-\n1\n, so the resulting matrix (vector) is \n5\n-\nby-\n1\n.",
    "page_number": 35,
    "bbox": [
      89.99996948242188,
      135.30487060546875,
      557.93994140625,
      158.93487548828125
    ],
    "caption": null,
    "context": "    3.5475\n    3.5550\n    3.5513\nThe prices matrix is 5-by-3, the quantity matrix (vector) is 3-by-1, so the resulting matrix (vector) is 5-\nby-1.\nMultiplying Two Matrices\nMatrix multiplication also follows the rules of matrix algebra. In matrix algebra notation, if A is an m-\nby-n matrix and B is an n-by-p matrix\nA =\na11 a"
  },
  {
    "element_type": "code",
    "content": "Portfolios = [100   200\n              500   400\n              300   150];",
    "page_number": 35,
    "bbox": [
      90.00299072265625,
      389.354736328125,
      225.4530029296875,
      421.42169189453125
    ],
    "caption": null,
    "context": "ith row and jth column of C is\nci j = ai1b1 j + ai2b12 + \u2026 + ainbn j .\nTo illustrate, assume that there are two portfolios of the same three stocks previously mentioned but\nwith different quantities.\nPortfolios = [100   200\n              500   400\n              300   150];\nMultiplying the 5-by-3 week's closing prices matrix by the 3-by-2 portfolios matrix yields a 5-by-2\nmatrix showing each day's closing value for both portfolios.\nPortfolioValues = WeekClosePr * Portfol"
  },
  {
    "element_type": "code",
    "content": "Multiplying the \n5\n-by-\n3\n week's closing prices matrix by the \n3\n-by-\n2\n portfolios matrix yields a \n5\n-by-\n2\nmatrix showing each day's closing value for both portfolios.",
    "page_number": 35,
    "bbox": [
      90.00296020507812,
      431.6341247558594,
      535.85302734375,
      455.2641296386719
    ],
    "caption": null,
    "context": "    3.5475\n    3.5550\n    3.5513\nThe prices matrix is 5-by-3, the quantity matrix (vector) is 3-by-1, so the resulting matrix (vector) is 5-\nby-1.\nMultiplying Two Matrices\nMatrix multiplication also follows the rules of matrix algebra. In matrix algebra notation, if A is an m-\nby-n matrix and B is an n-by-p matrix\nA =\na11 a12 \u22efa1n\n\u22ee\n\u22ee\n\u22ee\nai1\nai2 \u22efain\n\u22ee\n\u22ee\n\u22ee\nam1 am2 \u22efamn\n"
  },
  {
    "element_type": "code",
    "content": "PortfolioValues = WeekClosePr * Portfolios",
    "page_number": 35,
    "bbox": [
      89.9959487915039,
      464.64691162109375,
      317.55194091796875,
      475.1138916015625
    ],
    "caption": null,
    "context": "   500   400\n              300   150];\nMultiplying the 5-by-3 week's closing prices matrix by the 3-by-2 portfolios matrix yields a 5-by-2\nmatrix showing each day's closing value for both portfolios.\nPortfolioValues = WeekClosePr * Portfolios\nPortfolioValues =\n1.0e+004 *\n    3.5412    2.6331\n    3.5587    2.6437\n    3.5475    2.6325\n    3.5550    2.6456\n    3.5513    2.6494\nMonday's values result from multiplying each Monday closing price "
  },
  {
    "element_type": "code",
    "content": "3.5412    2.6331\n    3.5587    2.6437\n    3.5475    2.6325\n    3.5550    2.6456\n    3.5513    2.6494",
    "page_number": 35,
    "bbox": [
      89.9959716796875,
      527.5958251953125,
      198.35595703125,
      581.2627563476562
    ],
    "caption": null,
    "context": "sing prices matrix by the 3-by-2 portfolios matrix yields a 5-by-2\nmatrix showing each day's closing value for both portfolios.\nPortfolioValues = WeekClosePr * Portfolios\nPortfolioValues =\n1.0e+004 *\n    3.5412    2.6331\n    3.5587    2.6437\n    3.5475    2.6325\n    3.5550    2.6456\n    3.5513    2.6494\nMonday's values result from multiplying each Monday closing price by its respective number of\nshares and summing the result for the first portfolio, then doing the same for the second portfolio.\nTuesd"
  },
  {
    "element_type": "code",
    "content": "Portfolios = [100   200\n              500   400\n              300   150];",
    "page_number": 36,
    "bbox": [
      90.0,
      93.02544403076172,
      225.4499969482422,
      125.09243774414062
    ],
    "caption": null,
    "context": "Portfolios = [100   200\n              500   400\n              300   150];\nDoublePort = Portfolios * 2\nDoublePort =\n        200           400\n       1000           800\n        600           300\nDividing Matrices\nMatrix division is useful primarily for solving equations, and "
  },
  {
    "element_type": "code",
    "content": "DoublePort = Portfolios * 2",
    "page_number": 36,
    "bbox": [
      90.0,
      136.22543334960938,
      236.28599548339844,
      146.69244384765625
    ],
    "caption": null,
    "context": "Portfolios = [100   200\n              500   400\n              300   150];\nDoublePort = Portfolios * 2\nDoublePort =\n        200           400\n       1000           800\n        600           300\nDividing Matrices\nMatrix division is useful primarily for solving equations, and especially for solving simul"
  },
  {
    "element_type": "code",
    "content": "DoublePort =\n        200           400\n       1000           800\n        600           300",
    "page_number": 36,
    "bbox": [
      90.0,
      155.03599548339844,
      225.4499969482422,
      197.9030303955078
    ],
    "caption": null,
    "context": "Portfolios = [100   200\n              500   400\n              300   150];\nDoublePort = Portfolios * 2\nDoublePort =\n        200           400\n       1000           800\n        600           300\nDividing Matrices\nMatrix division is useful primarily for solving equations, and especially for solving simultaneous linear\nequations (see \u201cSolving Simultaneous Linear Equations\u201d on page 1-11). For ex"
  },
  {
    "element_type": "code",
    "content": "In ordinary algebra, you would divide both sides of the equation by \nA\n, and \nX\n would equal \nB/A\n.\nHowever, since matrix algebra is not commutative \n(A\n*\nX\n \u2260 \nX\n*\nA)\n, different processes apply. In formal\nmatrix algebra, the solution involves matrix inversion. MATLAB, however, simplifies the process by\nproviding two matrix division symbols, left and right (\n\\\n and \n/\n). In general,",
    "page_number": 36,
    "bbox": [
      90.00204467773438,
      281.7442321777344,
      544.5219116210938,
      329.3742370605469
    ],
    "caption": null,
    "context": " primarily for solving equations, and especially for solving simultaneous linear\nequations (see \u201cSolving Simultaneous Linear Equations\u201d on page 1-11). For example, you want to\nsolve for X in A*X = B.\nIn ordinary algebra, you would divide both sides of the equation by A, and X would equal B/A.\nHowever, since matrix algebra is not commutative (A*X \u2260 X*A), different processes apply. In formal\nmatrix algebra, the solution involves matrix inversion. MATLAB, however, simplifies the process by\nproviding two matrix division symbols, left and right (\\ and /). In general,\nX = A\\B solves for X in A*X = B and\nX = B/A solves for X in X*A = B.\nIn general, matrix A must be a nonsingular square matrix; that is, it must be invertible and it must\nhave the same number of rows and columns. (Gener"
  },
  {
    "element_type": "code",
    "content": "X = A\\B\n solves for \nX\n in \nA\n*\nX = B\n and",
    "page_number": 36,
    "bbox": [
      90.00204467773438,
      338.6448669433594,
      262.4820556640625,
      350.2748718261719
    ],
    "caption": null,
    "context": "Portfolios = [100   200\n              500   400\n              300   150];\nDoublePort = Portfolios * 2\nDoublePort =\n        200           400\n       1000           800\n        600           300\nDividing Matrices\nMatrix division is useful prima"
  },
  {
    "element_type": "code",
    "content": "X = B/A\n solves for \nX\n in \nX\n*\nA = B\n.",
    "page_number": 36,
    "bbox": [
      90.00201416015625,
      359.5455017089844,
      245.572021484375,
      371.1755065917969
    ],
    "caption": null,
    "context": "Portfolios = [100   200\n              500   400\n              300   150];\nDoublePort = Portfolios * 2\nDoublePort =\n        200           400\n       1000           800\n        600           300\nDividing Matrices\nMatrix division is useful pr"
  },
  {
    "element_type": "code",
    "content": "In general, matrix \nA\n must be a nonsingular square matrix; that is, it must be invertible and it must\nhave the same number of rows and columns. (Generally, a matrix is invertible if the matrix times its\ninverse equals the identity matrix. To understand the theory and proofs, consult a textbook on linear\nalgebra such as \nElementary Linear Algebra\n by Hill listed in \u201cBibliography\u201d on page A-2.) MATLAB\ngives a warning message if the matrix is singular or nearly so.",
    "page_number": 36,
    "bbox": [
      90.0019760131836,
      380.4461364746094,
      549.8018798828125,
      440.0761413574219
    ],
    "caption": null,
    "context": "Portfolios = [100   200\n              500   400\n              300   150];\nDoublePort = Portfolios * 2\nDoublePort =\n        200           400\n       1000           800\n        600           300\nDividing Matrices\nMatrix division is useful primarily for solving equations, and especially for solving simultaneous linear\nequations (see \u201cSolving Simultaneous Linear Equations\u201d on page 1-11). For example, you want to\nsolve for X in A*X = B.\nIn ordinary algebra, you would divide both sides of the equation by A, and X would equal B/A.\nHowever, since matrix algebra is not commutative (A*X \u2260 X*A), different processes apply. In formal\nmatrix algebra, the solution involves "
  },
  {
    "element_type": "code",
    "content": "A = [2  1\n     1 -3];",
    "page_number": 37,
    "bbox": [
      90.00001525878906,
      215.5346221923828,
      149.5980224609375,
      236.80162048339844
    ],
    "caption": null,
    "context": "de constants, X for the variables, and B for the right-side\nconstants\nA = 2\n1\n1 \u22123 ,\u00a0\u00a0\u00a0\u00a0\u00a0X = x\ny ,\u00a0\u00a0\u00a0\u00a0\u00a0B =\n13\n\u221218 ,\nwhere A*X = B.\nSolving the system simultaneously means solving for X. Using MATLAB,\nA = [2  1\n     1 -3];\nB = [13\n    -18];\nX = A \\ B\nsolves for X in A * X = B.\nX = [3 7]\nSo x = 3 and y = 7 in this example. In general, you can use matrix algebra to solve any system of\nlinear equations such as\na11x1 + a12x"
  },
  {
    "element_type": "code",
    "content": "solves for \nX\n in \nA * X = B\n.",
    "page_number": 37,
    "bbox": [
      90.00201416015625,
      297.8788146972656,
      214.13201904296875,
      309.5088195800781
    ],
    "caption": null,
    "context": "there must be two equations, which there are. Matrix algebra represents this system as an equation\ninvolving three matrices: A for the left-side constants, X for the variables, and B for the right-side\nconstants\nA = 2\n1\n1 \u22123 ,\u00a0\u00a0\u00a0\u00a0"
  },
  {
    "element_type": "code",
    "content": "Cash = [100  70\n         80  40];",
    "page_number": 38,
    "bbox": [
      90.0,
      93.02544403076172,
      182.10598754882812,
      114.29243469238281
    ],
    "caption": null,
    "context": "Cash = [100  70\n         80  40];\nUnits = [10\n        20];\nReceipts = Cash * Units\nReceipts =\n       2400\n       1600\nNow the investor asks this question: Given these two portfolios and their characteristics, how many\nunits of each sh"
  },
  {
    "element_type": "code",
    "content": "Units = [10\n        20];",
    "page_number": 38,
    "bbox": [
      90.0,
      125.4254379272461,
      155.0159912109375,
      146.69244384765625
    ],
    "caption": null,
    "context": "Cash = [100  70\n         80  40];\nUnits = [10\n        20];\nReceipts = Cash * Units\nReceipts =\n       2400\n       1600\nNow the investor asks this question: Given these two portfolios and their characteristics, how many\nunits of each should they hold to receive"
  },
  {
    "element_type": "code",
    "content": "Receipts = Cash * Units",
    "page_number": 38,
    "bbox": [
      90.0,
      157.82542419433594,
      214.61398315429688,
      168.2924346923828
    ],
    "caption": null,
    "context": "Cash = [100  70\n         80  40];\nUnits = [10\n        20];\nReceipts = Cash * Units\nReceipts =\n       2400\n       1600\nNow the investor asks this question: Given these two portfolios and their characteristics, how many\nunits of each should they hold to receive $7000 if the prime rate"
  },
  {
    "element_type": "code",
    "content": "Cash = [100  70\n         80  40];",
    "page_number": 38,
    "bbox": [
      90.00299835205078,
      397.76910400390625,
      182.1090087890625,
      419.03607177734375
    ],
    "caption": null,
    "context": "Cash = [100  70\n         80  40];\nUnits = [10\n        20];\nReceipts = Cash * Units\nReceipts =\n       2400\n       1600\nNow the investor asks this question: Given these two portfolios and their characteristics, how many\nunits of each sh"
  },
  {
    "element_type": "code",
    "content": "Receipts = [7000\n            5000];",
    "page_number": 38,
    "bbox": [
      90.00299835205078,
      430.1690673828125,
      187.52700805664062,
      451.43603515625
    ],
    "caption": null,
    "context": "n:\n$80 * x units\n+ $40 * y units = $5000\nreceipts\nIn other words, solve for U (units) in the equation R (receipts) = C (cash) * U (units). Using MATLAB\nleft division\nCash = [100  70\n         80  40];\nReceipts = [7000\n            5000];\nUnits = Cash \\ Receipts\nUnits =\n         43.7500\n         37.5000\nThe investor should hold 43.75 units of portfolio M1 and 37.5 units of portfolio M2 to achieve the\nannual receipts desired.\nOperating "
  },
  {
    "element_type": "code",
    "content": "Units = Cash \\ Receipts",
    "page_number": 38,
    "bbox": [
      90.00299835205078,
      462.56903076171875,
      214.61700439453125,
      473.0360107421875
    ],
    "caption": null,
    "context": "5000\nreceipts\nIn other words, solve for U (units) in the equation R (receipts) = C (cash) * U (units). Using MATLAB\nleft division\nCash = [100  70\n         80  40];\nReceipts = [7000\n            5000];\nUnits = Cash \\ Receipts\nUnits =\n         43.7500\n         37.5000\nThe investor should hold 43.75 units of portfolio M1 and 37.5 units of portfolio M2 to achieve the\nannual receipts desired.\nOperating Element by Element\nFinal"
  },
  {
    "element_type": "code",
    "content": "43.7500\n         37.5000",
    "page_number": 38,
    "bbox": [
      90.00299835205078,
      505.10833740234375,
      176.69100952148438,
      526.3753051757812
    ],
    "caption": null,
    "context": "lve for U (units) in the equation R (receipts) = C (cash) * U (units). Using MATLAB\nleft division\nCash = [100  70\n         80  40];\nReceipts = [7000\n            5000];\nUnits = Cash \\ Receipts\nUnits =\n         43.7500\n         37.5000\nThe investor should hold 43.75 units of portfolio M1 and 37.5 units of portfolio M2 to achieve the\nannual receipts desired.\nOperating Element by Element\nFinally, element-by-element arithmetic operatio"
  },
  {
    "element_type": "code",
    "content": "Finally, element-by-element arithmetic operations are called operations. To indicate a MATLAB array\noperation, precede the operator with a period (\n.\n). Addition and subtraction, and matrix multiplication\nand division by a scalar, are already array operations so no period is necessary. When using array\noperations on two matrices, the dimensions of the matrices must be the same. For example, given\nvectors of stock dividends and closing prices",
    "page_number": 38,
    "bbox": [
      89.99900817871094,
      606.0220947265625,
      556.1688232421875,
      665.652099609375
    ],
    "caption": null,
    "context": "ipts\nUnits =\n         43.7500\n         37.5000\nThe investor should hold 43.75 units of portfolio M1 and 37.5 units of portfolio M2 to achieve the\nannual receipts desired.\nOperating Element by Element\nFinally, element-by-element arithmetic operations are called operations. To indicate a MATLAB array\noperation, precede the operator with a period (.). Addition and subtraction, and matrix multiplication\nand division by a scalar, are already array operations so no period is necessary. When using array\noperations on two matrices, the dimensions of the matrices must be the same. For example, given\nvectors of stock dividends and closing prices\nDividends = [1.90  0.40  1.56  4.50];\nPrices = [25.625  17.75  26.125  60.50];\nYields = Dividends ./ Prices\n Matrix Algebra Refresher\n1-13\n"
  },
  {
    "element_type": "code",
    "content": "Dividends = [1.90  0.40  1.56  4.50];\nPrices = [25.625  17.75  26.125  60.50];",
    "page_number": 38,
    "bbox": [
      90.00008392333984,
      676.225341796875,
      306.7200927734375,
      697.4923706054688
    ],
    "caption": null,
    "context": "ay operations so no period is necessary. When using array\noperations on two matrices, the dimensions of the matrices must be the same. For example, given\nvectors of stock dividends and closing prices\nDividends = [1.90  0.40  1.56  4.50];\nPrices = [25.625  17.75  26.125  60.50];\nYields = Dividends ./ Prices\n Matrix Algebra Refresher\n1-13\n"
  },
  {
    "element_type": "code",
    "content": "Yields = Dividends ./ Prices",
    "page_number": 38,
    "bbox": [
      90.0001220703125,
      708.62548828125,
      241.70411682128906,
      719.0924682617188
    ],
    "caption": null,
    "context": "rices, the dimensions of the matrices must be the same. For example, given\nvectors of stock dividends and closing prices\nDividends = [1.90  0.40  1.56  4.50];\nPrices = [25.625  17.75  26.125  60.50];\nYields = Dividends ./ Prices\n Matrix Algebra Refresher\n1-13\n"
  },
  {
    "element_type": "code",
    "content": "0.0741    0.0225    0.0597    0.0744",
    "page_number": 39,
    "bbox": [
      90.0,
      114.62544250488281,
      306.7200012207031,
      125.09243774414062
    ],
    "caption": null,
    "context": "Yields =\n    0.0741    0.0225    0.0597    0.0744\nSee Also\nMore About\n\u2022\n\u201cAnalyze Sets of Numbers Using Matrix Functions\u201d on page 1-4\n\u2022\n\u201cUsing Input and Output Arguments with Functions\u201d on page 1-15\n1\nGetting Started\n1-14\n"
  },
  {
    "element_type": "code",
    "content": "One example of such a function is the \nirr\n function, which computes the internal rate of return of a\ncash flow stream. If you input a vector of cash flows from a single cash flow stream, then \nirr\n returns\na scalar rate of return. If you input a matrix of cash flows from multiple cash flow streams, where\neach matrix column represents a different stream, then \nirr\n returns a vector of internal rates of\nreturn, where the columns correspond to the columns of the input matrix. Many other Financial\nToolbox functions work similarly.",
    "page_number": 40,
    "bbox": [
      89.9989013671875,
      332.7168884277344,
      554.2689208984375,
      404.346923828125
    ],
    "caption": null,
    "context": "Using Input and Output Arguments with Functions\nIn this section...\n\u201cInput Arguments\u201d on page 1-15\n\u201cOutput Arguments\u201d on page 1-16\nInput Arguments\nVector and Matrix Input\nBy design, MATLAB software can efficiently perform repeated operations on collections of data stored\nin vectors and matrices. MATLAB code that is written to operate simultaneously on different arrays is\nsaid to be vectorized. Vectorized code is not only clean and concise, but is also efficiently processed\nby MATLAB.\nBecause MATLAB is optimized for processing vectorized code, many Financial Toolbox functions\naccept either vector or matrix input arguments, rather than single (scalar) values.\nOne example of such a function is the irr function, which computes t"
  },
  {
    "element_type": "code",
    "content": "CashFlows = [-100 10 20 30 40 50]'",
    "page_number": 40,
    "bbox": [
      89.99591064453125,
      460.9530944824219,
      274.2079162597656,
      471.4200744628906
    ],
    "caption": null,
    "context": "ample, suppose that you make an initial investment of $100, from which you then receive by\na series of annual cash receipts of $10, $20, $30, $40, and $50. This cash flow stream is stored in a\nvector\nCashFlows = [-100 10 20 30 40 50]'\nCashFlows =\n  -100\n    10\n    20\n    30\n    40\n    50\nUse the irr function to compute the internal rate of return of the cash flow stream.\nRate = irr(CashFlows)\nRate =\n    0.1201\nFor the single cash f"
  },
  {
    "element_type": "code",
    "content": "CashFlows =\n  -100\n    10\n    20\n    30\n    40\n    50",
    "page_number": 40,
    "bbox": [
      89.99591827392578,
      481.30841064453125,
      149.5939178466797,
      556.5753173828125
    ],
    "caption": null,
    "context": "tial investment of $100, from which you then receive by\na series of annual cash receipts of $10, $20, $30, $40, and $50. This cash flow stream is stored in a\nvector\nCashFlows = [-100 10 20 30 40 50]'\nCashFlows =\n  -100\n    10\n    20\n    30\n    40\n    50\nUse the irr function to compute the internal rate of return of the cash flow stream.\nRate = irr(CashFlows)\nRate =\n    0.1201\nFor the single cash flow stream CashFlows, the function returns a scalar ra"
  },
  {
    "element_type": "code",
    "content": "Use the \nirr\n function to compute the internal rate of return of the cash flow stream.",
    "page_number": 40,
    "bbox": [
      90.00392150878906,
      567.46142578125,
      474.46380615234375,
      579.0914306640625
    ],
    "caption": null,
    "context": "Using Input and Output Arguments with Functions\nIn this section...\n\u201cInput Arguments\u201d on page 1-15\n\u201cOutput Arguments\u201d on page 1-16\nInput Arguments\nVector and Matrix Input\nBy design, MATLAB software can efficiently perform repeated operations on collections of data stored\nin vectors and "
  },
  {
    "element_type": "code",
    "content": "Rate = irr(CashFlows)",
    "page_number": 40,
    "bbox": [
      90.00189208984375,
      589.0806274414062,
      203.77987670898438,
      599.547607421875
    ],
    "caption": null,
    "context": "eam is stored in a\nvector\nCashFlows = [-100 10 20 30 40 50]'\nCashFlows =\n  -100\n    10\n    20\n    30\n    40\n    50\nUse the irr function to compute the internal rate of return of the cash flow stream.\nRate = irr(CashFlows)\nRate =\n    0.1201\nFor the single cash flow stream CashFlows, the function returns a scalar rate of return of 0.1201, or\n12.01%.\nNow, use the irr function to compute internal rates of return for multip"
  },
  {
    "element_type": "code",
    "content": "For the single cash flow stream \nCashFlows\n, the function returns a scalar rate of return of \n0.1201\n, or\n12.01%.",
    "page_number": 40,
    "bbox": [
      90.00189208984375,
      652.3892822265625,
      557.6318969726562,
      676.019287109375
    ],
    "caption": null,
    "context": "Using Input and Output Arguments with Functions\nIn this section...\n\u201cInput Arguments\u201d on page 1-15\n\u201cOutput Arguments\u201d on page 1-16\nInput Arguments\nVector and Matrix Input\nBy design, MATLAB software can efficiently perform repeated operations on collections of data stored\nin vectors and matrices. MATLAB code that "
  },
  {
    "element_type": "code",
    "content": "Now, use the \nirr\n function to compute internal rates of return for multiple cash flow streams.",
    "page_number": 40,
    "bbox": [
      90.00191497802734,
      687.0062255859375,
      517.041748046875,
      698.63623046875
    ],
    "caption": null,
    "context": "Using Input and Output Arguments with Functions\nIn this section...\n\u201cInput Arguments\u201d on page 1-15\n\u201cOutput Arguments\u201d on page 1-16\nInput Arguments\nVector and Matrix Input\nBy design, MATLAB software can efficiently perform repeated operations on collections of data stored\nin vectors and matrices."
  },
  {
    "element_type": "code",
    "content": "Rate = irr([CashFlows CashFlows CashFlows])",
    "page_number": 40,
    "bbox": [
      90.00088500976562,
      708.6254272460938,
      322.9748840332031,
      719.0924072265625
    ],
    "caption": null,
    "context": "the single cash flow stream CashFlows, the function returns a scalar rate of return of 0.1201, or\n12.01%.\nNow, use the irr function to compute internal rates of return for multiple cash flow streams.\nRate = irr([CashFlows CashFlows CashFlows])\n Using Input and Output Arguments with Functions\n1-15\n"
  },
  {
    "element_type": "code",
    "content": "0.1201    0.1201    0.1201",
    "page_number": 41,
    "bbox": [
      90.0,
      114.62544250488281,
      252.5399932861328,
      125.09243774414062
    ],
    "caption": null,
    "context": "Rate =\n    0.1201    0.1201    0.1201\nMATLAB performs the same computation on all the assets at once. For the three cash flow streams,\nthe irr function returns a vector of three internal rates of return.\nIn the Financial Toolbox context, "
  },
  {
    "element_type": "code",
    "content": "MATLAB performs the same computation on all the assets at once. For the three cash flow streams,\nthe \nirr\n function returns a vector of three internal rates of return.",
    "page_number": 41,
    "bbox": [
      89.99996948242188,
      135.42112731933594,
      545.5299072265625,
      159.05113220214844
    ],
    "caption": null,
    "context": "Rate =\n    0.1201    0.1201    0.1201\nMATLAB performs the same computation on all the assets at once. For the three cash flow streams,\nthe irr function returns a vector of three internal rates of return.\nIn the Financial Toolbox context, vectorized programming is useful in portfolio management. You can\norganize multiple assets into a single collection by placing data for each asset in a different matrix"
  },
  {
    "element_type": "code",
    "content": "Enter MATLAB character vectors surrounded by single quotes (\n'character vector'\n).",
    "page_number": 41,
    "bbox": [
      89.99991607666016,
      237.59970092773438,
      495.9399108886719,
      249.22970581054688
    ],
    "caption": null,
    "context": " can\norganize multiple assets into a single collection by placing data for each asset in a different matrix\ncolumn or row, then pass the matrix to a Financial Toolbox function.\nCharacter Vector Input\nEnter MATLAB character vectors surrounded by single quotes ('character vector').\nA character vector is stored as a character array, one ASCII character per element. Thus, the date\ncharacter vector is\nDateCharacterVector = '9/16/2017'\nThis date character vector is actually a 1-by-9 v"
  },
  {
    "element_type": "code",
    "content": "DateCharacterVector = \n'9/16/2017'",
    "page_number": 41,
    "bbox": [
      89.99791717529297,
      292.7766418457031,
      268.8009338378906,
      303.2436218261719
    ],
    "caption": null,
    "context": "Rate =\n    0.1201    0.1201    0.1201\nMATLAB performs the same computation on all the assets at once. For the three cash flow streams,\nthe irr function returns a vector of three internal rates of return.\nIn the Financial Toolbox conte"
  },
  {
    "element_type": "code",
    "content": "This date character vector is actually a \n1\n-by-\n9\n vector. If you create a vector or matrix of character\nvectors, each character vector must have the same length. Using a column vector to create a vector\nof character vectors can allow you to visually check that all character vectors are the same length. If\nyour character vectors are not the same length, use spaces or zeros to make them the same length, as\nin the following code.",
    "page_number": 41,
    "bbox": [
      90.00090789794922,
      313.57232666015625,
      558.020751953125,
      373.2023010253906
    ],
    "caption": null,
    "context": "Rate =\n    0.1201    0.1201    0.1201\nMATLAB performs the same computation on all the assets at once. For the three cash flow streams,\nthe irr function returns a vector of three internal rates of return.\nIn the Financial Toolbox context, vectorized programming is useful in portfolio management. You can\norganize multiple assets into a single collection by placing data for each asset in a different matrix\ncolumn or row, then pass the matrix to a Financial Toolbox function.\nCharacter Vector Input\nEnter MATLAB character vectors surrounded by single quotes ('character vector').\nA character vector is stored as a character array, o"
  },
  {
    "element_type": "code",
    "content": "DateFields = ['01/12/2017'\n              '02/14/2017'\n              '03/03/2017'\n              '06/14/2017'\n              '12/01/2017'];",
    "page_number": 41,
    "bbox": [
      90.00096893310547,
      382.6897277832031,
      241.7049560546875,
      436.3566589355469
    ],
    "caption": null,
    "context": "ow you to visually check that all character vectors are the same length. If\nyour character vectors are not the same length, use spaces or zeros to make them the same length, as\nin the following code.\nDateFields = ['01/12/2017'\n              '02/14/2017'\n              '03/03/2017'\n              '06/14/2017'\n              '12/01/2017'];\nDateFields is a 5-by-10 array of character vectors.\nYou cannot mix numbers and character vectors in a vector or matrix. If you input a vector or matrix\nthat contains a mix of numbers and character vec"
  },
  {
    "element_type": "code",
    "content": "DateFields\n is a \n5\n-by-\n10\n array of character vectors.",
    "page_number": 41,
    "bbox": [
      90.00496673583984,
      446.68536376953125,
      331.5549621582031,
      458.31536865234375
    ],
    "caption": null,
    "context": "Rate =\n    0.1201    0.1201    0.1201\nMATLAB performs the same computation on all the assets at once. For the three cash flow streams,\nthe irr function returns a vector of three internal rates of return.\nIn the Financial Toolbox context, vectorized program"
  },
  {
    "element_type": "code",
    "content": "Item = [83  90  99 \n'14-Sep-1999'\n]",
    "page_number": 41,
    "bbox": [
      90.00401306152344,
      513.8623046875,
      268.8069763183594,
      524.3292846679688
    ],
    "caption": null,
    "context": "Rate =\n    0.1201    0.1201    0.1201\nMATLAB performs the same computation on all the assets at once. For the three cash flow streams,\nthe irr function returns a vector of three internal rates of return.\nIn the Financial Toolbox contex"
  },
  {
    "element_type": "code",
    "content": "The software understands the input not as a \n1\n-by-\n4\n vector, but as a \n1\n-by-\n14\n character array with the\nvalue \nSZc14-Sep-1999\n.",
    "page_number": 41,
    "bbox": [
      89.99594116210938,
      576.1115112304688,
      549.0257568359375,
      599.7415161132812
    ],
    "caption": null,
    "context": "Rate =\n    0.1201    0.1201    0.1201\nMATLAB performs the same computation on all the assets at once. For the three cash flow streams,\nthe irr function returns a vector of three internal rates of return.\nIn the Financial Toolbox context, vectorized programming is useful in portfolio management. You can\norganize multiple assets int"
  },
  {
    "element_type": "code",
    "content": "[A, B, C] = \nfunction\n(input_arguments\n...\n)",
    "page_number": 41,
    "bbox": [
      89.99596405029297,
      674.56591796875,
      306.7339782714844,
      685.0328979492188
    ],
    "caption": null,
    "context": "Rate =\n    0.1201    0.1201    0.1201\nMATLAB performs the same computation on all the assets at once. For the three cash flow streams,\nthe irr function returns a vector of three internal rates of return.\nIn the Financial Toolbox context, vector"
  },
  {
    "element_type": "code",
    "content": "to return arguments \nA\n, \nB\n, and \nC\n. If you omit all but one, the function returns the first argument. Thus,\nfor this example if you use the syntax",
    "page_number": 41,
    "bbox": [
      90.00398254394531,
      695.361572265625,
      556.1638793945312,
      718.9915771484375
    ],
    "caption": null,
    "context": "Rate =\n    0.1201    0.1201    0.1201\nMATLAB performs the same computation on all the assets at once. For the three cash flow streams,\nthe irr function returns a vector of three internal rates of return.\nIn the Financial Toolbox context, vectorized programming is useful in portfolio management. You can\norganize multiple assets into a single collec"
  },
  {
    "element_type": "code",
    "content": "X = \nfunction\n(input_arguments\n...\n)",
    "page_number": 42,
    "bbox": [
      90.0,
      93.02544403076172,
      263.3940124511719,
      103.49243927001953
    ],
    "caption": null,
    "context": "X = function(input_arguments...)\nthe function returns a value for A, but not for B or C.\nSome functions that return vectors accept only scalars as arguments. Such functions cannot accept\nvectors as arguments and return matrices, where e"
  },
  {
    "element_type": "code",
    "content": "the \nfunction\n returns a value for \nA\n, but not for \nB\n or \nC\n.",
    "page_number": 42,
    "bbox": [
      90.00399780273438,
      113.7615966796875,
      340.2940368652344,
      125.39159393310547
    ],
    "caption": null,
    "context": "X = function(input_arguments...)\nthe function returns a value for A, but not for B or C.\nSome functions that return vectors accept only scalars as arguments. Such functions cannot accept\nvectors as arguments and return matrices, where each column in the output ma"
  },
  {
    "element_type": "code",
    "content": "For example, most functions that require asset life as an input, and return values corresponding to\ndifferent periods over the asset life, cannot handle vectors or matrices as input arguments. These\nfunctions include \namortize\n, \ndepfixdb\n, \ndepgendb\n, and \ndepsoyd\n. For example, consider a car for\nwhich you want to compute the depreciation schedule. Use the \ndepfixdb\n function to compute a\nstream of declining-balance depreciation values for the asset. Set the initial value of the asset and the\nlifetime of the asset. Note that in the returned vector, the asset lifetime determines the number of\nrows. Now consider a collection of cars with different lifetimes. Because \ndepfixdb\n cannot output a\nmatrix with an unequal number of rows in each column, \ndepfixdb\n cannot accept a single input\nvector with values for each asset in the collection.",
    "page_number": 42,
    "bbox": [
      90.00394439697266,
      181.7615966796875,
      556.7637329101562,
      289.3916015625
    ],
    "caption": null,
    "context": "s arguments. Such functions cannot accept\nvectors as arguments and return matrices, where each column in the output matrix corresponds to an\nentry in the input. Output vectors can be variable length.\nFor example, most functions that require asset life as an input, and return values corresponding to\ndifferent periods over the asset life, cannot handle vectors or matrices as input arguments. These\nfunctions include amortize, depfixdb, depgendb, and depsoyd. For example, consider a car for\nwhich you want to compute the depreciation schedule. Use the depfixdb function to compute a\nstream of declining-balance depreciation values for the asset. Set the initial value of the asset and the\nlifetime of the asset. Note that in the returned vector, the asset lifetime determines the number of\nrows. Now consider a collection of cars with different lifetimes. Because depfixdb cannot output a\nmatrix with an unequal number of rows in each column, depfixdb cannot accept a single input\nvector with values for each asset in the collection.\nSee Also\nRelated Examples\n\u2022\n\u201cMatrices and Arrays\u201d\nMore About\n\u2022\n\u201cAnalyze Sets of Numbers Using Matrix Functions\u201d on page 1-4\n\u2022\n\u201cMatrix Algebra Refresher\u201d on page 1-7\n Using Input and Output Arguments with Functions\n"
  },
  {
    "element_type": "code",
    "content": "\u2022\nDate character vectors are text that represent date and time, which you can use with multiple\nformats. For example, \n'dd-mmm-yyyy HH:MM:SS'\n, \n'dd-mmm-yyyy'\n, and \n'mm/dd/yyyy'\n are all\nsupported text formats for a date character vector. Most often, you work with date character\nvectors (such as \n14-Sep-1999\n) when dealing with dates.",
    "page_number": 45,
    "bbox": [
      90.0019760131836,
      348.96160888671875,
      554.0819702148438,
      396.59161376953125
    ],
    "caption": null,
    "context": "s, functions in Financial Toolbox have extensive\ndate-handling capabilities. The toolbox functions support date or date-and-time formats as character\nvectors, datetime arrays, or serial date numbers.\n\u2022\nDate character vectors are text that represent date and time, which you can use with multiple\nformats. For example, 'dd-mmm-yyyy HH:MM:SS', 'dd-mmm-yyyy', and 'mm/dd/yyyy' are all\nsupported text formats for a date character vector. Most often, you work with date character\nvectors (such as 14-Sep-1999) when dealing with dates.\n\u2022\nDatetime arrays, created using datetime, are the best data type for representing points in time.\ndatetime values have flexible display formats and up to nanosecond precision, and can account\nfor time zones,"
  },
  {
    "element_type": "code",
    "content": "\u2022\nDatetime arrays, created using \ndatetime\n, are the best data type for representing points in time.\ndatetime\n values have flexible display formats and up to nanosecond precision, and can account\nfor time zones, daylight saving time, and leap seconds. When \ndatetime\n objects are used as inputs\nto other Financial Toolbox functions, the format of the input \ndatetime\n object is preserved. For\nexample:",
    "page_number": 45,
    "bbox": [
      90.00201416015625,
      401.96160888671875,
      557.2218627929688,
      461.59161376953125
    ],
    "caption": null,
    "context": "Handle and Convert Dates\nIn this section...\n\u201cDate Formats\u201d on page 2-2\n\u201cDate Conversions\u201d on page 2-3\n\u201cCurrent Date and Time\u201d on page 2-7\n\u201cDetermining Specific Dates\u201d on page 2-8\n\u201cDetermining Holidays\u201d on page 2-8\n\u201cDetermining Cash-Flow Dates\u201d on page 2-9\nDate Formats\nVirtually all financial data derives from a time series, functions in Financial Toolbox have extensive\ndate-handling capabilities. The toolbox functions support date or date-and-time formats as character\nvectors, datetime arrays, or serial date numbers.\n\u2022\nDate character vectors are text that represent date and time, which you can "
  },
  {
    "element_type": "code",
    "content": "originalDate = datetime('now','Format','yyyy-MM-dd HH:mm:ss'); \n  % Find the next business day \n  b = busdate(originalDate)",
    "page_number": 45,
    "bbox": [
      104.99799346923828,
      472.825439453125,
      446.33197021484375,
      515.6923828125
    ],
    "caption": null,
    "context": "r time zones, daylight saving time, and leap seconds. When datetime objects are used as inputs\nto other Financial Toolbox functions, the format of the input datetime object is preserved. For\nexample:\noriginalDate = datetime('now','Format','yyyy-MM-dd HH:mm:ss'); \n  % Find the next business day \n  b = busdate(originalDate)\n  \nb = \n  datetime\n   2021-05-04 15:59:34\n\u2022\nSerial date numbers represent a calendar date as the number of days that have passed since a\nfixed base date. In MATLAB software, serial date number 1 is Janua"
  },
  {
    "element_type": "code",
    "content": "\u2022\nSerial date numbers represent a calendar date as the number of days that have passed since a\nfixed base date. In MATLAB software, serial date number \n1\n is January 1,0000 A.D. Financial\nToolbox works internally with serial date numbers (such as, \n730377\n). MATLAB also uses serial\ntime to represent fractions of days beginning at midnight. For example, 6 p.m. equals \n0.75\n serial\ndays, so 6:00 p.m. on \n14-Sep-1999\n, in MATLAB, is serial date number \n730377.75",
    "page_number": 45,
    "bbox": [
      90.00399017333984,
      585.761474609375,
      551.4339599609375,
      645.3914794921875
    ],
    "caption": null,
    "context": "object is preserved. For\nexample:\noriginalDate = datetime('now','Format','yyyy-MM-dd HH:mm:ss'); \n  % Find the next business day \n  b = busdate(originalDate)\n  \nb = \n  datetime\n   2021-05-04 15:59:34\n\u2022\nSerial date numbers represent a calendar date as the number of days that have passed since a\nfixed base date. In MATLAB software, serial date number 1 is January 1,0000 A.D. Financial\nToolbox works internally with serial date numbers (such as, 730377). MATLAB also uses serial\ntime to represent fractions of days beginning at midnight. For example, 6 p.m. equals 0.75 serial\ndays, so 6:00 p.m. on 14-Sep-1999, in MATLAB, is serial date number 730377.75\nNote If you specify a two-digit year, MATLAB assumes that the year lies within the 100-year period\ncentered on the current year. See the function datenum for specific information. MATLAB internal\ndate handling"
  },
  {
    "element_type": "code",
    "content": "Note\n If you specify a two-digit year, MATLAB assumes that the year lies within the 100-year period\ncentered on the current year. See the function \ndatenum\n for specific information. MATLAB internal\ndate handling and calculations generate no ambiguous values. However, whenever possible, use\nserial date numbers or date character vectors containing four-digit years.",
    "page_number": 45,
    "bbox": [
      90.00395202636719,
      666.261474609375,
      546.11376953125,
      713.8914794921875
    ],
    "caption": null,
    "context": "Handle and Convert Dates\nIn this section...\n\u201cDate Formats\u201d on page 2-2\n\u201cDate Conversions\u201d on page 2-3\n\u201cCurrent Date and Time\u201d on page 2-7\n\u201cDetermining Specific Dates\u201d on page 2-8\n\u201cDetermining Holidays\u201d on page 2-8\n\u201cDetermining Cash-Flow Dates\u201d on page 2-9\nDate Formats\nVirtually all financial data derives from a time series, functions in Financial Toolbox have extensive\ndate-handling capabilities. The toolbox functions support date or date-and-time formats as character\nvectors, datetime arrays, or serial date numbers.\n\u2022\nDate character vectors are text that repr"
  },
  {
    "element_type": "code",
    "content": "datedisp\nDisplays a numeric matrix with date entries formatted as date character\nvectors.",
    "page_number": 46,
    "bbox": [
      92.25,
      270.473876953125,
      530.929931640625,
      294.1038818359375
    ],
    "caption": null,
    "context": "nvert date character vectors to or from serial date\nnumbers. In addition, you can convert character vectors or serial date numbers to datetime arrays.\nFunctions that convert between date formats are:\ndatedisp\nDisplays a numeric matrix with date entries formatted as date character\nvectors.\ndatenum\nConverts a date character vector to a serial date number.\ndatestr\nConverts a serial date number to a date character vector.\ndatetime\nConverts from date character vectors or serial date numbers"
  },
  {
    "element_type": "code",
    "content": "datenum\nConverts a date character vector to a serial date number.",
    "page_number": 46,
    "bbox": [
      92.25,
      298.973876953125,
      462.02001953125,
      310.6038818359375
    ],
    "caption": null,
    "context": "character vectors or serial date numbers to datetime arrays.\nFunctions that convert between date formats are:\ndatedisp\nDisplays a numeric matrix with date entries formatted as date character\nvectors.\ndatenum\nConverts a date character vector to a serial date number.\ndatestr\nConverts a serial date number to a date character vector.\ndatetime\nConverts from date character vectors or serial date numbers to create a\ndatetime array.\ndatevec\nConverts a serial date number"
  },
  {
    "element_type": "code",
    "content": "datestr\nConverts a serial date number to a date character vector.",
    "page_number": 46,
    "bbox": [
      92.2499771118164,
      315.473876953125,
      462.01995849609375,
      327.1038818359375
    ],
    "caption": null,
    "context": "ions that convert between date formats are:\ndatedisp\nDisplays a numeric matrix with date entries formatted as date character\nvectors.\ndatenum\nConverts a date character vector to a serial date number.\ndatestr\nConverts a serial date number to a date character vector.\ndatetime\nConverts from date character vectors or serial date numbers to create a\ndatetime array.\ndatevec\nConverts a serial date number or date character vector to a date vector\nwhose elements are [Yea"
  },
  {
    "element_type": "code",
    "content": "datetime\nConverts from date character vectors or serial date numbers to create a\ndatetime array.",
    "page_number": 46,
    "bbox": [
      92.24993896484375,
      331.973876953125,
      530.0899047851562,
      355.6038818359375
    ],
    "caption": null,
    "context": "meric matrix with date entries formatted as date character\nvectors.\ndatenum\nConverts a date character vector to a serial date number.\ndatestr\nConverts a serial date number to a date character vector.\ndatetime\nConverts from date character vectors or serial date numbers to create a\ndatetime array.\ndatevec\nConverts a serial date number or date character vector to a date vector\nwhose elements are [Year Month Day Hour Minute Second].\nm2xdate\nConverts MATLAB serial date number to Excel\u00ae serial date"
  },
  {
    "element_type": "code",
    "content": "datevec\nConverts a serial date number or date character vector to a date vector\nwhose elements are \n[Year Month Day Hour Minute Second]\n.",
    "page_number": 46,
    "bbox": [
      92.24996185302734,
      360.473876953125,
      527.3799438476562,
      384.1038818359375
    ],
    "caption": null,
    "context": "cter vector to a serial date number.\ndatestr\nConverts a serial date number to a date character vector.\ndatetime\nConverts from date character vectors or serial date numbers to create a\ndatetime array.\ndatevec\nConverts a serial date number or date character vector to a date vector\nwhose elements are [Year Month Day Hour Minute Second].\nm2xdate\nConverts MATLAB serial date number to Excel\u00ae serial date number.\nx2mdate\nConverts Microsoft\u00ae Excel serial date number to MATLAB serial date\nnumber.\nFor more information, see \u201cConvert Between Tex"
  },
  {
    "element_type": "code",
    "content": "m2xdate\nConverts MATLAB serial date number to Excel\n\u00ae\n serial date number.",
    "page_number": 46,
    "bbox": [
      92.24993896484375,
      388.7957458496094,
      510.31671142578125,
      400.6038818359375
    ],
    "caption": null,
    "context": "cter vectors or serial date numbers to create a\ndatetime array.\ndatevec\nConverts a serial date number or date character vector to a date vector\nwhose elements are [Year Month Day Hour Minute Second].\nm2xdate\nConverts MATLAB serial date number to Excel\u00ae serial date number.\nx2mdate\nConverts Microsoft\u00ae Excel serial date number to MATLAB serial date\nnumber.\nFor more information, see \u201cConvert Between Text and datetime or duration Values\u201d.\nConvert Between Datetime Arrays and C"
  },
  {
    "element_type": "code",
    "content": "x2mdate\nConverts Microsoft\n\u00ae\n Excel serial date number to MATLAB serial date\nnumber.",
    "page_number": 46,
    "bbox": [
      92.24671936035156,
      405.2957458496094,
      516.88330078125,
      429.1038818359375
    ],
    "caption": null,
    "context": "Many Financial Toolbox functions that require dates as input arguments accept date character\nvectors, datetime arrays, or serial date numbers. If you are dealing with a few dates at the MATLAB\ncommand-line level, date character vectors are more convenient. If you are using Financial "
  },
  {
    "element_type": "code",
    "content": "'23-Aug-2010 04:35:06 PM'\n'Wednesday, August 23'\n'08/23/10 16:35'\n'Aug 23 16:35:42.946'",
    "page_number": 46,
    "bbox": [
      90.00189971923828,
      538.0358276367188,
      225.45188903808594,
      580.9027709960938
    ],
    "caption": null,
    "context": "o a specific date and time. There are\nseveral ways to represent dates and times in several text formats. For example, all the following are\ncharacter vectors represent August 23, 2010 at 04:35:42 PM:\n'23-Aug-2010 04:35:06 PM'\n'Wednesday, August 23'\n'08/23/10 16:35'\n'Aug 23 16:35:42.946'\nA date character vector includes characters that separate the fields, such as the hyphen, space, and\ncolon used here:\nd = '23-Aug-2010 16:35:42'    \nConvert one or more date character vectors to a dat"
  },
  {
    "element_type": "code",
    "content": "d = \n'23-Aug-2010 16:35:42'",
    "page_number": 46,
    "bbox": [
      90.00289154052734,
      627.7669677734375,
      252.5518798828125,
      638.2339477539062
    ],
    "caption": null,
    "context": "Many Financial Toolbox functions that require dates as input arguments accept date character\nvectors, datetime arrays, or serial date numbers. If you are dealing with a few dates at the MATLAB\ncommand-line level, date character vect"
  },
  {
    "element_type": "code",
    "content": "Convert one or more date character vectors to a \ndatetime\n array using the \ndatetime\n function. For\nthe best performance, specify the format of the input character vectors as an input to \ndatetime\n.",
    "page_number": 46,
    "bbox": [
      90.00186157226562,
      650.3616333007812,
      547.3118286132812,
      673.9916381835938
    ],
    "caption": null,
    "context": "Many Financial Toolbox functions that require dates as input arguments accept date character\nvectors, datetime arrays, or serial date numbers. If you are dealing with a few dates at the MATLAB\ncommand-line level, date character vectors are more convenient. If you are using Financial Toolbox\nfunctions on large numbers of dates, as in analyzing large portfolios or cash flows, performance\nimproves "
  },
  {
    "element_type": "code",
    "content": "Note\n The specifiers that \ndatetime\n uses to describe date and time formats differ from the specifiers\nthat the \ndatestr\n, \ndatevec\n, and \ndatenum\n functions accept.",
    "page_number": 46,
    "bbox": [
      90.00186157226562,
      694.8616333007812,
      552.2318115234375,
      718.4916381835938
    ],
    "caption": null,
    "context": "Many Financial Toolbox functions that require dates as input arguments accept date character\nvectors, datetime arrays, or serial date numbers. If you are dealing with a few dates at the MATLAB\ncommand-line level, date character vectors are more convenient. If you are using Financial Toolbox\nfunctions on large numbers of dates, as in analyzing large portfolios or "
  },
  {
    "element_type": "code",
    "content": "t = datetime(d,\n'InputFormat'\n,\n'dd-MMM-yyyy HH:mm:ss'\n)",
    "page_number": 47,
    "bbox": [
      90.0,
      93.02544403076172,
      371.7629699707031,
      103.49243927001953
    ],
    "caption": null,
    "context": "t = datetime(d,'InputFormat','dd-MMM-yyyy HH:mm:ss')\nt = \n   23-Aug-2010 16:35:42\nAlthough the date string, d, and the datetime scalar, t, look similar, they are not equal. View the\nsize and data type of each variable.\nwhos d t\n    Name      Size          "
  },
  {
    "element_type": "code",
    "content": "Although the date string, \nd\n, and the \ndatetime\n scalar, \nt\n, look similar, they are not equal. View the\nsize and data type of each variable.",
    "page_number": 47,
    "bbox": [
      90.00395202636719,
      155.48876953125,
      538.5437622070312,
      179.1187744140625
    ],
    "caption": null,
    "context": "t = datetime(d,'InputFormat','dd-MMM-yyyy HH:mm:ss')\nt = \n   23-Aug-2010 16:35:42\nAlthough the date string, d, and the datetime scalar, t, look similar, they are not equal. View the\nsize and data type of each variable.\nwhos d t\n    Name      Size            Bytes  Class       Attributes\n  d         1x20               40  char               "
  },
  {
    "element_type": "code",
    "content": "Name      Size            Bytes  Class       Attributes",
    "page_number": 47,
    "bbox": [
      89.99595642089844,
      208.66256713867188,
      409.6579284667969,
      219.12957763671875
    ],
    "caption": null,
    "context": ",'dd-MMM-yyyy HH:mm:ss')\nt = \n   23-Aug-2010 16:35:42\nAlthough the date string, d, and the datetime scalar, t, look similar, they are not equal. View the\nsize and data type of each variable.\nwhos d t\n    Name      Size            Bytes  Class       Attributes\n  d         1x20               40  char                  \n  t         1x1               121  datetime              \nConvert a datetime array to a character vector that uses char or cellstr. For exampl"
  },
  {
    "element_type": "code",
    "content": "d         1x20               40  char                  \n  t         1x1               121  datetime",
    "page_number": 47,
    "bbox": [
      89.99593353271484,
      230.26255798339844,
      398.8218994140625,
      251.52955627441406
    ],
    "caption": null,
    "context": "gh the date string, d, and the datetime scalar, t, look similar, they are not equal. View the\nsize and data type of each variable.\nwhos d t\n    Name      Size            Bytes  Class       Attributes\n  d         1x20               40  char                  \n  t         1x1               121  datetime              \nConvert a datetime array to a character vector that uses char or cellstr. For example, convert\nthe current date and time to a timestamp to append to a file name.\nt = datetime('now','Format','yyyy-MM-d"
  },
  {
    "element_type": "code",
    "content": "Convert a \ndatetime\n array to a character vector that uses \nchar\n or \ncellstr\n. For example, convert\nthe current date and time to a timestamp to append to a file name.",
    "page_number": 47,
    "bbox": [
      90.00186157226562,
      261.97088623046875,
      543.121826171875,
      285.60089111328125
    ],
    "caption": null,
    "context": "t = datetime(d,'InputFormat','dd-MMM-yyyy HH:mm:ss')\nt = \n   23-Aug-2010 16:35:42\nAlthough the date string, d, and the datetime scalar, t, look similar, they are not equal. View the\nsize and data type of each variable.\nwhos d t\n    Name      Size            Bytes  Class       Attributes\n  d         1x20               40  char                  \n  t         1x1      "
  },
  {
    "element_type": "code",
    "content": "t = datetime(\n'now'\n,\n'Format'\n,\n'yyyy-MM-dd''T''HHmmss'\n)",
    "page_number": 47,
    "bbox": [
      90.00189208984375,
      295.1897277832031,
      371.75592041015625,
      305.6567077636719
    ],
    "caption": null,
    "context": "t = datetime(d,'InputFormat','dd-MMM-yyyy HH:mm:ss')\nt = \n   23-Aug-2010 16:35:42\nAlthough the date string, d, and the datetime scalar, t, look similar, they are not equal. View the\nsize and data type of each variable.\nwhos d t\n    Name      Size            "
  },
  {
    "element_type": "code",
    "content": "S = char(t);\nfilename = [\n'myTest_'\n,S]",
    "page_number": 47,
    "bbox": [
      90.0019302368164,
      378.2995910644531,
      220.0429229736328,
      399.5665588378906
    ],
    "caption": null,
    "context": "t = datetime(d,'InputFormat','dd-MMM-yyyy HH:mm:ss')\nt = \n   23-Aug-2010 16:35:42\nAlthough the date string, d, and the datetime scalar, t, look similar, they are not equal. View the\nsize and data type of each variable.\nwhos d t\n    Name   "
  },
  {
    "element_type": "code",
    "content": "'myTest_2016-12-11T125628'",
    "page_number": 47,
    "bbox": [
      90.00192260742188,
      430.6545104980469,
      252.5419158935547,
      441.1214904785156
    ],
    "caption": null,
    "context": "rrent date and time to a timestamp to append to a file name.\nt = datetime('now','Format','yyyy-MM-dd''T''HHmmss')\nt = \n  datetime\n   2016-12-11T125628\nS = char(t);\nfilename = ['myTest_',S]\nfilename =\n    'myTest_2016-12-11T125628'\nConvert Serial Date Numbers to Datetime Arrays\nSerial time can represent fractions of days beginning at midnight. For example, 6 p.m. equals 0.75\nserial days, so the character vector '31-Oct-2003, 6:0"
  },
  {
    "element_type": "code",
    "content": "Serial time can represent fractions of days beginning at midnight. For example, 6 p.m. equals \n0.75\nserial days, so the character vector \n'31-Oct-2003, 6:00 PM'\n in MATLAB is date number\n731885.75\n.",
    "page_number": 47,
    "bbox": [
      90.00194549560547,
      473.73504638671875,
      545.1419677734375,
      509.36505126953125
    ],
    "caption": null,
    "context": "','Format','yyyy-MM-dd''T''HHmmss')\nt = \n  datetime\n   2016-12-11T125628\nS = char(t);\nfilename = ['myTest_',S]\nfilename =\n    'myTest_2016-12-11T125628'\nConvert Serial Date Numbers to Datetime Arrays\nSerial time can represent fractions of days beginning at midnight. For example, 6 p.m. equals 0.75\nserial days, so the character vector '31-Oct-2003, 6:00 PM' in MATLAB is date number\n731885.75.\nConvert one or more serial date numbers to a datetime array using the datetime function. Specify\nthe type of date number that is being converted:\nt = datetime(731885.75,'ConvertFrom','datenum')\nt = \n  dat"
  },
  {
    "element_type": "code",
    "content": "Convert one or more serial date numbers to a \ndatetime\n array using the \ndatetime\n function. Specify\nthe type of date number that is being converted:",
    "page_number": 47,
    "bbox": [
      90.00198364257812,
      519.9071655273438,
      553.4119262695312,
      543.5371704101562
    ],
    "caption": null,
    "context": "t = datetime(d,'InputFormat','dd-MMM-yyyy HH:mm:ss')\nt = \n   23-Aug-2010 16:35:42\nAlthough the date string, d, and the datetime scalar, t, look similar, they are not equal. View the\nsize and data type of each variable.\nwhos d t\n    Name      Size            Bytes  Class       Attributes\n  d         1x20               40  char                  \n  t"
  },
  {
    "element_type": "code",
    "content": "t = datetime(731885.75,\n'ConvertFrom'\n,\n'datenum'\n)",
    "page_number": 47,
    "bbox": [
      90.00200653076172,
      553.1260375976562,
      344.6659851074219,
      563.593017578125
    ],
    "caption": null,
    "context": "t = datetime(d,'InputFormat','dd-MMM-yyyy HH:mm:ss')\nt = \n   23-Aug-2010 16:35:42\nAlthough the date string, d, and the datetime scalar, t, look similar, they are not equal. View the\nsize and data type of each variable.\nwhos d t\n    Name      Size     "
  },
  {
    "element_type": "code",
    "content": "Some MATLAB functions accept numeric data types but not datetime values as inputs. To apply these\nfunctions to your date and time data, first, convert datetime values to meaningful numeric values, and\nthen call the function. For example, the \nlog\n function accepts \ndouble\n inputs but not \ndatetime\ninputs. Suppose that you have a \ndatetime\n array of dates spanning the course of a research study or\nexperiment.",
    "page_number": 47,
    "bbox": [
      89.9959716796875,
      659.3615112304688,
      557.415771484375,
      718.9915161132812
    ],
    "caption": null,
    "context": "me function. Specify\nthe type of date number that is being converted:\nt = datetime(731885.75,'ConvertFrom','datenum')\nt = \n  datetime\n   31-Oct-2003 18:00:00\nConvert Datetime Arrays to Numeric Values\nSome MATLAB functions accept numeric data types but not datetime values as inputs. To apply these\nfunctions to your date and time data, first, convert datetime values to meaningful numeric values, and\nthen call the function. For example, the log function accepts double inputs but not datetime\ninputs. Suppose that you have a datetime array of dates spanning the course of a research study or\nexperiment.\n2\nPerforming Common Financial Tasks\n2-4\n"
  },
  {
    "element_type": "code",
    "content": "t = datetime(2014,6,18) + calmonths(1:4)",
    "page_number": 48,
    "bbox": [
      90.0,
      93.02544403076172,
      306.7200012207031,
      103.49243927001953
    ],
    "caption": null,
    "context": "t = datetime(2014,6,18) + calmonths(1:4)\nt = \n  1\u00d74 datetime array\n   18-Jul-2014   18-Aug-2014   18-Sep-2014   18-Oct-2014\nSubtract the origin value. For example, the origin value can be the starting day of an experiment.\ndt = t - datetime("
  },
  {
    "element_type": "code",
    "content": "18-Jul-2014   18-Aug-2014   18-Sep-2014   18-Oct-2014",
    "page_number": 48,
    "bbox": [
      90.0,
      155.9188690185547,
      393.4079895019531,
      166.38587951660156
    ],
    "caption": null,
    "context": "t = datetime(2014,6,18) + calmonths(1:4)\nt = \n  1\u00d74 datetime array\n   18-Jul-2014   18-Aug-2014   18-Sep-2014   18-Oct-2014\nSubtract the origin value. For example, the origin value can be the starting day of an experiment.\ndt = t - datetime(2014,7,1)\ndt = \n  1\u00d74 duration array\n    408:00:00   1152:00:00   1896:00:00   2616"
  },
  {
    "element_type": "code",
    "content": "dt = t - datetime(2014,7,1)",
    "page_number": 48,
    "bbox": [
      89.99598693847656,
      197.4938507080078,
      236.281982421875,
      207.9608612060547
    ],
    "caption": null,
    "context": " + calmonths(1:4)\nt = \n  1\u00d74 datetime array\n   18-Jul-2014   18-Aug-2014   18-Sep-2014   18-Oct-2014\nSubtract the origin value. For example, the origin value can be the starting day of an experiment.\ndt = t - datetime(2014,7,1)\ndt = \n  1\u00d74 duration array\n    408:00:00   1152:00:00   1896:00:00   2616:00:00\ndt is a duration array. Convert dt to a double array of values in units of years, days, hours,\nminutes, or seconds by us"
  },
  {
    "element_type": "code",
    "content": "408:00:00   1152:00:00   1896:00:00   2616:00:00",
    "page_number": 48,
    "bbox": [
      89.99598693847656,
      260.3872375488281,
      371.7319641113281,
      270.8542175292969
    ],
    "caption": null,
    "context": "014   18-Aug-2014   18-Sep-2014   18-Oct-2014\nSubtract the origin value. For example, the origin value can be the starting day of an experiment.\ndt = t - datetime(2014,7,1)\ndt = \n  1\u00d74 duration array\n    408:00:00   1152:00:00   1896:00:00   2616:00:00\ndt is a duration array. Convert dt to a double array of values in units of years, days, hours,\nminutes, or seconds by using the years, days, hours, minutes, or seconds function, respectively.\nx = hour"
  },
  {
    "element_type": "code",
    "content": "dt\n is a \nduration\n array. Convert \ndt\n to a \ndouble\n array of values in units of years, days, hours,\nminutes, or seconds by using the \nyears\n, \ndays\n, \nhours\n, \nminutes\n, or \nseconds\n function, respectively.",
    "page_number": 48,
    "bbox": [
      90.00199127197266,
      281.0049743652344,
      550.2119140625,
      304.6349792480469
    ],
    "caption": null,
    "context": "t = datetime(2014,6,18) + calmonths(1:4)\nt = \n  1\u00d74 datetime array\n   18-Jul-2014   18-Aug-2014   18-Sep-2014   18-Oct-2014\nSubtract the origin value. For example, the origin value can be the starting day of an experiment.\ndt = t - datetime(2014,7,1)\ndt = \n  1\u00d74 duration array\n    408:00:00   1152:00:00   1896:00:00   2616:00:00\ndt is a duration array. Convert dt to a double array of values in units of ye"
  },
  {
    "element_type": "code",
    "content": "408        1152        1896        2616",
    "page_number": 48,
    "bbox": [
      89.99703979492188,
      355.255615234375,
      350.0610046386719,
      365.72259521484375
    ],
    "caption": null,
    "context": "ration array. Convert dt to a double array of values in units of years, days, hours,\nminutes, or seconds by using the years, days, hours, minutes, or seconds function, respectively.\nx = hours(dt)\nx =\n         408        1152        1896        2616\nPass the double array as the input to the log function.\ny = log(x)\ny =\n    6.0113    7.0493    7.5475    7.8694\nInput Conversions with datenum\nThe datenum function is important for using Financial Too"
  },
  {
    "element_type": "code",
    "content": "Pass the \ndouble\n array as the input to the \nlog\n function.",
    "page_number": 48,
    "bbox": [
      90.00102996826172,
      375.8733215332031,
      344.9310302734375,
      387.5033264160156
    ],
    "caption": null,
    "context": "t = datetime(2014,6,18) + calmonths(1:4)\nt = \n  1\u00d74 datetime array\n   18-Jul-2014   18-Aug-2014   18-Sep-2014   18-Oct-2014\nSubtract the origin value. For example, the origin value can be the starting day of an experiment.\ndt = t - datetime(2014,7,1)\ndt = \n  "
  },
  {
    "element_type": "code",
    "content": "6.0113    7.0493    7.5475    7.8694",
    "page_number": 48,
    "bbox": [
      89.99702453613281,
      438.1239929199219,
      306.7170104980469,
      448.5909729003906
    ],
    "caption": null,
    "context": "ars, days, hours, minutes, or seconds function, respectively.\nx = hours(dt)\nx =\n         408        1152        1896        2616\nPass the double array as the input to the log function.\ny = log(x)\ny =\n    6.0113    7.0493    7.5475    7.8694\nInput Conversions with datenum\nThe datenum function is important for using Financial Toolbox software efficiently. datenum takes an\ninput date character vector in any of several formats, with 'dd-mmm-"
  },
  {
    "element_type": "code",
    "content": "The \ndatenum\n function is important for using Financial Toolbox software efficiently. \ndatenum\n takes an\ninput date character vector in any of several formats, with \n'dd-mmm-yyyy'\n, \n'mm/dd/yyyy'\n, or\n'dd-mmm-yyyy, hh:mm:ss.ss'\n formats being the most common. The input date character vector\ncan have up to six fields formed by letters and numbers separated by any other characters, such that:",
    "page_number": 48,
    "bbox": [
      89.99697875976562,
      480.6232604980469,
      556.1369018554688,
      528.2532348632812
    ],
    "caption": null,
    "context": "t = datetime(2014,6,18) + calmonths(1:4)\nt = \n  1\u00d74 datetime array\n   18-Jul-2014   18-Aug-2014   18-Sep-2014   18-Oct-2014\nSubtract the origin value. For example, the origin value can be the starting day of an experiment.\ndt = t - datetime(2014,7,1)\ndt = \n  1\u00d74 duration array\n    408:00:00   1152:00:00   1896:00:00   2616:00:00\ndt is a duration array. Convert dt to a double array of values in units of years, days, hours,\nminutes, or seconds by using the years, days, hours, minutes, or seconds function, respectively.\nx = hours(dt)\nx =\n         408        1152        1896        2616\nPas"
  },
  {
    "element_type": "code",
    "content": "\u2022\nThe day field is an integer from \n1\n through \n31\n.",
    "page_number": 48,
    "bbox": [
      89.99699401855469,
      537.5640258789062,
      314.59698486328125,
      549.1940307617188
    ],
    "caption": null,
    "context": "t = datetime(2014,6,18) + calmonths(1:4)\nt = \n  1\u00d74 datetime array\n   18-Jul-2014   18-Aug-2014   18-Sep-2014   18-Oct-2014\nSubtract the origin value. For example, the origin value can be the starting day of an experiment.\ndt = t - datetime(2014,7,1)\nd"
  },
  {
    "element_type": "code",
    "content": "\u2022\nThe month field is either an integer from \n1\n through \n12\n or an alphabetical character vector with at\nleast three characters.",
    "page_number": 48,
    "bbox": [
      89.99699401855469,
      553.5048217773438,
      553.5367431640625,
      577.1348266601562
    ],
    "caption": null,
    "context": "t = datetime(2014,6,18) + calmonths(1:4)\nt = \n  1\u00d74 datetime array\n   18-Jul-2014   18-Aug-2014   18-Sep-2014   18-Oct-2014\nSubtract the origin value. For example, the origin value can be the starting day of an experiment.\ndt = t - datetime(2014,7,1)\ndt = \n  1\u00d74 duration array\n    408:00:00   1152:00:00   1896:00:00   2616:00:"
  },
  {
    "element_type": "code",
    "content": "\u2022\nThe hours, minutes, and seconds fields are optional. They are integers separated by colons or\nfollowed by \n'am'\n or \n'pm'\n.",
    "page_number": 48,
    "bbox": [
      89.99703216552734,
      621.3863525390625,
      533.2468872070312,
      645.016357421875
    ],
    "caption": null,
    "context": "nnegative integer. If only two numbers are specified, then the year is\nassumed to lie within the 100-year period centered on the current year. If the year is omitted, the\ncurrent year is the default.\n\u2022\nThe hours, minutes, and seconds fields are optional. They are integers separated by colons or\nfollowed by 'am' or 'pm'.\nFor example, if the current year is 1999, then all these dates are equivalent:\n'17-May-1999'\n'17-May-99'\n'17-may'\n'May 17, 1999'\n Handle and Convert Dates\n2-5\n"
  },
  {
    "element_type": "code",
    "content": "'17-May-1999'\n'17-May-99'\n'17-may'\n'May 17, 1999'",
    "page_number": 48,
    "bbox": [
      90.0020751953125,
      676.2252807617188,
      165.85406494140625,
      719.0924072265625
    ],
    "caption": null,
    "context": "\nThe hours, minutes, and seconds fields are optional. They are integers separated by colons or\nfollowed by 'am' or 'pm'.\nFor example, if the current year is 1999, then all these dates are equivalent:\n'17-May-1999'\n'17-May-99'\n'17-may'\n'May 17, 1999'\n Handle and Convert Dates\n2-5\n"
  },
  {
    "element_type": "code",
    "content": "'17-May-1999, 18:30'\n'5/17/99/6:30 pm'",
    "page_number": 49,
    "bbox": [
      89.9990005493164,
      143.9365692138672,
      198.35899353027344,
      165.2035675048828
    ],
    "caption": null,
    "context": "'5/17/99'\n'5/17'\nAlso, both of these formats represent the same time.\n'17-May-1999, 18:30'\n'5/17/99/6:30 pm'\nThe default format for numbers-only input follows the US convention. Therefore, 3/6 is March 6, not\nJune 3.\nWith datenum, you can convert dates into serial date format, store them in a matrix variable"
  },
  {
    "element_type": "code",
    "content": "With \ndatenum\n, you can convert dates into serial date format, store them in a matrix variable, and\nthen later pass the variable to a function. Alternatively, you can use \ndatenum\n directly in a function\ninput argument list.",
    "page_number": 49,
    "bbox": [
      89.9949951171875,
      207.69497680664062,
      541.744873046875,
      243.32498168945312
    ],
    "caption": null,
    "context": "'5/17/99'\n'5/17'\nAlso, both of these formats represent the same time.\n'17-May-1999, 18:30'\n'5/17/99/6:30 pm'\nThe default format for numbers-only input follows the US convention. Therefore, 3/6 is March 6, not\nJune 3.\nWith datenum, you can convert dates into serial date format, store them in a matrix variable, and\nthen later pass the variable to a function. Alternatively, you can use datenum directly in a function\ninput a"
  },
  {
    "element_type": "code",
    "content": "For example, consider the function \nbndprice\n that computes the price of a bond given the yield to\nmaturity. First set up variables for the yield to maturity, coupon rate, and the necessary dates.",
    "page_number": 49,
    "bbox": [
      89.9949951171875,
      252.80609130859375,
      539.7947387695312,
      276.43609619140625
    ],
    "caption": null,
    "context": "'5/17/99'\n'5/17'\nAlso, both of these formats represent the same time.\n'17-May-1999, 18:30'\n'5/17/99/6:30 pm'\nThe default format for numbers-only input follows the US convention. Therefore, 3/6 is March 6, not\nJune 3.\nWith datenum, you can convert dates into serial date format, store them in a matrix variable, and\nthen later pass the variable to a function. Alternatively, you can use datenum di"
  },
  {
    "element_type": "code",
    "content": "Yield       = 0.07;\nCouponRate  = 0.08;\nSettle      = datenum(\n'17-May-2000'\n);\nMaturity    = datenum(\n'01-Oct-2000'\n);",
    "page_number": 49,
    "bbox": [
      90.00199890136719,
      285.0699462890625,
      290.4859924316406,
      327.9368896484375
    ],
    "caption": null,
    "context": "ist.\nFor example, consider the function bndprice that computes the price of a bond given the yield to\nmaturity. First set up variables for the yield to maturity, coupon rate, and the necessary dates.\nYield       = 0.07;\nCouponRate  = 0.08;\nSettle      = datenum('17-May-2000');\nMaturity    = datenum('01-Oct-2000');\nThen call the function with the variables.\nbndprice(Yield,CouponRate,Settle,Maturity)\nans =\n  100.3503\nAlternatively, convert date character vectors to serial date numbers directly in the function input\na"
  },
  {
    "element_type": "code",
    "content": "bndprice(Yield,CouponRate,Settle,Maturity)",
    "page_number": 49,
    "bbox": [
      90.0,
      357.5810241699219,
      317.5559997558594,
      368.0480041503906
    ],
    "caption": null,
    "context": "y, coupon rate, and the necessary dates.\nYield       = 0.07;\nCouponRate  = 0.08;\nSettle      = datenum('17-May-2000');\nMaturity    = datenum('01-Oct-2000');\nThen call the function with the variables.\nbndprice(Yield,CouponRate,Settle,Maturity)\nans =\n  100.3503\nAlternatively, convert date character vectors to serial date numbers directly in the function input\nargument list.\nbndprice(0.07,0.08,datenum('17-May-2000'),... \ndatenum('01-Oct-2000'"
  },
  {
    "element_type": "code",
    "content": "bndprice(0.07,0.08,datenum(\n'17-May-2000'\n),\n...\n \ndatenum(\n'01-Oct-2000'\n))",
    "page_number": 49,
    "bbox": [
      90.0009765625,
      450.2921142578125,
      339.2469787597656,
      471.55908203125
    ],
    "caption": null,
    "context": "'5/17/99'\n'5/17'\nAlso, both of these formats represent the same time.\n'17-May-1999, 18:30'\n'5/17/99/6:30 pm'\nThe default format for numbers-only input follows the US convention. Therefore, 3/6 is March 6, not\nJune 3.\nWith datenum, you can convert dates into serial date format"
  },
  {
    "element_type": "code",
    "content": "bndprice\n is an example of a function designed to detect the presence of date character vectors and\nmake the conversion automatically. For functions like \nbndprice\n, date character vectors can be\npassed directly.",
    "page_number": 49,
    "bbox": [
      90.0009765625,
      521.539306640625,
      550.9307861328125,
      557.1693115234375
    ],
    "caption": null,
    "context": "'5/17/99'\n'5/17'\nAlso, both of these formats represent the same time.\n'17-May-1999, 18:30'\n'5/17/99/6:30 pm'\nThe default format for numbers-only input follows the US convention. Therefore, 3/6 is March 6, not\nJune 3.\nWith datenum, you can convert dates into serial date format, store them in a matrix variable, and\nthen later pass the variable to a function. Alternatively, you can use datenum directly in a func"
  },
  {
    "element_type": "code",
    "content": "bndprice(0.07,0.08,\n'17-May-2000'\n,\n'01-Oct-2000'\n)",
    "page_number": 49,
    "bbox": [
      90.00399017333984,
      565.8031616210938,
      344.66796875,
      576.2701416015625
    ],
    "caption": null,
    "context": "'5/17/99'\n'5/17'\nAlso, both of these formats represent the same time.\n'17-May-1999, 18:30'\n'5/17/99/6:30 pm'\nThe default format for numbers-only input follows the US convention. Therefore, 3/6 is March 6, not\nJune 3.\nWith datenum, you can convert date"
  },
  {
    "element_type": "code",
    "content": "The \ndatestr\n function converts a serial date number to one of 19 different date character vector\noutput formats showing date, time, or both. The default output for dates is a day-month-year\ncharacter vector, for example, \n24-Aug-2000\n. The \ndatestr\n function is useful for preparing output\nreports.",
    "page_number": 50,
    "bbox": [
      89.99995422363281,
      150.34246826171875,
      542.6497802734375,
      197.97247314453125
    ],
    "caption": null,
    "context": "length, fill the character vectors with spaces or zeros. For more information, see \u201cCharacter Vector\nInput\u201d on page 1-16.\nOutput Conversions with datestr\nThe datestr function converts a serial date number to one of 19 different date character vector\noutput formats showing date, time, or both. The default output for dates is a day-month-year\ncharacter vector, for example, 24-Aug-2000. The datestr function is useful for preparing output\nreports.\ndatestr Format\nDescription\n01-Mar-2000 15:45:17\nday"
  },
  {
    "element_type": "code",
    "content": "datestr\n Format\nDescription",
    "page_number": 50,
    "bbox": [
      92.0,
      209.68771362304688,
      384.19000244140625,
      221.31771850585938
    ],
    "caption": null,
    "context": "length, fill the character vectors with spaces or zeros. For more information, see \u201cCharacter Vector\nInput\u201d on page 1-16.\nOutput Conversions with datestr\nThe datestr function converts a serial date number to one of 19 different"
  },
  {
    "element_type": "code",
    "content": "01-Mar-2000 15:45:17\nday-month-year hour:minute:second",
    "page_number": 50,
    "bbox": [
      92.0,
      225.68771362304688,
      491.6300354003906,
      237.31771850585938
    ],
    "caption": null,
    "context": "te, time, or both. The default output for dates is a day-month-year\ncharacter vector, for example, 24-Aug-2000. The datestr function is useful for preparing output\nreports.\ndatestr Format\nDescription\n01-Mar-2000 15:45:17\nday-month-year hour:minute:second\n01-Mar-2000\nday-month-year\n03/01/00\nmonth/day/year\nMar\nmonth, three letters\nM\nmonth, single letter\n3\nmonth number\n03/01\nmonth/day\n1\nday of month\nWed\nday of week, three letters\nW\nday of week, single le"
  },
  {
    "element_type": "code",
    "content": "01-Mar-2000\nday-month-year",
    "page_number": 50,
    "bbox": [
      92.0,
      241.68771362304688,
      397.5,
      253.31771850585938
    ],
    "caption": null,
    "context": "y-month-year\ncharacter vector, for example, 24-Aug-2000. The datestr function is useful for preparing output\nreports.\ndatestr Format\nDescription\n01-Mar-2000 15:45:17\nday-month-year hour:minute:second\n01-Mar-2000\nday-month-year\n03/01/00\nmonth/day/year\nMar\nmonth, three letters\nM\nmonth, single letter\n3\nmonth number\n03/01\nmonth/day\n1\nday of month\nWed\nday of week, three letters\nW\nday of week, single letter\n2000\nyear, four number"
  },
  {
    "element_type": "code",
    "content": "03/01/00\nmonth/day/year",
    "page_number": 50,
    "bbox": [
      92.0,
      257.6877136230469,
      397.47998046875,
      269.3177185058594
    ],
    "caption": null,
    "context": "or, for example, 24-Aug-2000. The datestr function is useful for preparing output\nreports.\ndatestr Format\nDescription\n01-Mar-2000 15:45:17\nday-month-year hour:minute:second\n01-Mar-2000\nday-month-year\n03/01/00\nmonth/day/year\nMar\nmonth, three letters\nM\nmonth, single letter\n3\nmonth number\n03/01\nmonth/day\n1\nday of month\nWed\nday of week, three letters\nW\nday of week, single letter\n2000\nyear, four numbers\n99\nyear, two numbers\nM"
  },
  {
    "element_type": "code",
    "content": "Mar\nmonth, three letters",
    "page_number": 50,
    "bbox": [
      92.0,
      273.6877136230469,
      417.739990234375,
      285.3177185058594
    ],
    "caption": null,
    "context": "2000. The datestr function is useful for preparing output\nreports.\ndatestr Format\nDescription\n01-Mar-2000 15:45:17\nday-month-year hour:minute:second\n01-Mar-2000\nday-month-year\n03/01/00\nmonth/day/year\nMar\nmonth, three letters\nM\nmonth, single letter\n3\nmonth number\n03/01\nmonth/day\n1\nday of month\nWed\nday of week, three letters\nW\nday of week, single letter\n2000\nyear, four numbers\n99\nyear, two numbers\nMar01\nmonth year\n15:45:17\n"
  },
  {
    "element_type": "code",
    "content": "M\nmonth, single letter",
    "page_number": 50,
    "bbox": [
      92.0,
      289.6877136230469,
      416.02996826171875,
      301.3177185058594
    ],
    "caption": null,
    "context": "n is useful for preparing output\nreports.\ndatestr Format\nDescription\n01-Mar-2000 15:45:17\nday-month-year hour:minute:second\n01-Mar-2000\nday-month-year\n03/01/00\nmonth/day/year\nMar\nmonth, three letters\nM\nmonth, single letter\n3\nmonth number\n03/01\nmonth/day\n1\nday of month\nWed\nday of week, three letters\nW\nday of week, single letter\n2000\nyear, four numbers\n99\nyear, two numbers\nMar01\nmonth year\n15:45:17\nhour:minute:second\n03:4"
  },
  {
    "element_type": "code",
    "content": "Wed\nday of week, three letters",
    "page_number": 50,
    "bbox": [
      92.0,
      353.6877136230469,
      443.03997802734375,
      365.3177185058594
    ],
    "caption": null,
    "context": "01-Mar-2000 15:45:17\nday-month-year hour:minute:second\n01-Mar-2000\nday-month-year\n03/01/00\nmonth/day/year\nMar\nmonth, three letters\nM\nmonth, single letter\n3\nmonth number\n03/01\nmonth/day\n1\nday of month\nWed\nday of week, three letters\nW\nday of week, single letter\n2000\nyear, four numbers\n99\nyear, two numbers\nMar01\nmonth year\n15:45:17\nhour:minute:second\n03:45:17 PM\nhour:minute:second AM or PM\n15:45\nhour:minute\n03:45 PM\nhour:minute AM"
  },
  {
    "element_type": "code",
    "content": "W\nday of week, single letter",
    "page_number": 50,
    "bbox": [
      92.0,
      369.6877136230469,
      441.3299865722656,
      381.3177185058594
    ],
    "caption": null,
    "context": "year hour:minute:second\n01-Mar-2000\nday-month-year\n03/01/00\nmonth/day/year\nMar\nmonth, three letters\nM\nmonth, single letter\n3\nmonth number\n03/01\nmonth/day\n1\nday of month\nWed\nday of week, three letters\nW\nday of week, single letter\n2000\nyear, four numbers\n99\nyear, two numbers\nMar01\nmonth year\n15:45:17\nhour:minute:second\n03:45:17 PM\nhour:minute:second AM or PM\n15:45\nhour:minute\n03:45 PM\nhour:minute AM or PM\nQ1-99\ncalendar quarter"
  },
  {
    "element_type": "code",
    "content": "2000\nyear, four numbers",
    "page_number": 50,
    "bbox": [
      92.0,
      385.6877136230469,
      412.510009765625,
      397.3177185058594
    ],
    "caption": null,
    "context": "r-2000\nday-month-year\n03/01/00\nmonth/day/year\nMar\nmonth, three letters\nM\nmonth, single letter\n3\nmonth number\n03/01\nmonth/day\n1\nday of month\nWed\nday of week, three letters\nW\nday of week, single letter\n2000\nyear, four numbers\n99\nyear, two numbers\nMar01\nmonth year\n15:45:17\nhour:minute:second\n03:45:17 PM\nhour:minute:second AM or PM\n15:45\nhour:minute\n03:45 PM\nhour:minute AM or PM\nQ1-99\ncalendar quarter-year\nQ1\ncalendar quarte"
  },
  {
    "element_type": "code",
    "content": "15:45:17\nhour:minute:second",
    "page_number": 50,
    "bbox": [
      92.00000762939453,
      433.6877136230469,
      417.27001953125,
      445.3177185058594
    ],
    "caption": null,
    "context": " letters\nM\nmonth, single letter\n3\nmonth number\n03/01\nmonth/day\n1\nday of month\nWed\nday of week, three letters\nW\nday of week, single letter\n2000\nyear, four numbers\n99\nyear, two numbers\nMar01\nmonth year\n15:45:17\nhour:minute:second\n03:45:17 PM\nhour:minute:second AM or PM\n15:45\nhour:minute\n03:45 PM\nhour:minute AM or PM\nQ1-99\ncalendar quarter-year\nQ1\ncalendar quarter\nCurrent Date and Time\nThe today and now functions return serial "
  },
  {
    "element_type": "code",
    "content": "03:45:17 PM\nhour:minute:second AM or PM",
    "page_number": 50,
    "bbox": [
      92.0,
      449.6877136230469,
      466.5400085449219,
      461.3177185058594
    ],
    "caption": null,
    "context": "ter\n3\nmonth number\n03/01\nmonth/day\n1\nday of month\nWed\nday of week, three letters\nW\nday of week, single letter\n2000\nyear, four numbers\n99\nyear, two numbers\nMar01\nmonth year\n15:45:17\nhour:minute:second\n03:45:17 PM\nhour:minute:second AM or PM\n15:45\nhour:minute\n03:45 PM\nhour:minute AM or PM\nQ1-99\ncalendar quarter-year\nQ1\ncalendar quarter\nCurrent Date and Time\nThe today and now functions return serial date numbers for the current date, and t"
  },
  {
    "element_type": "code",
    "content": "03:45 PM\nhour:minute AM or PM",
    "page_number": 50,
    "bbox": [
      92.00000762939453,
      481.6877136230469,
      431.5600280761719,
      493.3177185058594
    ],
    "caption": null,
    "context": "of week, three letters\nW\nday of week, single letter\n2000\nyear, four numbers\n99\nyear, two numbers\nMar01\nmonth year\n15:45:17\nhour:minute:second\n03:45:17 PM\nhour:minute:second AM or PM\n15:45\nhour:minute\n03:45 PM\nhour:minute AM or PM\nQ1-99\ncalendar quarter-year\nQ1\ncalendar quarter\nCurrent Date and Time\nThe today and now functions return serial date numbers for the current date, and the current date\nand time, respectively.\ntoday\nan"
  },
  {
    "element_type": "code",
    "content": "Q1-99\ncalendar quarter-year",
    "page_number": 50,
    "bbox": [
      92.0,
      497.6877136230469,
      426.22998046875,
      509.3177185058594
    ],
    "caption": null,
    "context": "f week, single letter\n2000\nyear, four numbers\n99\nyear, two numbers\nMar01\nmonth year\n15:45:17\nhour:minute:second\n03:45:17 PM\nhour:minute:second AM or PM\n15:45\nhour:minute\n03:45 PM\nhour:minute AM or PM\nQ1-99\ncalendar quarter-year\nQ1\ncalendar quarter\nCurrent Date and Time\nThe today and now functions return serial date numbers for the current date, and the current date\nand time, respectively.\ntoday\nans =\n      736675\nnow\nans =\n "
  },
  {
    "element_type": "code",
    "content": "The \ntoday\n and \nnow\n functions return serial date numbers for the current date, and the current date\nand time, respectively.",
    "page_number": 50,
    "bbox": [
      89.99600982666016,
      570.4756469726562,
      545.61572265625,
      594.1056518554688
    ],
    "caption": null,
    "context": "length, fill the character vectors with spaces or zeros. For more information, see \u201cCharacter Vector\nInput\u201d on page 1-16.\nOutput Conversions with datestr\nThe datestr function converts a serial date number to one of 19 different date character vector\noutput formats showing date, time, or both. The default output for dates is"
  },
  {
    "element_type": "code",
    "content": "The MATLAB function \ndate\n returns a character vector for the current date.",
    "page_number": 51,
    "bbox": [
      90.0,
      92.96160125732422,
      437.4198913574219,
      104.59159851074219
    ],
    "caption": null,
    "context": "The MATLAB function date returns a character vector for the current date.\ndate\nans =\n    '11-Dec-2016'\nDetermining Specific Dates\nFinancial Toolbox provides many functions for determining specific dates. For example, assume that\nyou schedule an accounting procedure for the l"
  },
  {
    "element_type": "code",
    "content": "Financial Toolbox provides many functions for determining specific dates. For example, assume that\nyou schedule an accounting procedure for the last Friday of every month. Use the \nlweekdate\nfunction to return those dates for the year 2000. The input argument \n6\n specifies Friday.",
    "page_number": 51,
    "bbox": [
      90.00296020507812,
      208.25625610351562,
      548.1527099609375,
      243.88626098632812
    ],
    "caption": null,
    "context": "The MATLAB function date returns a character vector for the current date.\ndate\nans =\n    '11-Dec-2016'\nDetermining Specific Dates\nFinancial Toolbox provides many functions for determining specific dates. For example, assume that\nyou schedule an accounting procedure for the last Friday of every month. Use the lweekdate\nfunction to return those dates for the year 2000. The input argument 6 specifies Friday.\nFridates = lweekdate(6,2000,1:12);\nFridays = datestr(Fridates)\nFridays =\n  12\u00d711 char array\n    '28-Jan-2000'\n    '25-Feb-2000'\n    '31-Mar-2000'\n    '28-Apr-2000'\n    '26-May-2000'\n    '30-Jun-2000'\n   "
  },
  {
    "element_type": "code",
    "content": "Fridates = lweekdate(6,2000,1:12);\nFridays = datestr(Fridates)",
    "page_number": 51,
    "bbox": [
      89.9979248046875,
      253.51646423339844,
      274.2099304199219,
      274.783447265625
    ],
    "caption": null,
    "context": "xample, assume that\nyou schedule an accounting procedure for the last Friday of every month. Use the lweekdate\nfunction to return those dates for the year 2000. The input argument 6 specifies Friday.\nFridates = lweekdate(6,2000,1:12);\nFridays = datestr(Fridates)\nFridays =\n  12\u00d711 char array\n    '28-Jan-2000'\n    '25-Feb-2000'\n    '31-Mar-2000'\n    '28-Apr-2000'\n    '26-May-2000'\n    '30-Jun-2000'\n    '28-Jul-2000'\n    '25-Aug-2000'\n    '29-Sep-2000'\n    '27-O"
  },
  {
    "element_type": "code",
    "content": "'28-Jan-2000'\n    '25-Feb-2000'\n    '31-Mar-2000'\n    '28-Apr-2000'\n    '26-May-2000'\n    '30-Jun-2000'\n    '28-Jul-2000'\n    '25-Aug-2000'\n    '29-Sep-2000'\n    '27-Oct-2000'\n    '24-Nov-2000'\n    '29-Dec-2000'",
    "page_number": 51,
    "bbox": [
      89.9979476928711,
      327.5127868652344,
      182.10394287109375,
      456.7796630859375
    ],
    "caption": null,
    "context": " Use the lweekdate\nfunction to return those dates for the year 2000. The input argument 6 specifies Friday.\nFridates = lweekdate(6,2000,1:12);\nFridays = datestr(Fridates)\nFridays =\n  12\u00d711 char array\n    '28-Jan-2000'\n    '25-Feb-2000'\n    '31-Mar-2000'\n    '28-Apr-2000'\n    '26-May-2000'\n    '30-Jun-2000'\n    '28-Jul-2000'\n    '25-Aug-2000'\n    '29-Sep-2000'\n    '27-Oct-2000'\n    '24-Nov-2000'\n    '29-Dec-2000'\nAnother example of needing specific dates could be that your company closes on Martin Luther King\nJr. Day, which is the third Monday in January. You can use the nweekdate function to determine those\ns"
  },
  {
    "element_type": "code",
    "content": "Another example of needing specific dates could be that your company closes on Martin Luther King\nJr. Day, which is the third Monday in January. You can use the \nnweekdate\n function to determine those\nspecific dates for 2011 through 2014.",
    "page_number": 51,
    "bbox": [
      90.00394439697266,
      467.26702880859375,
      556.7538452148438,
      502.89703369140625
    ],
    "caption": null,
    "context": "'\n    '25-Feb-2000'\n    '31-Mar-2000'\n    '28-Apr-2000'\n    '26-May-2000'\n    '30-Jun-2000'\n    '28-Jul-2000'\n    '25-Aug-2000'\n    '29-Sep-2000'\n    '27-Oct-2000'\n    '24-Nov-2000'\n    '29-Dec-2000'\nAnother example of needing specific dates could be that your company closes on Martin Luther King\nJr. Day, which is the third Monday in January. You can use the nweekdate function to determine those\nspecific dates for 2011 through 2014.\nMLKDates = nweekdate(3,2,2011:2014,1);\nMLKDays = datestr(MLKDates)\nMLKDays =\n  4\u00d711 char array\n    '17-Jan-2011'\n    '16-Jan-2012'\n    '21-Jan-2013'\n    '20-Jan-2014'\nDetermining Holidays\nAccounting for"
  },
  {
    "element_type": "code",
    "content": "MLKDates = nweekdate(3,2,2011:2014,1);\nMLKDays = datestr(MLKDates)",
    "page_number": 51,
    "bbox": [
      89.99897766113281,
      512.5272216796875,
      295.8829650878906,
      533.794189453125
    ],
    "caption": null,
    "context": "ates could be that your company closes on Martin Luther King\nJr. Day, which is the third Monday in January. You can use the nweekdate function to determine those\nspecific dates for 2011 through 2014.\nMLKDates = nweekdate(3,2,2011:2014,1);\nMLKDays = datestr(MLKDates)\nMLKDays =\n  4\u00d711 char array\n    '17-Jan-2011'\n    '16-Jan-2012'\n    '21-Jan-2013'\n    '20-Jan-2014'\nDetermining Holidays\nAccounting for holidays and other nontrading days is important when you examine"
  },
  {
    "element_type": "code",
    "content": "'17-Jan-2011'\n    '16-Jan-2012'\n    '21-Jan-2013'\n    '20-Jan-2014'",
    "page_number": 51,
    "bbox": [
      89.99897766113281,
      586.5235595703125,
      182.10498046875,
      629.390625
    ],
    "caption": null,
    "context": " in January. You can use the nweekdate function to determine those\nspecific dates for 2011 through 2014.\nMLKDates = nweekdate(3,2,2011:2014,1);\nMLKDays = datestr(MLKDates)\nMLKDays =\n  4\u00d711 char array\n    '17-Jan-2011'\n    '16-Jan-2012'\n    '21-Jan-2013'\n    '20-Jan-2014'\nDetermining Holidays\nAccounting for holidays and other nontrading days is important when you examine financial dates.\nFinancial Toolbox provides the holidays function, which contains holidays and spec"
  },
  {
    "element_type": "code",
    "content": "Accounting for holidays and other nontrading days is important when you examine financial dates.\nFinancial Toolbox provides the \nholidays\n function, which contains holidays and special nontrading\ndays for the New York Stock Exchange from 1950 through 2030, inclusive. In addition, you can use\nnyseclosures\n to evaluate all known or anticipated closures of the New York Stock Exchange from",
    "page_number": 51,
    "bbox": [
      89.99898529052734,
      671.3616333007812,
      546.9989624023438,
      718.9916381835938
    ],
    "caption": null,
    "context": "rough 2014.\nMLKDates = nweekdate(3,2,2011:2014,1);\nMLKDays = datestr(MLKDates)\nMLKDays =\n  4\u00d711 char array\n    '17-Jan-2011'\n    '16-Jan-2012'\n    '21-Jan-2013'\n    '20-Jan-2014'\nDetermining Holidays\nAccounting for holidays and other nontrading days is important when you examine financial dates.\nFinancial Toolbox provides the holidays function, which contains holidays and special nontrading\ndays for the New York Stock Exchange from 1950 through 2030, inclusive. In addition, you can use\nnyseclosures to evaluate all known or anticipated closures of the New York Stock Exchange from\n2\nPerforming Common Financial Tasks\n2-8\n"
  },
  {
    "element_type": "code",
    "content": "January 1, 1885, to December 31, 2050. \nnyseclosures\n returns a vector of serial date numbers\ncorresponding to market closures between the dates \nStartDate\n and \nEndDate\n, inclusive.",
    "page_number": 52,
    "bbox": [
      89.99996948242188,
      92.96160125732422,
      529.9097290039062,
      116.59159851074219
    ],
    "caption": null,
    "context": "January 1, 1885, to December 31, 2050. nyseclosures returns a vector of serial date numbers\ncorresponding to market closures between the dates StartDate and EndDate, inclusive.\nIn this example, use holidays to determine the standard holidays in the last half of 2012.\nLHHDates = holidays('1-Jul-2012','31-Dec-2012');\nLHHDays = datestr(LHHDates)\nLHHDays =\n  6\u00d711 char array\n    '04-J"
  },
  {
    "element_type": "code",
    "content": "In this example, use \nholidays\n to determine the standard holidays in the last half of 2012.",
    "page_number": 52,
    "bbox": [
      89.99996948242188,
      126.09559631347656,
      504.8097839355469,
      137.72560119628906
    ],
    "caption": null,
    "context": "January 1, 1885, to December 31, 2050. nyseclosures returns a vector of serial date numbers\ncorresponding to market closures between the dates StartDate and EndDate, inclusive.\nIn this example, use holidays to determine the standard holidays in the last half of 2012.\nLHHDates = holidays('1-J"
  },
  {
    "element_type": "code",
    "content": "LHHDates = holidays(\n'1-Jul-2012'\n,\n'31-Dec-2012'\n);\nLHHDays = datestr(LHHDates)",
    "page_number": 52,
    "bbox": [
      89.99995422363281,
      146.38003540039062,
      350.0819396972656,
      167.6470489501953
    ],
    "caption": null,
    "context": "January 1, 1885, to December 31, 2050. nyseclosures returns a vector of serial date numbers\ncorresponding to market closures between the dates StartDate and EndDate, inclusive.\nIn this example, use holidays to determine the standard holidays in the last half of 2012.\nLHHDates = h"
  },
  {
    "element_type": "code",
    "content": "'04-Jul-2012'\n    '03-Sep-2012'\n    '29-Oct-2012'\n    '30-Oct-2012'\n    '22-Nov-2012'\n    '25-Dec-2012'",
    "page_number": 52,
    "bbox": [
      89.99995422363281,
      219.40065002441406,
      182.10595703125,
      283.8675842285156
    ],
    "caption": null,
    "context": "ve.\nIn this example, use holidays to determine the standard holidays in the last half of 2012.\nLHHDates = holidays('1-Jul-2012','31-Dec-2012');\nLHHDays = datestr(LHHDates)\nLHHDays =\n  6\u00d711 char array\n    '04-Jul-2012'\n    '03-Sep-2012'\n    '29-Oct-2012'\n    '30-Oct-2012'\n    '22-Nov-2012'\n    '25-Dec-2012'\nYou can then use the busdate function to determine the next business day in 2012 after these\nholidays.\nLHNextDates = busdate(LHHDates);\nLHNextDays = datestr(LHNextDates)\nLHNextDays =\n  6\u00d711 char array"
  },
  {
    "element_type": "code",
    "content": "You can then use the \nbusdate\n function to determine the next business day in 2012 after these\nholidays.",
    "page_number": 52,
    "bbox": [
      89.99594116210938,
      293.270751953125,
      523.1557006835938,
      316.9007568359375
    ],
    "caption": null,
    "context": "January 1, 1885, to December 31, 2050. nyseclosures returns a vector of serial date numbers\ncorresponding to market closures between the dates StartDate and EndDate, inclusive.\nIn this example, use holidays to determine the standard holidays in the last half of 2012.\nLHHDates = holidays('1-Jul-2012','31"
  },
  {
    "element_type": "code",
    "content": "LHNextDates = busdate(LHHDates);\nLHNextDays = datestr(LHNextDates)",
    "page_number": 52,
    "bbox": [
      90.00193786621094,
      325.55517578125,
      268.7959289550781,
      346.8221435546875
    ],
    "caption": null,
    "context": "-2012'\n    '03-Sep-2012'\n    '29-Oct-2012'\n    '30-Oct-2012'\n    '22-Nov-2012'\n    '25-Dec-2012'\nYou can then use the busdate function to determine the next business day in 2012 after these\nholidays.\nLHNextDates = busdate(LHHDates);\nLHNextDays = datestr(LHNextDates)\nLHNextDays =\n  6\u00d711 char array\n    '05-Jul-2012'\n    '04-Sep-2012'\n    '31-Oct-2012'\n    '31-Oct-2012'\n    '23-Nov-2012'\n    '26-Dec-2012'\nDetermining Cash-Flow Dates\nTo determine cash-flow dates for "
  },
  {
    "element_type": "code",
    "content": "'05-Jul-2012'\n    '04-Sep-2012'\n    '31-Oct-2012'\n    '31-Oct-2012'\n    '23-Nov-2012'\n    '26-Dec-2012'",
    "page_number": 52,
    "bbox": [
      90.00196838378906,
      398.5757141113281,
      182.10797119140625,
      463.0426330566406
    ],
    "caption": null,
    "context": "ou can then use the busdate function to determine the next business day in 2012 after these\nholidays.\nLHNextDates = busdate(LHHDates);\nLHNextDays = datestr(LHNextDates)\nLHNextDays =\n  6\u00d711 char array\n    '05-Jul-2012'\n    '04-Sep-2012'\n    '31-Oct-2012'\n    '31-Oct-2012'\n    '23-Nov-2012'\n    '26-Dec-2012'\nDetermining Cash-Flow Dates\nTo determine cash-flow dates for securities with periodic payments, use cfdates. This function\naccounts for the coupons per year, the day-count basis, and the end-of-month "
  },
  {
    "element_type": "code",
    "content": "To determine cash-flow dates for securities with periodic payments, use \ncfdates\n. This function\naccounts for the coupons per year, the day-count basis, and the end-of-month rule. For example, you\ncan determine the cash-flow dates for a security that pays four coupons per year on the last day of\nthe month using an \nactual/365\n day-count basis. To do so, enter the settlement date, the maturity\ndate, and the parameters for \nPeriod\n, \nBasis\n, and \nEndMonthRule\n.",
    "page_number": 52,
    "bbox": [
      90.00398254394531,
      502.51995849609375,
      548.2638549804688,
      562.14990234375
    ],
    "caption": null,
    "context": "HNextDays = datestr(LHNextDates)\nLHNextDays =\n  6\u00d711 char array\n    '05-Jul-2012'\n    '04-Sep-2012'\n    '31-Oct-2012'\n    '31-Oct-2012'\n    '23-Nov-2012'\n    '26-Dec-2012'\nDetermining Cash-Flow Dates\nTo determine cash-flow dates for securities with periodic payments, use cfdates. This function\naccounts for the coupons per year, the day-count basis, and the end-of-month rule. For example, you\ncan determine the cash-flow dates for a security that pays four coupons per year on the last day of\nthe month using an actual/365 day-count basis. To do so, enter the settlement date, the maturity\ndate, and the parameters for Period, Basis, and EndMonthRule.\nPayDates = cfdates('14-Mar-2000','30-Nov-2001',4,3,1);\nPayDays = datestr(PayDates)\nPayDays =\n  7\u00d711 char array\n    '31-May-2000'\n    '31-Aug-2000'\n    '30-Nov-2000'\n    '28-Feb-2001'\n    '31-May-2001'\n    '31-A"
  },
  {
    "element_type": "code",
    "content": "PayDates = cfdates(\n'14-Mar-2000'\n,\n'30-Nov-2001'\n,4,3,1);\nPayDays = datestr(PayDates)",
    "page_number": 52,
    "bbox": [
      90.00296020507812,
      570.8043823242188,
      382.59295654296875,
      592.0713500976562
    ],
    "caption": null,
    "context": "January 1, 1885, to December 31, 2050. nyseclosures returns a vector of serial date numbers\ncorresponding to market closures between the dates StartDate and EndDate, inclusive.\nIn this example, use holidays to determine the standard holidays in the last half of 2012.\nLHHDates = holiday"
  },
  {
    "element_type": "code",
    "content": "'31-May-2000'\n    '31-Aug-2000'\n    '30-Nov-2000'\n    '28-Feb-2001'\n    '31-May-2001'\n    '31-Aug-2001'\n    '30-Nov-2001'",
    "page_number": 52,
    "bbox": [
      90.00296020507812,
      643.8251342773438,
      182.10894775390625,
      719.0924072265625
    ],
    "caption": null,
    "context": "tlement date, the maturity\ndate, and the parameters for Period, Basis, and EndMonthRule.\nPayDates = cfdates('14-Mar-2000','30-Nov-2001',4,3,1);\nPayDays = datestr(PayDates)\nPayDays =\n  7\u00d711 char array\n    '31-May-2000'\n    '31-Aug-2000'\n    '30-Nov-2000'\n    '28-Feb-2001'\n    '31-May-2001'\n    '31-Aug-2001'\n    '30-Nov-2001'\n Handle and Convert Dates\n2-9\n"
  },
  {
    "element_type": "code",
    "content": "See Also\ndatedisp\n | \ndatenum\n | \ndatestr\n | \ndatetime\n | \ndatevec\n | \nformat\n | \ndate\n | \nholidays\n |\nnyseclosures\n | \nbusdate\n | \ncfdates\n | \naddBusinessCalendar",
    "page_number": 53,
    "bbox": [
      89.9969482421875,
      92.77008056640625,
      488.2269592285156,
      132.1916046142578
    ],
    "caption": null,
    "context": "See Also\ndatedisp | datenum | datestr | datetime | datevec | format | date | holidays |\nnyseclosures | busdate | cfdates | addBusinessCalendar\nRelated Examples\n\u2022\n\u201cConvert Between Text and datetime or duration Values\u201d\n\u2022\n\u201cRead Collection or Sequence of Spreadsheet Files\u201d\n\u2022\n\u201cTrading Calendars User Interface\u201d on page 12-2\n\u2022\n\u201cUICalendar User Interface\u201d on page 12-4\n"
  },
  {
    "element_type": "code",
    "content": "Stream = [-20000,  2000,  2500,  3500, -5000,  6500,\n...\n            9500,  9500,  9500];",
    "page_number": 54,
    "bbox": [
      89.99703979492188,
      334.0076904296875,
      388.0140380859375,
      355.274658203125
    ],
    "caption": null,
    "context": "al investment of $20,000 followed by\nthree annual return payments, a second investment of $5,000, then four more returns. Investments\nare negative cash flows, return payments are positive cash flows.\nStream = [-20000,  2000,  2500,  3500, -5000,  6500,...\n            9500,  9500,  9500];\nInterest Rates/Rates of Return\nThis example shows how to compute the internal rate of return of the cash stream using irr.\nSpecify the income stream as an initial investment of $20,000 followed by thre"
  },
  {
    "element_type": "code",
    "content": "This example shows how to compute the internal rate of return of the cash stream using \nirr\n.",
    "page_number": 54,
    "bbox": [
      90.00405883789062,
      406.8840026855469,
      517.7240600585938,
      418.5140075683594
    ],
    "caption": null,
    "context": ". Investments\nare negative cash flows, return payments are positive cash flows.\nStream = [-20000,  2000,  2500,  3500, -5000,  6500,...\n            9500,  9500,  9500];\nInterest Rates/Rates of Return\nThis example shows how to compute the internal rate of return of the cash stream using irr.\nSpecify the income stream as an initial investment of $20,000 followed by three annual return\npayments, a second investment of $5,000, then four more returns. Investments are negative cash\nflows, return"
  },
  {
    "element_type": "code",
    "content": "Stream = [-20000,  2000,  2500,  3500, -5000,  6500, \n...\n            9500,  9500,  9500];",
    "page_number": 54,
    "bbox": [
      89.99708557128906,
      472.41143798828125,
      393.4320983886719,
      493.67840576171875
    ],
    "caption": null,
    "context": "al investment of $20,000 followed by\nthree annual return payments, a second investment of $5,000, then four more returns. Investments\nare negative cash flows, return payments are positive cash flows.\nStream = [-20000,  2000,  2500,  3500, -5000,  6500,...\n            9500,  9500,  9500];\nInterest Rates/Rates of Return\nThis example shows how to compute the internal rate of return of the cash stream using irr.\nSpecify the income stream as an initial investment of $20,000 followed by three"
  },
  {
    "element_type": "code",
    "content": "Use \nirr\n to compute the internal rate of return of the cash stream.",
    "page_number": 54,
    "bbox": [
      90.00311279296875,
      503.1389465332031,
      394.4330749511719,
      514.7689208984375
    ],
    "caption": null,
    "context": "Analyzing and Computing Cash Flows\nIn this section...\n\u201cIntroduction\u201d on page 2-11\n\u201cInterest Rates/Rates of Return\u201d on page 2-11\n\u201cPresent or Future Values\u201d on page 2-12\n\u201cDepreciation\u201d on page 2-13\n\u201cAnnuities\u201d on page 2-13\nIntroduction\nFinancial Toolbox cash-flow functi"
  },
  {
    "element_type": "code",
    "content": "The internal rate of return of a cash flow may not have a unique value. Every time the sign changes in\na cash flow, the equation defining \nirr\n can give up to two additional answers. An \nirr\n computation\nrequires solving a polynomial equation, and the number of real roots of such an equation can depend\non the number of sign changes in the coefficients. The equation for internal rate of return is",
    "page_number": 54,
    "bbox": [
      89.99712371826172,
      594.4661254882812,
      556.9568481445312,
      642.0961303710938
    ],
    "caption": null,
    "context": "2000,  2500,  3500, -5000,  6500, ...\n            9500,  9500,  9500];\nUse irr to compute the internal rate of return of the cash stream.\nROR = irr(Stream)\nROR = \n0.1172\nThe rate of return is 11.72%.\nThe internal rate of return of a cash flow may not have a unique value. Every time the sign changes in\na cash flow, the equation defining irr can give up to two additional answers. An irr computation\nrequires solving a polynomial equation, and the number of real roots of such an equation can depend\non the number of sign changes in the coefficients. The equation for internal rate of return is\nwhere Investment is a (negative) initial cash outlay at time 0, cfn is the cash flow in the nth period,\nand n is the number of periods. irr finds the rate r such that the present value of the cash flow\n A"
  },
  {
    "element_type": "code",
    "content": "where \nInvestment\n is a (negative) initial cash outlay at time 0, \ncf\nn is the cash flow in the \nn\nth period,\nand \nn\n is the number of periods. \nirr\n finds the rate \nr\n such that the present value of the cash flow",
    "page_number": 54,
    "bbox": [
      89.99996948242188,
      695.3616333007812,
      543.3199462890625,
      718.9916381835938
    ],
    "caption": null,
    "context": "Analyzing and Computing Cash Flows\nIn this section...\n\u201cIntroduction\u201d on page 2-11\n\u201cInterest Rates/Rates of Return\u201d on page 2-11\n\u201cPresent or Future Values\u201d on page 2-12\n\u201cDepreciation\u201d on page 2-13\n\u201cAnnuities\u201d on page 2-13\nIntroduction\nFinancial Toolbox cash-flow functions compute interest rates and rates of return, present or future\nvalues, depreciation streams, and annuities.\nSome examples in this section use "
  },
  {
    "element_type": "code",
    "content": "Another toolbox rate function, \neffrr\n, calculates the effective rate of return given an annual interest\nrate (also known as nominal rate or annual percentage rate, APR) and number of compounding\nperiods per year. To find the effective rate of a 9% APR compounded monthly, enter",
    "page_number": 55,
    "bbox": [
      90.0,
      128.64755249023438,
      550.919677734375,
      164.27755737304688
    ],
    "caption": null,
    "context": "equals the initial investment. If all the cfns are positive there is only one solution. Every time there is\na change of sign between coefficients, up to two additional real roots are possible.\nAnother toolbox rate function, effrr, calculates the effective rate of return given an annual interest\nrate (also known as nominal rate or annual percentage rate, APR) and number of compounding\nperiods per year. To find the effective rate of a 9% APR compounded monthly, enter\nRate = e"
  },
  {
    "element_type": "code",
    "content": "Rate = effrr(0.09, 12)",
    "page_number": 55,
    "bbox": [
      90.0009765625,
      173.7512969970703,
      209.19696044921875,
      184.2183074951172
    ],
    "caption": null,
    "context": " given an annual interest\nrate (also known as nominal rate or annual percentage rate, APR) and number of compounding\nperiods per year. To find the effective rate of a 9% APR compounded monthly, enter\nRate = effrr(0.09, 12)\nRate = \n0.0938\nThe Rate is 9.38%.\nA companion function nomrr computes the nominal rate of return given the effective annual rate and\nthe number of compounding periods.\nPresent or Future Values\nThis ex"
  },
  {
    "element_type": "code",
    "content": "A companion function \nnomrr\n computes the nominal rate of return given the effective annual rate and\nthe number of compounding periods.",
    "page_number": 55,
    "bbox": [
      89.99898529052734,
      247.216064453125,
      554.0888671875,
      270.8460693359375
    ],
    "caption": null,
    "context": "equals the initial investment. If all the cfns are positive there is only one solution. Every time there is\na change of sign between coefficients, up to two additional real roots are possible.\nAnother toolbox rate function, effrr, calculates the effective rate of return given an annual interest\nrate (also known as nominal rate or ann"
  },
  {
    "element_type": "code",
    "content": "To compute the present or future value, you can use the following functuions: \nfvfix\n, \nfvvar\n, \npvfix\n,\nand \npvvar\n. The \n-fix\n functions assume equal cash flows at regular intervals, while the \n-var\nfunctions allow irregular cash flows at irregular periods.",
    "page_number": 55,
    "bbox": [
      89.9949951171875,
      367.5845642089844,
      552.5650024414062,
      403.2145690917969
    ],
    "caption": null,
    "context": "ber of compounding periods.\nPresent or Future Values\nThis example shows how to compute the present or future value of cash flows at regular or irregular\ntime intervals with equal or unequal payments.\nTo compute the present or future value, you can use the following functuions: fvfix, fvvar, pvfix,\nand pvvar. The -fix functions assume equal cash flows at regular intervals, while the -var\nfunctions allow irregular cash flows at irregular periods.\nSpecify the income stream as an initial investment of $20,000 followed by three annual return\npayments, a second investment of $5,000, then four more returns. Investments are negative cash\nflows, return payments"
  },
  {
    "element_type": "code",
    "content": "Stream = [-20000,  2000,  2500,  3500, -5000,  6500, \n...\n            9500,  9500,  9500];",
    "page_number": 55,
    "bbox": [
      89.99798583984375,
      458.732666015625,
      393.4329833984375,
      479.9996337890625
    ],
    "caption": null,
    "context": "al investment of $20,000 followed by three annual return\npayments, a second investment of $5,000, then four more returns. Investments are negative cash\nflows, return payments are positive cash flows.\nStream = [-20000,  2000,  2500,  3500, -5000,  6500, ...\n            9500,  9500,  9500];\nUse irr to compute the internal rate of return of the cash stream.\nROR = irr(Stream)\nROR = \n0.1172\nCompute the net present value of the sample income stream for which you computed the internal rate\nof "
  },
  {
    "element_type": "code",
    "content": "Use \nirr\n to compute the internal rate of return of the cash stream.",
    "page_number": 55,
    "bbox": [
      90.0040054321289,
      490.3131408691406,
      394.4339599609375,
      501.9431457519531
    ],
    "caption": null,
    "context": "equals the initial investment. If all the cfns are positive there is only one solution. Every time there is\na change of sign between coefficients, up to two additional real roots are possible.\nAnother toolbox rate function, effrr, calculates the effective rate of retu"
  },
  {
    "element_type": "code",
    "content": "NPV = pvvar(Stream, ROR)",
    "page_number": 55,
    "bbox": [
      89.99601745605469,
      607.9410400390625,
      220.02801513671875,
      618.4080200195312
    ],
    "caption": null,
    "context": " you computed the internal rate\nof return. This exercise also serves as a check on that calculation because the net present value of a\ncash stream at its internal rate of return should be zero. Enter\nNPV = pvvar(Stream, ROR)\nNPV = \n5.9117e-12\nThe NPV is very close to zero. The answer usually is not exactly zero due to rounding errors and the\ncomputational precision of the computer. Note, other toolbox functions behave sim"
  },
  {
    "element_type": "code",
    "content": "The \nNPV\n is very close to zero. The answer usually is not \nexactly\n zero due to rounding errors and the\ncomputational precision of the computer. Note, other toolbox functions behave similarly. The\nfunctions that compute a bond's yield, for example, often must solve a nonlinear equation. If you then\nuse that yield to compute the net present value of the bond's income stream, it usually does not\nexactly\n equal the purchase price, but the difference is negligible for practical applications.",
    "page_number": 55,
    "bbox": [
      89.99594116210938,
      659.361572265625,
      554.7957153320312,
      718.9915771484375
    ],
    "caption": null,
    "context": "equals the initial investment. If all the cfns are positive there is only one solution. Every time there is\na change of sign between coefficients, up to two additional real roots are possible.\nAnother toolbox rate function, effrr, calculates the effective rate of return given an annual interest\nrate (also known as nominal rate or annual percentage rate, APR) and number of compounding\nperiods per year. To find the effective rate of a 9% APR compounded monthly, enter\nRate = effrr(0.09, 12)\nRate = \n0.0938\nThe Rate is 9.38%.\nA companion function nomrr computes the nominal rate of return given the effective annual rate and\nthe number of compounding periods.\nPresent or Future Values\nThis ex"
  },
  {
    "element_type": "code",
    "content": "This example shows how to compute standard depreciation schedules using \ndepgendb\n.",
    "page_number": 56,
    "bbox": [
      90.0,
      148.24795532226562,
      490.6400146484375,
      159.87796020507812
    ],
    "caption": null,
    "context": "Depreciation\nThis example shows how to compute standard depreciation schedules using depgendb.\nThe following code depreciates an automobile worth $15,000 over five years with a salvage value of\n$1,500. It computes the general declining balance using two different depreciation rates: 50% (or\n1.5),"
  },
  {
    "element_type": "code",
    "content": "Decline1 = depgendb(15000, 1500, 5, 1.5)",
    "page_number": 56,
    "bbox": [
      89.99996948242188,
      217.03529357910156,
      306.7199401855469,
      227.50230407714844
    ],
    "caption": null,
    "context": "r five years with a salvage value of\n$1,500. It computes the general declining balance using two different depreciation rates: 50% (or\n1.5), and 100% (or 2.0, also known as double declining balance).\nDecline1 = depgendb(15000, 1500, 5, 1.5)\nDecline1 = 1\u00d75\n103 \u00d7\n    4.5000    3.1500    2.2050    1.5435    2.1015\nDecline2 = depgendb(15000, 1500, 5, 2.0)\nDecline2 = 1\u00d75\n103 \u00d7\n    6.0000    3.6000    2.1600    1.2960    0.4440\nThese results i"
  },
  {
    "element_type": "code",
    "content": "Decline1 = \n1\u00d75\n10\n3\n \u00d7",
    "page_number": 56,
    "bbox": [
      89.99998474121094,
      237.6516571044922,
      165.86099243164062,
      258.91864013671875
    ],
    "caption": null,
    "context": "Depreciation\nThis example shows how to compute standard depreciation schedules using depgendb.\nThe following code depreciates an automobile worth $15,000 over five years with a salvage value of\n$1,500. It computes the gener"
  },
  {
    "element_type": "code",
    "content": "4.5000    3.1500    2.2050    1.5435    2.1015",
    "page_number": 56,
    "bbox": [
      90.00286865234375,
      270.0516357421875,
      360.9028625488281,
      280.51861572265625
    ],
    "caption": null,
    "context": "eneral declining balance using two different depreciation rates: 50% (or\n1.5), and 100% (or 2.0, also known as double declining balance).\nDecline1 = depgendb(15000, 1500, 5, 1.5)\nDecline1 = 1\u00d75\n103 \u00d7\n    4.5000    3.1500    2.2050    1.5435    2.1015\nDecline2 = depgendb(15000, 1500, 5, 2.0)\nDecline2 = 1\u00d75\n103 \u00d7\n    6.0000    3.6000    2.1600    1.2960    0.4440\nThese results indicate the actual depreciation amount for the first four years and the "
  },
  {
    "element_type": "code",
    "content": "Decline2 = depgendb(15000, 1500, 5, 2.0)",
    "page_number": 56,
    "bbox": [
      90.00286865234375,
      301.468017578125,
      306.7228698730469,
      311.93499755859375
    ],
    "caption": null,
    "context": "iation rates: 50% (or\n1.5), and 100% (or 2.0, also known as double declining balance).\nDecline1 = depgendb(15000, 1500, 5, 1.5)\nDecline1 = 1\u00d75\n103 \u00d7\n    4.5000    3.1500    2.2050    1.5435    2.1015\nDecline2 = depgendb(15000, 1500, 5, 2.0)\nDecline2 = 1\u00d75\n103 \u00d7\n    6.0000    3.6000    2.1600    1.2960    0.4440\nThese results indicate the actual depreciation amount for the first four years and the remaining\ndepreciable value as the entry "
  },
  {
    "element_type": "code",
    "content": "Decline2 = \n1\u00d75\n10\n3\n \u00d7",
    "page_number": 56,
    "bbox": [
      90.00288391113281,
      322.08441162109375,
      165.85488891601562,
      343.35137939453125
    ],
    "caption": null,
    "context": "Depreciation\nThis example shows how to compute standard depreciation schedules using depgendb.\nThe following code depreciates an automobile worth $15,000 over five years with a salvage value of\n$1,500. It computes the gener"
  },
  {
    "element_type": "code",
    "content": "6.0000    3.6000    2.1600    1.2960    0.4440",
    "page_number": 56,
    "bbox": [
      89.99676513671875,
      354.4844055175781,
      360.8967590332031,
      364.9513854980469
    ],
    "caption": null,
    "context": "uble declining balance).\nDecline1 = depgendb(15000, 1500, 5, 1.5)\nDecline1 = 1\u00d75\n103 \u00d7\n    4.5000    3.1500    2.2050    1.5435    2.1015\nDecline2 = depgendb(15000, 1500, 5, 2.0)\nDecline2 = 1\u00d75\n103 \u00d7\n    6.0000    3.6000    2.1600    1.2960    0.4440\nThese results indicate the actual depreciation amount for the first four years and the remaining\ndepreciable value as the entry for the fifth year.\nAnnuities\nThis example shows how to work with annuit"
  },
  {
    "element_type": "code",
    "content": "This example shows how to work with annuities using \nannurate\n.",
    "page_number": 56,
    "bbox": [
      89.99677276611328,
      475.6675109863281,
      390.0767822265625,
      487.2975158691406
    ],
    "caption": null,
    "context": "0    3.6000    2.1600    1.2960    0.4440\nThese results indicate the actual depreciation amount for the first four years and the remaining\ndepreciable value as the entry for the fifth year.\nAnnuities\nThis example shows how to work with annuities using annurate.\nThe following code shows how to compute the interest rate associated with a series of loan payments\nwhen only the payment amounts and principal are known. For a loan whose original value was\n$5000.00 an"
  },
  {
    "element_type": "code",
    "content": "Rate = annurate(4*12, 130, 5000, 0, 0)",
    "page_number": 56,
    "bbox": [
      89.99979400634766,
      544.454833984375,
      295.8837890625,
      554.9218139648438
    ],
    "caption": null,
    "context": "ed with a series of loan payments\nwhen only the payment amounts and principal are known. For a loan whose original value was\n$5000.00 and which was paid back monthly over four years at $130.00/month:\nRate = annurate(4*12, 130, 5000, 0, 0)\nRate = \n0.0094\nThe function returns a rate of 0.0094 monthly, or about 11.28% annually.\nYou can use a present-value function (pvfix) to compute the initial principal when the payment and\nrate are know"
  },
  {
    "element_type": "code",
    "content": "The function returns a rate of \n0.0094\n monthly, or about 11.28% annually.",
    "page_number": 56,
    "bbox": [
      89.99779510498047,
      597.514404296875,
      427.8876647949219,
      609.1444091796875
    ],
    "caption": null,
    "context": "Depreciation\nThis example shows how to compute standard depreciation schedules using depgendb.\nThe following code depreciates an automobile worth $15,000 over five years with a salvage value of\n$1,500. It computes the general declining balance using two different depreciati"
  },
  {
    "element_type": "code",
    "content": "You can use a present-value function (\npvfix\n) to compute the initial principal when the payment and\nrate are known. For a loan paid at $300.00/month over four years at 11% annual interest:",
    "page_number": 56,
    "bbox": [
      89.99778747558594,
      620.4215087890625,
      549.3575439453125,
      644.051513671875
    ],
    "caption": null,
    "context": "Depreciation\nThis example shows how to compute standard depreciation schedules using depgendb.\nThe following code depreciates an automobile worth $15,000 over five years with a salvage value of\n$1,500. It computes the general declining balance using two different depreciation rates: 50% (or\n1.5), and 100% (or 2.0, also known as double declining balance).\nDecline1 = depgendb(15000, 1500,"
  },
  {
    "element_type": "code",
    "content": "Principal = pvfix(0.11/12, 4*12, 300, 0, 0)",
    "page_number": 56,
    "bbox": [
      90.0038070678711,
      654.3018188476562,
      322.9778137207031,
      664.768798828125
    ],
    "caption": null,
    "context": "% annually.\nYou can use a present-value function (pvfix) to compute the initial principal when the payment and\nrate are known. For a loan paid at $300.00/month over four years at 11% annual interest:\nPrincipal = pvfix(0.11/12, 4*12, 300, 0, 0)\nPrincipal = \n1.1607e+04\nThe function returns the original principal value of $11,607.43.\n Analyzing and Computing Cash Flows\n2-13\n"
  },
  {
    "element_type": "code",
    "content": "Principal = \n1.1607e+04",
    "page_number": 56,
    "bbox": [
      90.0038070678711,
      674.9182739257812,
      155.01980590820312,
      696.185302734375
    ],
    "caption": null,
    "context": "tion (pvfix) to compute the initial principal when the payment and\nrate are known. For a loan paid at $300.00/month over four years at 11% annual interest:\nPrincipal = pvfix(0.11/12, 4*12, 300, 0, 0)\nPrincipal = \n1.1607e+04\nThe function returns the original principal value of $11,607.43.\n Analyzing and Computing Cash Flows\n2-13\n"
  },
  {
    "element_type": "code",
    "content": "You can compute an amortization schedule using \namortize\n for a loan or annuity. For example, the\noriginal value was $5000.00 and was paid back over 12 months at an annual rate of 9%.",
    "page_number": 57,
    "bbox": [
      89.99996948242188,
      92.96160125732422,
      542.0997924804688,
      116.59159851074219
    ],
    "caption": null,
    "context": "You can compute an amortization schedule using amortize for a loan or annuity. For example, the\noriginal value was $5000.00 and was paid back over 12 months at an annual rate of 9%.\n[Prpmt, Intpmt, Balance, Payment] = amortize(0.09/12, 12, 5000, 0, 0)\nPrpmt = 1\u00d712\n  399.7574  402.7556  405.7762  408.8196  411.8857  414.9748  418.0872  421.2228  424.3820  427.5\nIntpmt = 1\u00d712\n   37."
  },
  {
    "element_type": "code",
    "content": "[Prpmt, Intpmt, Balance, Payment] = amortize(0.09/12, 12, 5000, 0, 0)",
    "page_number": 57,
    "bbox": [
      90.0009765625,
      126.02544403076172,
      463.84295654296875,
      136.49244689941406
    ],
    "caption": null,
    "context": "You can compute an amortization schedule using amortize for a loan or annuity. For example, the\noriginal value was $5000.00 and was paid back over 12 months at an annual rate of 9%.\n[Prpmt, Intpmt, Balance, Payment] = amortize(0.09/12, 12, 5000, 0, 0)\nPrpmt = 1\u00d712\n  399.7574  402.7556  405.7762  408.8196  411.8857  414.9748  418.0872  421.2228  424.3820  427.5\nIntpmt = 1\u00d712\n   37.5000   34.5018   31.4812   28.4378   25.3717   22.2825   19.1702   16"
  },
  {
    "element_type": "code",
    "content": "399.7574  402.7556  405.7762  408.8196  411.8857  414.9748  418.0872  421.2228  424.3820  427.5",
    "page_number": 57,
    "bbox": [
      90.0009765625,
      167.42543029785156,
      615.5469970703125,
      177.89244079589844
    ],
    "caption": null,
    "context": "n or annuity. For example, the\noriginal value was $5000.00 and was paid back over 12 months at an annual rate of 9%.\n[Prpmt, Intpmt, Balance, Payment] = amortize(0.09/12, 12, 5000, 0, 0)\nPrpmt = 1\u00d712\n  399.7574  402.7556  405.7762  408.8196  411.8857  414.9748  418.0872  421.2228  424.3820  427.5\nIntpmt = 1\u00d712\n   37.5000   34.5018   31.4812   28.4378   25.3717   22.2825   19.1702   16.0346   12.8754    9.6\nBalance = 1\u00d712\n103 \u00d7\n    4.6002    4.1975    3.7917    3.3829    2.9710    2.5560    2.1"
  },
  {
    "element_type": "code",
    "content": "37.5000   34.5018   31.4812   28.4378   25.3717   22.2825   19.1702   16.0346   12.8754    9.6",
    "page_number": 57,
    "bbox": [
      90.0009765625,
      219.6254425048828,
      615.5469970703125,
      230.0924530029297
    ],
    "caption": null,
    "context": " 9%.\n[Prpmt, Intpmt, Balance, Payment] = amortize(0.09/12, 12, 5000, 0, 0)\nPrpmt = 1\u00d712\n  399.7574  402.7556  405.7762  408.8196  411.8857  414.9748  418.0872  421.2228  424.3820  427.5\nIntpmt = 1\u00d712\n   37.5000   34.5018   31.4812   28.4378   25.3717   22.2825   19.1702   16.0346   12.8754    9.6\nBalance = 1\u00d712\n103 \u00d7\n    4.6002    4.1975    3.7917    3.3829    2.9710    2.5560    2.1379    1.7167    1.2923    0.8\nPayment = \n437.2574\nSee Also\nirr | effrr | nomrr | fvfix | fvvar | pvfix | pvvar\n"
  },
  {
    "element_type": "code",
    "content": "Balance = \n1\u00d712\n10\n3\n \u00d7",
    "page_number": 57,
    "bbox": [
      90.0009765625,
      250.2254180908203,
      165.8529815673828,
      271.4924011230469
    ],
    "caption": null,
    "context": "You can compute an amortization schedule using amortize for a loan or annuity. For example, the\noriginal value was $5000.00 and was paid back over 12 months at an annual rate of 9%.\n[Prpmt, Intpmt, Balance, Payment] = amort"
  },
  {
    "element_type": "code",
    "content": "4.6002    4.1975    3.7917    3.3829    2.9710    2.5560    2.1379    1.7167    1.2923    0.8",
    "page_number": 57,
    "bbox": [
      90.00386047363281,
      282.6253967285156,
      615.5498657226562,
      293.0923767089844
    ],
    "caption": null,
    "context": " 408.8196  411.8857  414.9748  418.0872  421.2228  424.3820  427.5\nIntpmt = 1\u00d712\n   37.5000   34.5018   31.4812   28.4378   25.3717   22.2825   19.1702   16.0346   12.8754    9.6\nBalance = 1\u00d712\n103 \u00d7\n    4.6002    4.1975    3.7917    3.3829    2.9710    2.5560    2.1379    1.7167    1.2923    0.8\nPayment = \n437.2574\nSee Also\nirr | effrr | nomrr | fvfix | fvvar | pvfix | pvvar\nRelated Examples\n\u2022\n\u201cHandle and Convert Dates\u201d on page 2-2\n\u2022\n\u201cPricing and Computing Yields for Fixed-Income Securities\u201d "
  },
  {
    "element_type": "code",
    "content": "See Also\nirr\n | \neffrr\n | \nnomrr\n | \nfvfix\n | \nfvvar\n | \npvfix\n | \npvvar",
    "page_number": 57,
    "bbox": [
      90.00286102294922,
      359.16998291015625,
      341.1429138183594,
      386.59149169921875
    ],
    "caption": null,
    "context": "You can compute an amortization schedule using amortize for a loan or annuity. For example, the\noriginal value was $5000.00 and was paid back over 12 months at an annual rate of 9%.\n[Prpmt, Intpmt, Balance, Payment] = amortize(0.09/12, 12, 5000, 0, 0)\nPrpmt = 1\u00d712\n  399.7"
  },
  {
    "element_type": "code",
    "content": "0\nNo coupons (Zero coupon bond)",
    "page_number": 59,
    "bbox": [
      92.0,
      275.96160888671875,
      412.030029296875,
      287.59161376953125
    ],
    "caption": null,
    "context": "rent market price of the bond.\nPeriod\nThe period of a bond refers to the frequency with which the issuer of a bond makes coupon payments\nto the holder.\nPeriod of a Bond \nPeriod Value\nPayment Schedule\n0\nNo coupons (Zero coupon bond)\n1\nAnnual\n2\nSemiannual\n3\nTri-annual\n4\nQuarterly\n6\nBi-monthly\n12\nMonthly\nBasis\nThe basis of a bond refers to the basis or day-count convention for a bond. Day count basis\ndetermines how interest accrues"
  },
  {
    "element_type": "code",
    "content": "For example, the numerator of \nactual/actual\n means that when determining the number of days\nbetween two dates, count the actual number of days; the denominator means that you use the actual\nnumber of days in the given year in any calculations (either 365 or 366 days depending on whether\nthe given year is a leap year). The calculation of accrued interest for dates between payments also\nuses day count basis. Day count basis is a fraction of \nNumber of interest accrual days\n / \nDays\nin the relevant coupon period\n.",
    "page_number": 59,
    "bbox": [
      89.99996948242188,
      487.96160888671875,
      553.0399780273438,
      559.591552734375
    ],
    "caption": null,
    "context": "the coupon payment is called accrued interest. The purchase price, the price paid for a bond, is the\nquoted market price plus accrued interest.\nThe maturity date of a bond is the date when the issuer returns the final face value, also known as the\nredemption value or par value, to the buyer. The yield-to-maturity of a bond is the nominal compound\nrate of return that equates the present value of all future cash flows (coupons and principal) to the\ncurrent market price of the bond.\nPeriod\nThe period of a bond refers to the frequency with which the issuer of a bond makes coupon payments\nto the holder.\nPeriod of a Bond \nPeriod Value\nPayment Schedule\n0\nNo coupons (Zero coupon bond)\n1\nAnnual\n2\nSemiannual\n3\nTri-ann"
  },
  {
    "element_type": "code",
    "content": "Note\n Although the concept of day count sounds deceptively simple, the actual calculation of day\ncounts can be complex. You can find a good discussion of day counts and the formulas for calculating\nthem in Chapter 5 of Stigum and Robinson, \nMoney Market and Bond Calculations\n in \u201cBibliography\u201d\non page A-2. For more information on \nBasis\n, see EMU and Market Conventions: Recent\nDevelopments.",
    "page_number": 59,
    "bbox": [
      89.99990844726562,
      580.4615478515625,
      552.7496337890625,
      640.091552734375
    ],
    "caption": null,
    "context": "the coupon payment is called accrued interest. The purchase price, the price paid for a bond, is the\nquoted market price plus accrued interest.\nThe maturity date of a bond is the date when the issuer returns the final face value, also known as the\nredemption value or par value, to the buyer. The yield-to-maturity of a bond is the nominal compound\nrate of return that equates the present value of all future cash flows (coupons and principal) to the\ncurrent market price of the bond.\nPeriod\nThe period of a bond refers to the frequency with which the issuer of a bond makes coupon payments\nto"
  },
  {
    "element_type": "code",
    "content": "0\nactual/actual\n (default) \u2014 Number of days in both a period and a year is the actual\nnumber of days. Also, another common actual/actual basis is basis \n12\n.",
    "page_number": 60,
    "bbox": [
      92.25,
      123.61157989501953,
      528.9998168945312,
      147.34158325195312
    ],
    "caption": null,
    "context": "Basis\nValue\nDay Count Convention\n0\nactual/actual (default) \u2014 Number of days in both a period and a year is the actual\nnumber of days. Also, another common actual/actual basis is basis 12.\n1\n30/360 SIA \u2014 Year fraction is calculated based on a 360 day year with 30-day months,\nafter applying the following rules: If the first date and the second date are the "
  },
  {
    "element_type": "code",
    "content": "1\n30/360 SIA\n \u2014 Year fraction is calculated based on a 360 day year with 30-day months,\nafter applying the following rules: If the first date and the second date are the last day\nof February, the second date is changed to the 30th. If the first date falls on the 31st or\nis the last day of February, it is changed to the 30th. If after the preceding test, the first\nday is the 30th and the second day is the 31st, then the second day is changed to the\n30th.",
    "page_number": 60,
    "bbox": [
      92.24996948242188,
      152.111572265625,
      549.6300048828125,
      223.84158325195312
    ],
    "caption": null,
    "context": "Basis\nValue\nDay Count Convention\n0\nactual/actual (default) \u2014 Number of days in both a period and a year is the actual\nnumber of days. Also, another common actual/actual basis is basis 12.\n1\n30/360 SIA \u2014 Year fraction is calculated based on a 360 day year with 30-day months,\nafter applying the following rules: If the first date and the second date are the last day\nof February, the second date is changed to the 30th. If the first date falls on the 31st or\nis the last day of February, it is changed to the 30th. If after the preceding test, the first\nday is the 30th and the second day is the 31st, then the second day is changed to the\n30th.\n2\nactual/360"
  },
  {
    "element_type": "code",
    "content": "2\nactual/360\n \u2014 Number of days in a period is equal to the actual number of days,\nhowever the number of days in a year is 360.",
    "page_number": 60,
    "bbox": [
      92.25,
      228.611572265625,
      516.599853515625,
      252.34158325195312
    ],
    "caption": null,
    "context": "Basis\nValue\nDay Count Convention\n0\nactual/actual (default) \u2014 Number of days in both a period and a year is the actual\nnumber of days. Also, another common actual/actual basis is basis 12.\n1\n30/360 SIA \u2014 Year fraction is calculated based on a 360 day year with 30-day months,\nafter applying the following rules: If the first da"
  },
  {
    "element_type": "code",
    "content": "3\nactual/365\n \u2014 Number of days in a period is equal to the actual number of days,\nhowever the number of days in a year is 365 (even in a leap year).",
    "page_number": 60,
    "bbox": [
      92.25,
      257.111572265625,
      516.599853515625,
      280.8415832519531
    ],
    "caption": null,
    "context": "Basis\nValue\nDay Count Convention\n0\nactual/actual (default) \u2014 Number of days in both a period and a year is the actual\nnumber of days. Also, another common actual/actual basis is basis 12.\n1\n30/360 SIA \u2014 Year fraction is calculated based on a 360 day year with 30-day months,\nafter applying the following rules: If the first date and the second date"
  },
  {
    "element_type": "code",
    "content": "4\n30/360 PSA\n \u2014 Number of days in every month is set to 30 (including February). If the\nstart date of the period is either the 31st of a month or the last day of February, the start\ndate is set to the 30th, while if the start date is the 30th of a month and the end date is\nthe 31st, the end date is set to the 30th. The number of days in a year is 360.",
    "page_number": 60,
    "bbox": [
      92.25,
      285.611572265625,
      554.8097534179688,
      333.3415832519531
    ],
    "caption": null,
    "context": "Basis\nValue\nDay Count Convention\n0\nactual/actual (default) \u2014 Number of days in both a period and a year is the actual\nnumber of days. Also, another common actual/actual basis is basis 12.\n1\n30/360 SIA \u2014 Year fraction is calculated based on a 360 day year with 30-day months,\nafter applying the following rules: If the first date and the second date are the last day\nof February, the second date is changed to the 30th. If the first date falls on the 31st or\nis the last day of February, it is changed to the 30th. If after the preceding test, the first\n"
  },
  {
    "element_type": "code",
    "content": "5\n30/360 ISDA\n \u2014 Number of days in every month is set to 30, except for February where\nit is the actual number of days. If the start date of the period is the 31st of a month, the\nstart date is set to the 30th while if the start date is the 30th of a month and the end\ndate is the 31st, the end date is set to the 30th. The number of days in a year is 360.",
    "page_number": 60,
    "bbox": [
      92.25,
      338.111572265625,
      551.179931640625,
      385.8415832519531
    ],
    "caption": null,
    "context": "Basis\nValue\nDay Count Convention\n0\nactual/actual (default) \u2014 Number of days in both a period and a year is the actual\nnumber of days. Also, another common actual/actual basis is basis 12.\n1\n30/360 SIA \u2014 Year fraction is calculated based on a 360 day year with 30-day months,\nafter applying the following rules: If the first date and the second date are the last day\nof February, the second date is changed to the 30th. If the first date falls on the 31st or\nis the last day of February, it is changed to the 30th. If after the preceding test, the first\nday"
  },
  {
    "element_type": "code",
    "content": "6\n30E /360\n \u2014 Number of days in every month is set to 30 except for February where it is\nequal to the actual number of days. If the start date or the end date of the period is the\n31st of a month, that date is set to the 30th. The number of days in a year is 360.",
    "page_number": 60,
    "bbox": [
      92.25,
      390.611572265625,
      549.3798828125,
      426.3415832519531
    ],
    "caption": null,
    "context": "Basis\nValue\nDay Count Convention\n0\nactual/actual (default) \u2014 Number of days in both a period and a year is the actual\nnumber of days. Also, another common actual/actual basis is basis 12.\n1\n30/360 SIA \u2014 Year fraction is calculated based on a 360 day year with 30-day months,\nafter applying the following rules: If the first date and the second date are the last day\nof February, the second date is changed to the 30th. If the first date falls on the 31st or\nis th"
  },
  {
    "element_type": "code",
    "content": "7\nactual/365 Japanese\n \u2014 Number of days in a period is equal to the actual number of\ndays, except for leap days (29th February) which are ignored. The number of days in a\nyear is 365 (even in a leap year).",
    "page_number": 60,
    "bbox": [
      92.25,
      431.111572265625,
      544.2899169921875,
      466.8415832519531
    ],
    "caption": null,
    "context": "Basis\nValue\nDay Count Convention\n0\nactual/actual (default) \u2014 Number of days in both a period and a year is the actual\nnumber of days. Also, another common actual/actual basis is basis 12.\n1\n30/360 SIA \u2014 Year fraction is calculated based on a 360 day year with 30-day months,\nafter applying the following rules: If the first date and the second date are the last day\nof February, the second date is changed"
  },
  {
    "element_type": "code",
    "content": "8\nactual/actual ICMA\n \u2014 Number of days in both a period and a year is the actual\nnumber of days and the compounding frequency is annual.",
    "page_number": 60,
    "bbox": [
      92.25,
      471.611572265625,
      518.509765625,
      495.3415832519531
    ],
    "caption": null,
    "context": "Basis\nValue\nDay Count Convention\n0\nactual/actual (default) \u2014 Number of days in both a period and a year is the actual\nnumber of days. Also, another common actual/actual basis is basis 12.\n1\n30/360 SIA \u2014 Year fraction is calculated based on a 360 day year with 30-day months,\nafter applying the following rules: If the first date and the"
  },
  {
    "element_type": "code",
    "content": "9\nactual/360 ICMA\n \u2014 Number of days in a period is equal to the actual number of days,\nhowever the number of days in a year is 360 and the compounding frequency is annual.",
    "page_number": 60,
    "bbox": [
      92.2500228881836,
      500.111572265625,
      549.5199584960938,
      523.841552734375
    ],
    "caption": null,
    "context": "Basis\nValue\nDay Count Convention\n0\nactual/actual (default) \u2014 Number of days in both a period and a year is the actual\nnumber of days. Also, another common actual/actual basis is basis 12.\n1\n30/360 SIA \u2014 Year fraction is calculated based on a 360 day year with 30-day months,\nafter applying the following rules: If the first date and the second date are the last day\nof Fe"
  },
  {
    "element_type": "code",
    "content": "10\nactual/365 ICMA\n \u2014 Number of days in a period is equal to the actual number of days,\nhowever the number of days in a year is 365 (even in a leap year) and the compounding\nfrequency is annual.",
    "page_number": 60,
    "bbox": [
      92.25,
      528.611572265625,
      550.0999755859375,
      564.341552734375
    ],
    "caption": null,
    "context": "Basis\nValue\nDay Count Convention\n0\nactual/actual (default) \u2014 Number of days in both a period and a year is the actual\nnumber of days. Also, another common actual/actual basis is basis 12.\n1\n30/360 SIA \u2014 Year fraction is calculated based on a 360 day year with 30-day months,\nafter applying the following rules: If the first date and the second date are the last day\nof February, the second date"
  },
  {
    "element_type": "code",
    "content": "11\n30/360 ICMA\n \u2014 Number of days in every month is set to 30, except for February where\nit is equal to the actual number of days. If the start date or the end date of the period is\nthe 31st of a month, that date is set to the 30th. The number of days in a year is 360 and\nthe compounding frequency is annual.",
    "page_number": 60,
    "bbox": [
      92.25,
      569.111572265625,
      553.9999389648438,
      616.841552734375
    ],
    "caption": null,
    "context": "Basis\nValue\nDay Count Convention\n0\nactual/actual (default) \u2014 Number of days in both a period and a year is the actual\nnumber of days. Also, another common actual/actual basis is basis 12.\n1\n30/360 SIA \u2014 Year fraction is calculated based on a 360 day year with 30-day months,\nafter applying the following rules: If the first date and the second date are the last day\nof February, the second date is changed to the 30th. If the first date falls on the 31st or\nis the last day of February, it is changed to the "
  },
  {
    "element_type": "code",
    "content": "12\nactual/365 ISDA\n \u2014 The day count fraction is calculated using the following formula:\n(Actual number of days in period that fall in a leap year / 366)\n +\n(Actual number of days in period that fall in a normal year / 365)\n.\nBasis \n12\n is also referred to as actual/actual ISDA.",
    "page_number": 60,
    "bbox": [
      92.25,
      621.611572265625,
      548.6199951171875,
      669.341552734375
    ],
    "caption": null,
    "context": "Basis\nValue\nDay Count Convention\n0\nactual/actual (default) \u2014 Number of days in both a period and a year is the actual\nnumber of days. Also, another common actual/actual basis is basis 12.\n1\n30/360 SIA \u2014 Year fraction is calculated based on a 360 day year with 30-day months,\nafter applying the following rules: If the first date and the second date are the last day\nof February, the second date is changed to the 30th. If the first date falls on the 31st or\nis the last day of F"
  },
  {
    "element_type": "code",
    "content": "13\nbus/252\n \u2014 The number of days in a period is equal to the actual number of business\ndays. The number of business days in a year is 252.",
    "page_number": 60,
    "bbox": [
      92.25,
      674.111572265625,
      536.869873046875,
      697.841552734375
    ],
    "caption": null,
    "context": "Basis\nValue\nDay Count Convention\n0\nactual/actual (default) \u2014 Number of days in both a period and a year is the actual\nnumber of days. Also, another common actual/actual basis is basis 12.\n1\n30/360 SIA \u2014 Year fraction is calculated based on a 360 day year with 30-day months,\nafter applying the following rules: If the first date and the s"
  },
  {
    "element_type": "code",
    "content": "1\n (default)\nRule in effect.",
    "page_number": 61,
    "bbox": [
      92.0,
      208.63320922851562,
      389.66998291015625,
      220.26321411132812
    ],
    "caption": null,
    "context": "End-of-Month Rule\nThe end-of-month rule affects a bond's coupon payment structure. When the rule is in effect, a\nsecurity that pays a coupon on the last actual day of a month will always pay coupons on the last day\nof the month."
  },
  {
    "element_type": "code",
    "content": "0\nRule not in effect.",
    "page_number": 61,
    "bbox": [
      91.9999771118164,
      224.63320922851562,
      407.3500061035156,
      236.26321411132812
    ],
    "caption": null,
    "context": "ays a coupon on February 28 in\nnonleap years will pay coupons on August 31 in all years and on February 29 in leap years.\nEnd-of-Month Rule\nEnd-of-Month Rule Value\nMeaning\n1 (default)\nRule in effect.\n0\nRule not in effect.\nFramework\nAlthough not all Financial Toolbox functions require the same input arguments, they all accept the\nfollowing common set of input arguments.\nCommon Input Arguments\nInput\nMeaning\nSettle\nSettle"
  },
  {
    "element_type": "code",
    "content": "Settle\nSettlement date",
    "page_number": 61,
    "bbox": [
      92.0,
      349.85406494140625,
      399.07000732421875,
      361.48406982421875
    ],
    "caption": null,
    "context": "t in effect.\nFramework\nAlthough not all Financial Toolbox functions require the same input arguments, they all accept the\nfollowing common set of input arguments.\nCommon Input Arguments\nInput\nMeaning\nSettle\nSettlement date\nMaturity\nMaturity date\nPeriod\nCoupon payment period\nBasis\nDay-count basis\nEndMonthRule\nEnd-of-month payment rule\nIssueDate\nBond issue date\nFirstCouponDate\nFirst coupon payment date\nLastCouponDate\nLast"
  },
  {
    "element_type": "code",
    "content": "Maturity\nMaturity date",
    "page_number": 61,
    "bbox": [
      92.0,
      365.85406494140625,
      388.760009765625,
      377.48406982421875
    ],
    "caption": null,
    "context": "Although not all Financial Toolbox functions require the same input arguments, they all accept the\nfollowing common set of input arguments.\nCommon Input Arguments\nInput\nMeaning\nSettle\nSettlement date\nMaturity\nMaturity date\nPeriod\nCoupon payment period\nBasis\nDay-count basis\nEndMonthRule\nEnd-of-month payment rule\nIssueDate\nBond issue date\nFirstCouponDate\nFirst coupon payment date\nLastCouponDate\nLast coupon payment date\nOf"
  },
  {
    "element_type": "code",
    "content": "Period\nCoupon payment period",
    "page_number": 61,
    "bbox": [
      92.0,
      381.85406494140625,
      435.70001220703125,
      393.48406982421875
    ],
    "caption": null,
    "context": "ial Toolbox functions require the same input arguments, they all accept the\nfollowing common set of input arguments.\nCommon Input Arguments\nInput\nMeaning\nSettle\nSettlement date\nMaturity\nMaturity date\nPeriod\nCoupon payment period\nBasis\nDay-count basis\nEndMonthRule\nEnd-of-month payment rule\nIssueDate\nBond issue date\nFirstCouponDate\nFirst coupon payment date\nLastCouponDate\nLast coupon payment date\nOf the common input arguments, "
  },
  {
    "element_type": "code",
    "content": "Basis\nDay-count basis",
    "page_number": 61,
    "bbox": [
      92.0,
      397.85406494140625,
      398.44000244140625,
      409.48406982421875
    ],
    "caption": null,
    "context": " the same input arguments, they all accept the\nfollowing common set of input arguments.\nCommon Input Arguments\nInput\nMeaning\nSettle\nSettlement date\nMaturity\nMaturity date\nPeriod\nCoupon payment period\nBasis\nDay-count basis\nEndMonthRule\nEnd-of-month payment rule\nIssueDate\nBond issue date\nFirstCouponDate\nFirst coupon payment date\nLastCouponDate\nLast coupon payment date\nOf the common input arguments, only Settle and Maturi"
  },
  {
    "element_type": "code",
    "content": "EndMonthRule\nEnd-of-month payment rule",
    "page_number": 61,
    "bbox": [
      92.0,
      413.85406494140625,
      451.2400207519531,
      425.48406982421875
    ],
    "caption": null,
    "context": "nts, they all accept the\nfollowing common set of input arguments.\nCommon Input Arguments\nInput\nMeaning\nSettle\nSettlement date\nMaturity\nMaturity date\nPeriod\nCoupon payment period\nBasis\nDay-count basis\nEndMonthRule\nEnd-of-month payment rule\nIssueDate\nBond issue date\nFirstCouponDate\nFirst coupon payment date\nLastCouponDate\nLast coupon payment date\nOf the common input arguments, only Settle and Maturity are required. All others are optiona"
  },
  {
    "element_type": "code",
    "content": "IssueDate\nBond issue date",
    "page_number": 61,
    "bbox": [
      92.0,
      429.85406494140625,
      398.58001708984375,
      441.48406982421875
    ],
    "caption": null,
    "context": "on set of input arguments.\nCommon Input Arguments\nInput\nMeaning\nSettle\nSettlement date\nMaturity\nMaturity date\nPeriod\nCoupon payment period\nBasis\nDay-count basis\nEndMonthRule\nEnd-of-month payment rule\nIssueDate\nBond issue date\nFirstCouponDate\nFirst coupon payment date\nLastCouponDate\nLast coupon payment date\nOf the common input arguments, only Settle and Maturity are required. All others are optional.\nThey are set to the def"
  },
  {
    "element_type": "code",
    "content": "FirstCouponDate\nFirst coupon payment date",
    "page_number": 61,
    "bbox": [
      92.0,
      445.85406494140625,
      448.97003173828125,
      457.48406982421875
    ],
    "caption": null,
    "context": "\nCommon Input Arguments\nInput\nMeaning\nSettle\nSettlement date\nMaturity\nMaturity date\nPeriod\nCoupon payment period\nBasis\nDay-count basis\nEndMonthRule\nEnd-of-month payment rule\nIssueDate\nBond issue date\nFirstCouponDate\nFirst coupon payment date\nLastCouponDate\nLast coupon payment date\nOf the common input arguments, only Settle and Maturity are required. All others are optional.\nThey are set to the default values if you do not explicitly set t"
  },
  {
    "element_type": "code",
    "content": "LastCouponDate\nLast coupon payment date",
    "page_number": 61,
    "bbox": [
      92.0,
      461.85406494140625,
      446.8900146484375,
      473.48406982421875
    ],
    "caption": null,
    "context": "le\nSettlement date\nMaturity\nMaturity date\nPeriod\nCoupon payment period\nBasis\nDay-count basis\nEndMonthRule\nEnd-of-month payment rule\nIssueDate\nBond issue date\nFirstCouponDate\nFirst coupon payment date\nLastCouponDate\nLast coupon payment date\nOf the common input arguments, only Settle and Maturity are required. All others are optional.\nThey are set to the default values if you do not explicitly set them. By default, the FirstCouponDate\nand"
  },
  {
    "element_type": "code",
    "content": "Of the common input arguments, only \nSettle\n and \nMaturity\n are required. All others are optional.\nThey are set to the default values if you do not explicitly set them. By default, the \nFirstCouponDate\nand \nLastCouponDate\n are nonapplicable. In other words, if you do not specify \nFirstCouponDate\nand \nLastCouponDate\n, the bond is assumed to have no odd first or last coupon periods. In this case,\nthe bond is a standard bond with a coupon payment structure based solely on the maturity date.",
    "page_number": 61,
    "bbox": [
      89.99996948242188,
      486.1227111816406,
      555.35986328125,
      545.752685546875
    ],
    "caption": null,
    "context": "End-of-Month Rule\nThe end-of-month rule affects a bond's coupon payment structure. When the rule is in effect, a\nsecurity that pays a coupon on the last actual day of a month will always pay coupons on the last day\nof the month. This means, for example, that a semiannual bond that pays a coupon on February 28 in\nnonleap years will pay coupons on August 31 in all years and on February 29 in leap years.\nEnd-of-Month Rule\nEnd-of-Month Rule Value\nMeaning\n1 (default)\nRule in effect.\n0\nRule not in effect.\nFramework\nAlthough not all Financial Toolbox functions require the same input arguments, they all accept the\nfollowing common set of input arguments.\nCommon Input Arguments\nInput\nMeaning\n"
  },
  {
    "element_type": "code",
    "content": "To illustrate the use of default values in Financial Toolbox functions, consider the \ncfdates\n function,\nwhich computes actual cash flow payment dates for a portfolio of fixed income securities regardless\nof whether the first and/or last coupon periods are normal, long, or short.",
    "page_number": 61,
    "bbox": [
      90.00198364257812,
      587.9405517578125,
      549.9319458007812,
      623.570556640625
    ],
    "caption": null,
    "context": " the bond is assumed to have no odd first or last coupon periods. In this case,\nthe bond is a standard bond with a coupon payment structure based solely on the maturity date.\nDefault Parameter Values\nTo illustrate the use of default values in Financial Toolbox functions, consider the cfdates function,\nwhich computes actual cash flow payment dates for a portfolio of fixed income securities regardless\nof whether the first and/or last coupon periods are normal, long, or short.\nThe complete calling syntax with the full input argument list is\nCFlowDates = cfdates(Settle, Maturity, Period, Basis, ... \nEndMonthRule, IssueDate, FirstCouponDate, LastCouponDate)\nwhile the minimal ca"
  },
  {
    "element_type": "code",
    "content": "CFlowDates = cfdates(Settle, Maturity, Period, Basis, ... \nEndMonthRule, IssueDate, FirstCouponDate, LastCouponDate)",
    "page_number": 61,
    "bbox": [
      89.99707794189453,
      655.514892578125,
      404.2410888671875,
      676.7819213867188
    ],
    "caption": null,
    "context": "ates for a portfolio of fixed income securities regardless\nof whether the first and/or last coupon periods are normal, long, or short.\nThe complete calling syntax with the full input argument list is\nCFlowDates = cfdates(Settle, Maturity, Period, Basis, ... \nEndMonthRule, IssueDate, FirstCouponDate, LastCouponDate)\nwhile the minimal calling syntax requires only settlement and maturity dates\nCFlowDates = cfdates(Settle, Maturity)\n2\nPerforming Common Financial Tasks\n2-18\n"
  },
  {
    "element_type": "code",
    "content": "CFlowDates = cfdates(Settle, Maturity)",
    "page_number": 61,
    "bbox": [
      90.00406646728516,
      708.6253662109375,
      295.8880615234375,
      719.0923461914062
    ],
    "caption": null,
    "context": "st is\nCFlowDates = cfdates(Settle, Maturity, Period, Basis, ... \nEndMonthRule, IssueDate, FirstCouponDate, LastCouponDate)\nwhile the minimal calling syntax requires only settlement and maturity dates\nCFlowDates = cfdates(Settle, Maturity)\n2\nPerforming Common Financial Tasks\n2-18\n"
  },
  {
    "element_type": "code",
    "content": "Settle          = \n'20-Sep-1999'\nMaturity        = \n'15-Oct-2007'\nPeriod          = 2\nBasis           = 0\nEndMonthRule    = 1\nIssueDate       = NaN\nFirstCouponDate = NaN\nLastCouponDate  = NaN",
    "page_number": 62,
    "bbox": [
      89.99700927734375,
      137.2921142578125,
      257.9640197753906,
      223.35914611816406
    ],
    "caption": null,
    "context": "Single Bond Example\nAs an example, suppose that you have a bond with these characteristics:\nSettle          = '20-Sep-1999'\nMaturity        = '15-Oct-2007'\nPeriod          = 2\nBasis           = 0\nEndMonthRule    = 1\nIssueDate       = NaN\nFirstCouponDate = NaN\nLastCouponDate  = NaN\nPeriod, Basis, and EndMonthRule are set to their default values, and IssueDate,\nFirstCouponDate, and LastCoup"
  },
  {
    "element_type": "code",
    "content": "Period\n, \nBasis\n, and \nEndMonthRule\n are set to their default values, and \nIssueDate\n,\nFirstCouponDate\n, and \nLastCouponDate\n are set to \nNaN\n.",
    "page_number": 62,
    "bbox": [
      89.99501037597656,
      234.29495239257812,
      479.91497802734375,
      257.9249572753906
    ],
    "caption": null,
    "context": "Single Bond Example\nAs an example, suppose that you have a bond with these characteristics:\nSettle          = '20-Sep-1999'\nMaturity        = '15-Oct-2007'\nPeriod          = 2\nBasis           = 0\nEndMonthRule    = 1\nIssueDate       = NaN\nFirstCouponDate = NaN\nLastCouponDate  = NaN\nPeriod, Basis, and EndMonthRule are set to their default valu"
  },
  {
    "element_type": "code",
    "content": "Formally, a \nNaN\n is an IEEE\n\u00ae\n arithmetic standard for \nNot-a-Number\n and is used to indicate the result\nof an undefined operation (for example, zero divided by zero). However, \nNaN\n is also a convenient\nplaceholder. In the SIA functions of Financial Toolbox software, \nNaN\n indicates the presence of a\nnonapplicable value. It tells the Financial Toolbox functions to ignore the input value and apply the\ndefault. Setting \nIssueDate\n, \nFirstCouponDate\n, and \nLastCouponDate\n to \nNaN\n in this example tells\ncfdates\n to assume that the bond has been issued before settlement and that no odd first or last\ncoupon periods exist.",
    "page_number": 62,
    "bbox": [
      90.00164794921875,
      268.78350830078125,
      551.1015625,
      352.5916442871094
    ],
    "caption": null,
    "context": "Single Bond Example\nAs an example, suppose that you have a bond with these characteristics:\nSettle          = '20-Sep-1999'\nMaturity        = '15-Oct-2007'\nPeriod          = 2\nBasis           = 0\nEndMonthRule    = 1\nIssueDate       = NaN\nFirstCouponDate = NaN\nLastCouponDate  = NaN\nPeriod, Basis, and EndMonthRule are set to their default values, and IssueDate,\nFirstCouponDate, and LastCouponDate are set to NaN.\nFormally, a NaN is an IEEE\u00ae arithmetic standard for Not-a-Number and is used to indicate the result\nof an undefined operation (for example, zero divided by zero). However, NaN is also a convenient\nplaceholder. In the SIA functions of Financial Toolbox software, NaN indicates the presence of a\nnonapplicable value. It tells the Financial Toolbox functions to ignore the input value and apply the\ndefault. Settin"
  },
  {
    "element_type": "code",
    "content": "Having set these values, all these calls to \ncfdates\n produce the same result.",
    "page_number": 62,
    "bbox": [
      90.00164794921875,
      363.6282958984375,
      440.1815185546875,
      375.25830078125
    ],
    "caption": null,
    "context": "Single Bond Example\nAs an example, suppose that you have a bond with these characteristics:\nSettle          = '20-Sep-1999'\nMaturity        = '15-Oct-2007'\nPeriod          = 2\nBasis           = 0\nEndMonthRule    = 1\nIssueDate       = NaN\nFirstCouponDate = NaN\nLastCouponDate  = "
  },
  {
    "element_type": "code",
    "content": "cfdates(Settle, Maturity)\ncfdates(Settle, Maturity, Period)\ncfdates(Settle, Maturity, Period, [])\ncfdates(Settle, Maturity, [], Basis)\ncfdates(Settle, Maturity, [], [])\ncfdates(Settle, Maturity, Period, [], EndMonthRule)\ncfdates(Settle, Maturity, Period, [], NaN)\ncfdates(Settle, Maturity, Period, [], [], IssueDate)\ncfdates(Settle, Maturity, Period, [], [], IssueDate, [], [])\ncfdates(Settle, Maturity, Period, [], [], [], [],LastCouponDate)\ncfdates(Settle, Maturity, Period, Basis, EndMonthRule, \n...\n \nIssueDate, FirstCouponDate, LastCouponDate)",
    "page_number": 62,
    "bbox": [
      90.00067138671875,
      385.2921447753906,
      436.7527160644531,
      514.5589599609375
    ],
    "caption": null,
    "context": "ells\ncfdates to assume that the bond has been issued before settlement and that no odd first or last\ncoupon periods exist.\nHaving set these values, all these calls to cfdates produce the same result.\ncfdates(Settle, Maturity)\ncfdates(Settle, Maturity, Period)\ncfdates(Settle, Maturity, Period, [])\ncfdates(Settle, Maturity, [], Basis)\ncfdates(Settle, Maturity, [], [])\ncfdates(Settle, Maturity, Period, [], EndMonthRule)\ncfdates(Settle, Maturity, Period, [], NaN)\ncfdates(Settle, Maturity, Period, [], [], IssueDate)\ncfdates(Settle, Maturity, Period, [], [], IssueDate, [], [])\ncfdates(Settle, Maturity, Period, [], [], [], [],LastCouponDate)\ncfdates(Settle, Maturity, Period, Basis, EndMonthRule, ... \nIssueDate, FirstCouponDate, LastCouponDate)\nThus, leaving a particular input unspecified has the same effect as passing an empty matrix ([]) or\npassing a NaN \u2013 all three tell cfdates (and other Financial Toolbox functions) to use the default valu"
  },
  {
    "element_type": "code",
    "content": "Thus, leaving a particular input unspecified has the same effect as passing an empty matrix (\n[]\n) or\npassing a \nNaN\n \u2013 all three tell \ncfdates\n (and other Financial Toolbox functions) to use the default value\nfor a particular input parameter.",
    "page_number": 62,
    "bbox": [
      90.0047607421875,
      525.4947509765625,
      557.6946411132812,
      561.124755859375
    ],
    "caption": null,
    "context": "od, [], [], IssueDate, [], [])\ncfdates(Settle, Maturity, Period, [], [], [], [],LastCouponDate)\ncfdates(Settle, Maturity, Period, Basis, EndMonthRule, ... \nIssueDate, FirstCouponDate, LastCouponDate)\nThus, leaving a particular input unspecified has the same effect as passing an empty matrix ([]) or\npassing a NaN \u2013 all three tell cfdates (and other Financial Toolbox functions) to use the default value\nfor a particular input parameter.\nBond Portfolio Example\nSince the previous example included only a single bond, there was no difference between passing an\nempty matrix or passing a NaN for an optional input argument. For a portfolio of bon"
  },
  {
    "element_type": "code",
    "content": "Since the previous example included only a single bond, there was no difference between passing an\nempty matrix or passing a \nNaN\n for an optional input argument. For a portfolio of bonds, however,\nusing \nNaN\n as a placeholder is the only way to specify default acceptance for some bonds while\nexplicitly setting nondefault values for the remaining bonds in the portfolio.",
    "page_number": 62,
    "bbox": [
      90.00479125976562,
      594.828125,
      550.9047241210938,
      642.4581298828125
    ],
    "caption": null,
    "context": "ect as passing an empty matrix ([]) or\npassing a NaN \u2013 all three tell cfdates (and other Financial Toolbox functions) to use the default value\nfor a particular input parameter.\nBond Portfolio Example\nSince the previous example included only a single bond, there was no difference between passing an\nempty matrix or passing a NaN for an optional input argument. For a portfolio of bonds, however,\nusing NaN as a placeholder is the only way to specify default acceptance for some bonds while\nexplicitly setting nondefault values for the remaining bonds in the portfolio.\nNow suppose that you have a portfolio of two bonds.\nSettle   = '20-Sep-1999'\nMaturity = ['15-Oct-2007'; '15-Oct-2010']\nThese calls to cfdates all set the coupon period to its default value (Period = 2) fo"
  },
  {
    "element_type": "code",
    "content": "Settle   = \n'20-Sep-1999'\nMaturity = [\n'15-Oct-2007'\n; \n'15-Oct-2010'\n]",
    "page_number": 62,
    "bbox": [
      89.9978256225586,
      675.15869140625,
      312.1537780761719,
      696.4257202148438
    ],
    "caption": null,
    "context": "Single Bond Example\nAs an example, suppose that you have a bond with these characteristics:\nSettle          = '20-Sep-1999'\nMaturity        = '15-Oct-2007'\nPeriod          = 2\nBasis           = 0\nEndMonthRule    = 1\nIssueDate       = NaN\nFirstCouponDate = NaN\nLastCouponD"
  },
  {
    "element_type": "code",
    "content": "These calls to \ncfdates\n all set the coupon period to its default value (\nPeriod = 2\n) for both bonds.",
    "page_number": 62,
    "bbox": [
      90.0037841796875,
      707.361572265625,
      544.4537353515625,
      718.9915771484375
    ],
    "caption": null,
    "context": "Single Bond Example\nAs an example, suppose that you have a bond with these characteristics:\nSettle          = '20-Sep-1999'\nMaturity        = '15-Oct-2007'\nPeriod          = 2\nBasis           = 0\nEndMonthRule    = 1\nIssueDate       = NaN\nFirstCouponDate = NaN\nLastCouponDate  = NaN\nPeriod, Basis, and E"
  },
  {
    "element_type": "code",
    "content": "cfdates(Settle, Maturity, 2)\ncfdates(Settle, Maturity, [2 2])\ncfdates(Settle, Maturity, [])\ncfdates(Settle, Maturity, NaN)\ncfdates(Settle, Maturity, [NaN NaN])\ncfdates(Settle, Maturity)",
    "page_number": 63,
    "bbox": [
      90.0,
      93.02544403076172,
      285.0480041503906,
      157.49244689941406
    ],
    "caption": null,
    "context": "cfdates(Settle, Maturity, 2)\ncfdates(Settle, Maturity, [2 2])\ncfdates(Settle, Maturity, [])\ncfdates(Settle, Maturity, NaN)\ncfdates(Settle, Maturity, [NaN NaN])\ncfdates(Settle, Maturity)\nThe first two calls explicitly set Period = 2. Since Maturity is a 2-by-1 vector of maturity dates,\ncfdates knows that you have a two-bond portfolio.\nThe first call specifies a single (that is, scalar"
  },
  {
    "element_type": "code",
    "content": "The first two calls explicitly set \nPeriod = 2\n. Since \nMaturity\n is a \n2\n-by-\n1\n vector of maturity dates,\ncfdates\n knows that you have a two-bond portfolio.",
    "page_number": 63,
    "bbox": [
      89.99996948242188,
      169.7615966796875,
      543.3797607421875,
      193.3916015625
    ],
    "caption": null,
    "context": "cfdates(Settle, Maturity, 2)\ncfdates(Settle, Maturity, [2 2])\ncfdates(Settle, Maturity, [])\ncfdates(Settle, Maturity, NaN)\ncfdates(Settle, Maturity, [NaN NaN])\ncfdates(Settle, Maturity)\nThe first two calls explicitly set Period = 2. Since Maturity is a 2-by-1 vector of maturity dates,\ncfdates knows that you have a two-bond portfolio.\nThe first call specifi"
  },
  {
    "element_type": "code",
    "content": "The first call specifies a single (that is, scalar) 2 for \nPeriod\n. Passing a scalar tells \ncfdates\n to apply\nthe scalar-valued input to all bonds in the portfolio. This is an example of implicit scalar-expansion.\nThe settlement date has been implicit scalar-expanded as well.",
    "page_number": 63,
    "bbox": [
      89.99990844726562,
      205.7615966796875,
      549.2799682617188,
      241.3916015625
    ],
    "caption": null,
    "context": "e, Maturity, [NaN NaN])\ncfdates(Settle, Maturity)\nThe first two calls explicitly set Period = 2. Since Maturity is a 2-by-1 vector of maturity dates,\ncfdates knows that you have a two-bond portfolio.\nThe first call specifies a single (that is, scalar) 2 for Period. Passing a scalar tells cfdates to apply\nthe scalar-valued input to all bonds in the portfolio. This is an example of implicit scalar-expansion.\nThe settlement date has been implicit scalar-expanded as well.\nThe second call also applies the default coupon period by explicitly passing a two-element vector of\n2's. The third call passes an empty matrix, which cfdates interprets as an invalid period, for which\nth"
  },
  {
    "element_type": "code",
    "content": "The second call also applies the default coupon period by explicitly passing a two-element vector of\n2's. The third call passes an empty matrix, which \ncfdates\n interprets as an invalid period, for which\nthe default value is used. The fourth call is similar, except that a \nNaN\n has been passed. The fifth call\npasses two \nNaN\n's, and has the same effect as the third. The last call passes the minimal input set.",
    "page_number": 63,
    "bbox": [
      89.9998779296875,
      253.7615966796875,
      548.5596923828125,
      301.3916015625
    ],
    "caption": null,
    "context": " a scalar tells cfdates to apply\nthe scalar-valued input to all bonds in the portfolio. This is an example of implicit scalar-expansion.\nThe settlement date has been implicit scalar-expanded as well.\nThe second call also applies the default coupon period by explicitly passing a two-element vector of\n2's. The third call passes an empty matrix, which cfdates interprets as an invalid period, for which\nthe default value is used. The fourth call is similar, except that a NaN has been passed. The fifth call\npasses two NaN's, and has the same effect as the third. The last call passes the minimal input set.\nFinally, consider the following calls to cfdates for the same two-bond portfolio.\ncfdates(Settle, Maturity, [4 NaN])\ncfdates(Settle, Maturity, [4 2])\nThe first call explicitly sets Period = 4 for the first "
  },
  {
    "element_type": "code",
    "content": "Finally, consider the following calls to \ncfdates\n for the same two-bond portfolio.",
    "page_number": 63,
    "bbox": [
      89.9998779296875,
      313.7615966796875,
      457.7198791503906,
      325.3916015625
    ],
    "caption": null,
    "context": "cfdates(Settle, Maturity, 2)\ncfdates(Settle, Maturity, [2 2])\ncfdates(Settle, Maturity, [])\ncfdates(Settle, Maturity, NaN)\ncfdates(Settle, Maturity, [NaN NaN])\ncfdates(Settle, Maturity)\nThe first two calls explicitly set Period = 2. Since Maturity is a 2-by-1 vector of maturity date"
  },
  {
    "element_type": "code",
    "content": "cfdates(Settle, Maturity, [4 NaN])\ncfdates(Settle, Maturity, [4 2])",
    "page_number": 63,
    "bbox": [
      89.99784851074219,
      336.62542724609375,
      274.2098388671875,
      357.8924255371094
    ],
    "caption": null,
    "context": "d. The fifth call\npasses two NaN's, and has the same effect as the third. The last call passes the minimal input set.\nFinally, consider the following calls to cfdates for the same two-bond portfolio.\ncfdates(Settle, Maturity, [4 NaN])\ncfdates(Settle, Maturity, [4 2])\nThe first call explicitly sets Period = 4 for the first bond and implicitly sets the default Period = 2\nfor the second bond. The second call has the same effect as the first but explicitly sets the pe"
  },
  {
    "element_type": "code",
    "content": "The first call explicitly sets \nPeriod = 4\n for the first bond and implicitly sets the default \nPeriod = 2\nfor the second bond. The second call has the same effect as the first but explicitly sets the periodicity\nfor both bonds.",
    "page_number": 63,
    "bbox": [
      90.00384521484375,
      370.1615905761719,
      557.913818359375,
      405.7915954589844
    ],
    "caption": null,
    "context": "cfdates(Settle, Maturity, 2)\ncfdates(Settle, Maturity, [2 2])\ncfdates(Settle, Maturity, [])\ncfdates(Settle, Maturity, NaN)\ncfdates(Settle, Maturity, [NaN NaN])\ncfdates(Settle, Maturity)\nThe first two calls explicitly set Period = 2. Since Maturity is a 2-by-1 vector of maturity dates,\ncfdates knows that you have a two-bond portfolio.\nThe first call specifies a single (that is, scalar) 2 for Period. Passing a scalar tells cfd"
  },
  {
    "element_type": "code",
    "content": "The optional input \nPeriod\n has been used for illustrative purpose only. The default-handling process\nillustrated in the examples applies to any of the optional input arguments.",
    "page_number": 63,
    "bbox": [
      90.00385284423828,
      418.1615905761719,
      548.07373046875,
      441.7915954589844
    ],
    "caption": null,
    "context": "cfdates(Settle, Maturity, 2)\ncfdates(Settle, Maturity, [2 2])\ncfdates(Settle, Maturity, [])\ncfdates(Settle, Maturity, NaN)\ncfdates(Settle, Maturity, [NaN NaN])\ncfdates(Settle, Maturity)\nThe first two calls explicitly set Period = 2. Since Maturity is a 2-by-1 vector of maturity dates,\ncfdates knows that you have a two-bond portfolio.\nThe first call specifies a single (that i"
  },
  {
    "element_type": "code",
    "content": "In other words, a Financial Toolbox function first examines the \nFirstCouponDate\n input. If\nFirstCouponDate\n is specified, coupon payment dates and quasi-coupon dates are computed with\nrespect to \nFirstCouponDate\n; if \nFirstCouponDate\n is unspecified, empty (\n[]\n), or \nNaN\n, then the\nLastCouponDate\n is examined. If \nLastCouponDate\n is specified, coupon payment dates and quasi-\ncoupon dates are computed with respect to \nLastCouponDate\n. If both \nFirstCouponDate\n and\nLastCouponDate\n are unspecified, empty (\n[]\n), or \nNaN\n, the \nMaturity\n (a required input argument)\nserves as the synchronization date.",
    "page_number": 63,
    "bbox": [
      90.00389099121094,
      627.9615478515625,
      544.0437622070312,
      711.591552734375
    ],
    "caption": null,
    "context": "erence, or\nsynchronization date (the sync date). Within the SIA framework, the order of precedence for\ndetermining the sync date is:\n1\nThe first coupon date\n2\nThe last coupon date\n3\nThe maturity date\nIn other words, a Financial Toolbox function first examines the FirstCouponDate input. If\nFirstCouponDate is specified, coupon payment dates and quasi-coupon dates are computed with\nrespect to FirstCouponDate; if FirstCouponDate is unspecified, empty ([]), or NaN, then the\nLastCouponDate is examined. If LastCouponDate is specified, coupon payment dates and quasi-\ncoupon dates are computed with respect to LastCouponDate. If both FirstCouponDate and\nLastCouponDate are unspecified, empty ([]), or NaN, the Maturity (a required input argument)\nserves as the synchronization date.\n2\nPerforming Common Financial Tasks\n2-20\n"
  },
  {
    "element_type": "code",
    "content": "There are two yield and time factor conventions that are used in the Financial Toolbox software \u2013\nthese are determined by the input \nbasis\n. Specifically, bases \n0\n to \n7\n are assumed to have semiannual\ncompounding, while bases \n8\n to \n12\n are assumed to have annual compounding regardless of the period\nof the bond's coupon payments (including zero-coupon bonds). In addition, any yield-related\nsensitivity (that is, duration and convexity), when quoted on a periodic basis, follows this same\nconvention. (See \nbndconvp\n, \nbndconvy\n, \nbnddurp\n, \nbnddury\n, and \nbndkrdur\n.)",
    "page_number": 64,
    "bbox": [
      89.99890899658203,
      118.7410888671875,
      554.6688232421875,
      190.37109375
    ],
    "caption": null,
    "context": "Yield Conventions\nThere are two yield and time factor conventions that are used in the Financial Toolbox software \u2013\nthese are determined by the input basis. Specifically, bases 0 to 7 are assumed to have semiannual\ncompounding, while bases 8 to 12 are assumed to have annual compounding regardless of the period\nof the bond's coupon payments (including zero-coupon bonds). In addition, any yield-related\nsensitivity (that is, duration and convexity), when quoted on a periodic basis, follows this same\nconvention. (See bndconvp, bndconvy, bnddurp, bnddury, and bndkrdur.)\nPricing Functions\nThis example shows how to compute the price of a bond with an odd first period using bndprice.\nAssume that you have a bond with these characteristics:\nSettle          = '11-Nov-1992';\nMaturity        = "
  },
  {
    "element_type": "code",
    "content": "This example shows how to compute the price of a bond with an odd first period using \nbndprice\n.",
    "page_number": 64,
    "bbox": [
      89.9969482421875,
      244.35391235351562,
      538.39697265625,
      255.98391723632812
    ],
    "caption": null,
    "context": "yield-related\nsensitivity (that is, duration and convexity), when quoted on a periodic basis, follows this same\nconvention. (See bndconvp, bndconvy, bnddurp, bnddury, and bndkrdur.)\nPricing Functions\nThis example shows how to compute the price of a bond with an odd first period using bndprice.\nAssume that you have a bond with these characteristics:\nSettle          = '11-Nov-1992';\nMaturity        = '01-Mar-2005';\nIssueDate       = '15-Oct-1992';\nFirstCouponDate = '01-Mar-1993';\nCouponRate    "
  },
  {
    "element_type": "code",
    "content": "Settle          = \n'11-Nov-1992'\n;\nMaturity        = \n'01-Mar-2005'\n;\nIssueDate       = \n'15-Oct-1992'\n;\nFirstCouponDate = \n'01-Mar-1993'\n;\nCouponRate      = 0.0785;\nYield           = 0.0625;",
    "page_number": 64,
    "bbox": [
      89.99695587158203,
      287.7587585449219,
      263.3909606933594,
      352.2256774902344
    ],
    "caption": null,
    "context": "Yield Conventions\nThere are two yield and time factor conventions that are used in the Financial Toolbox software \u2013\nthese are determined by the input basis. Specifically, bases 0 to 7 are assumed to have semiannual\ncompounding, while bases 8 to 12 are assumed to have annual compounding regardless of the period\nof the bond's coupon payments (including zero-coupon bonds). In addition, any y"
  },
  {
    "element_type": "code",
    "content": "Allow coupon payment period (\nPeriod\n = \n2\n), day-count basis (\nBasis\n = \n0\n), and end-of-month rule\n(\nEndMonthRule\n = \n1\n) to assume the default values. Also, assume that there is no odd last coupon date\nand that the face value of the bond is $100. Calling the function:",
    "page_number": 64,
    "bbox": [
      89.9969482421875,
      362.67431640625,
      558.0267333984375,
      398.3043212890625
    ],
    "caption": null,
    "context": "Yield Conventions\nThere are two yield and time factor conventions that are used in the Financial Toolbox software \u2013\nthese are determined by the input basis. Specifically, bases 0 to 7 are assumed to have semiannual\ncompounding, while bases 8 to 12 are assumed to have annual compounding regardless of the period\nof the bond's coupon payments (including zero-coupon bonds). In addition, any yield-related\nsensitivity (that is, duration and convexity), when quoted on a per"
  },
  {
    "element_type": "code",
    "content": "[Price, AccruedInt] = bndprice(Yield, CouponRate, Settle, \n...\n \nMaturity, [], [], [], IssueDate, FirstCouponDate)",
    "page_number": 64,
    "bbox": [
      90.00299072265625,
      407.8996887207031,
      425.94598388671875,
      429.1666564941406
    ],
    "caption": null,
    "context": "asis = 0), and end-of-month rule\n(EndMonthRule = 1) to assume the default values. Also, assume that there is no odd last coupon date\nand that the face value of the bond is $100. Calling the function:\n[Price, AccruedInt] = bndprice(Yield, CouponRate, Settle, ... \nMaturity, [], [], [], IssueDate, FirstCouponDate)\nPrice = \n113.5977\nAccruedInt = \n0.5855\nbndprice returns a price of $113.60 and accrued interest of $0.59.\nNote, bndprice uses nonlinear formulas to compute the price of a security. For this reason, Fina"
  },
  {
    "element_type": "code",
    "content": "bndprice\n returns a price of $113.60 and accrued interest of $0.59.",
    "page_number": 64,
    "bbox": [
      90.0009994506836,
      501.1383056640625,
      401.4309387207031,
      512.768310546875
    ],
    "caption": null,
    "context": "Yield Conventions\nThere are two yield and time factor conventions that are used in the Financial Toolbox software \u2013\nthese are determined by the input basis. Specifically, bases 0 to 7 are assumed to have semiannual\ncompounding, while bases 8 to 12 are assumed to have"
  },
  {
    "element_type": "code",
    "content": "Note, \nbndprice\n uses nonlinear formulas to compute the price of a security. For this reason, Financial\nToolbox\u2122 software uses Newton's method when solving for an independent variable within a formula.",
    "page_number": 64,
    "bbox": [
      90.0009994506836,
      523.3177490234375,
      557.3107299804688,
      546.94775390625
    ],
    "caption": null,
    "context": "Yield Conventions\nThere are two yield and time factor conventions that are used in the Financial Toolbox software \u2013\nthese are determined by the input basis. Specifically, bases 0 to 7 are assumed to have semiannual\ncompounding, while bases 8 to 12 are assumed to have annual compounding regardless of the period\nof the bond's coupon payments (including zero-coupon bonds). In addition, any yield-relat"
  },
  {
    "element_type": "code",
    "content": "This example shows how to use \nbndyield\n compute the yield of a bond that has odd first and last\nperiods and settlement in the first period.",
    "page_number": 64,
    "bbox": [
      90.00201416015625,
      610.020263671875,
      534.8719482421875,
      633.6502685546875
    ],
    "caption": null,
    "context": "Yield Conventions\nThere are two yield and time factor conventions that are used in the Financial Toolbox software \u2013\nthese are determined by the input basis. Specifically, bases 0 to 7 are assumed to have semiannual\ncompounding, while bases 8 to 12 are assumed to have annual compounding regardless of the period\nof the bond's coupon payment"
  },
  {
    "element_type": "code",
    "content": "Settle          = \n'12-Jan-2000'\n;\nMaturity        = \n'01-Oct-2001'\n;\nIssueDate       = \n'01-Jan-2000'\n;\nFirstCouponDate = \n'15-Jan-2000'\n;\nLastCouponDate  = \n'15-Apr-2000'\n;",
    "page_number": 64,
    "bbox": [
      90.0040283203125,
      665.4252319335938,
      263.3890380859375,
      719.0924072265625
    ],
    "caption": null,
    "context": "Yield Conventions\nThere are two yield and time factor conventions that are used in the Financial Toolbox software \u2013\nthese are determined by the input basis. Specifically, bases 0 to 7 are assumed to have semiannual\ncompounding, while bases 8 to 12 are assumed to have annual compounding regardless of the period\nof the bond's coupon payments (including zero-coupon bonds). I"
  },
  {
    "element_type": "code",
    "content": "Assume a face value of $100. Specify a purchase price of $95.70, a coupon rate of 4%, quarterly\ncoupon payments, and a 30/360 day-count convention (\nBasis\n = \n1\n).",
    "page_number": 65,
    "bbox": [
      90.0,
      92.96160125732422,
      530.0997924804688,
      116.59159851074219
    ],
    "caption": null,
    "context": "Assume a face value of $100. Specify a purchase price of $95.70, a coupon rate of 4%, quarterly\ncoupon payments, and a 30/360 day-count convention (Basis = 1).\nPrice        = 95.7;\nCouponRate   = 0.04;\nPeriod       = 4;\nBasis        = 1;\nEndMonthRule = 1;\nCall the bndyield function.\nYield = bndyield(Price, CouponRate, Settle, Maturity, Period, ... \nBasis, EndMon"
  },
  {
    "element_type": "code",
    "content": "Price        = 95.7;\nCouponRate   = 0.04;\nPeriod       = 4;\nBasis        = 1;\nEndMonthRule = 1;",
    "page_number": 65,
    "bbox": [
      90.00299072265625,
      125.64929962158203,
      198.36297607421875,
      179.31631469726562
    ],
    "caption": null,
    "context": "Assume a face value of $100. Specify a purchase price of $95.70, a coupon rate of 4%, quarterly\ncoupon payments, and a 30/360 day-count convention (Basis = 1).\nPrice        = 95.7;\nCouponRate   = 0.04;\nPeriod       = 4;\nBasis        = 1;\nEndMonthRule = 1;\nCall the bndyield function.\nYield = bndyield(Price, CouponRate, Settle, Maturity, Period, ... \nBasis, EndMonthRule, IssueDate, FirstCouponDate, LastCouponDate)\nYield = \n0.0659\nThe function returns a Y"
  },
  {
    "element_type": "code",
    "content": "Call the \nbndyield\n function.",
    "page_number": 65,
    "bbox": [
      89.99899291992188,
      189.16754150390625,
      219.99900817871094,
      200.79754638671875
    ],
    "caption": null,
    "context": "Assume a face value of $100. Specify a purchase price of $95.70, a coupon rate of 4%, quarterly\ncoupon payments, and a 30/360 day-count convention (Basis = 1).\nPrice        = 95.7;\nCouponRate   = 0.04;\nPeriod       = 4;\nBasis    "
  },
  {
    "element_type": "code",
    "content": "Yield = bndyield(Price, CouponRate, Settle, Maturity, Period, \n...\n \nBasis, EndMonthRule, IssueDate, FirstCouponDate, LastCouponDate)",
    "page_number": 65,
    "bbox": [
      90.00299072265625,
      209.85523986816406,
      447.61798095703125,
      231.1222381591797
    ],
    "caption": null,
    "context": ", quarterly\ncoupon payments, and a 30/360 day-count convention (Basis = 1).\nPrice        = 95.7;\nCouponRate   = 0.04;\nPeriod       = 4;\nBasis        = 1;\nEndMonthRule = 1;\nCall the bndyield function.\nYield = bndyield(Price, CouponRate, Settle, Maturity, Period, ... \nBasis, EndMonthRule, IssueDate, FirstCouponDate, LastCouponDate)\nYield = \n0.0659\nThe function returns a Yield = 0.0659 (6.60%).\nFixed-Income Sensitivities\nFinancial Toolbox software supports the following options for managing interest-rate risk for one or\nmore bonds:"
  },
  {
    "element_type": "code",
    "content": "The function returns a Yield = \n0.0659\n (6.60%).",
    "page_number": 65,
    "bbox": [
      90.00102996826172,
      271.1972961425781,
      308.5910339355469,
      282.8273010253906
    ],
    "caption": null,
    "context": "Assume a face value of $100. Specify a purchase price of $95.70, a coupon rate of 4%, quarterly\ncoupon payments, and a 30/360 day-count convention (Basis = 1).\nPrice        = 95.7;\nCouponRate   = 0.04;\nPeriod       = 4;\nBasis        = 1;\nEndMonthRu"
  },
  {
    "element_type": "code",
    "content": "\u2022\nbnddurp\n and \nbnddury\n support duration and convexity analysis based on market quotes and\nassume parallel shifts in the bond yield curve.",
    "page_number": 65,
    "bbox": [
      89.9970474243164,
      365.01812744140625,
      529.5368041992188,
      388.64813232421875
    ],
    "caption": null,
    "context": "Assume a face value of $100. Specify a purchase price of $95.70, a coupon rate of 4%, quarterly\ncoupon payments, and a 30/360 day-count convention (Basis = 1).\nPrice        = 95.7;\nCouponRate   = 0.04;\nPeriod       = 4;\nBasis        = 1;\nEndMonthRule = 1;\nCall the bndyield function.\nYield = bndyield(Price, CouponRate, Settle, Maturity, P"
  },
  {
    "element_type": "code",
    "content": "\u2022\nbndkrdur\n supports key rate duration based on a market yield curve and can model nonparallel\nshifts in the bond yield curve.",
    "page_number": 65,
    "bbox": [
      89.99703979492188,
      392.8091735839844,
      542.64697265625,
      416.4391784667969
    ],
    "caption": null,
    "context": "Assume a face value of $100. Specify a purchase price of $95.70, a coupon rate of 4%, quarterly\ncoupon payments, and a 30/360 day-count convention (Basis = 1).\nPrice        = 95.7;\nCouponRate   = 0.04;\nPeriod       = 4;\nBasis        = 1;\nEndMonthRule = 1;\nCall the bndyield function.\nYield = bndyield(Price, CouponRate, Settle"
  },
  {
    "element_type": "code",
    "content": "The Macaulay duration of an income stream, such as a coupon bond, measures how long, on average,\nthe owner waits before receiving a payment. It is the weighted average of the times payments are\nmade, with the weights at time \nT\n equal to the present value of the money received at time \nT\n. The\nmodified duration is the Macaulay duration discounted by the per-period interest rate; that is, divided\nby (1+rate/frequency). The \nMacaulay duration\n is a measure of price sensitivity to yield changes. This\nduration is measured in years and is a weighted average-time-to-maturity of an instrument.",
    "page_number": 65,
    "bbox": [
      89.99700927734375,
      493.55535888671875,
      556.536865234375,
      565.185302734375
    ],
    "caption": null,
    "context": "s in the bond yield curve.\nCalculating Duration and Convexity for Bonds\nThis example shows how to compute the annualized Macaulay and modified durations and the\nperiodic Macaulay duration for a bond.\nThe Macaulay duration of an income stream, such as a coupon bond, measures how long, on average,\nthe owner waits before receiving a payment. It is the weighted average of the times payments are\nmade, with the weights at time T equal to the present value of the money received at time T. The\nmodified duration is the Macaulay duration discounted by the per-period interest rate; that is, divided\nby (1+rate/frequency). The Macaulay duration is a measure of price sensitivity to yield changes. This\nduration is measured in years and is a weighted average-time-to-maturity of an instrument.\nTo illustrate, the following code computes the annualized Macaulay and modified durations and the\nperiodic Macaulay duration for a bond with settlement (12-Jan-2000) and maturity (01-Oct-2001)\ndates, a 5% c"
  },
  {
    "element_type": "code",
    "content": "To illustrate, the following code computes the annualized Macaulay and modified durations and the\nperiodic Macaulay duration for a bond with settlement (\n12-Jan-2000\n) and maturity (\n01-Oct-2001\n)\ndates, a 5% coupon rate, and a 4.5% yield to maturity. For simplicity, any optional input arguments\nassume default values (that is, semiannual coupons, and day-count basis = \n0\n (actual/actual), coupon\npayment structure synchronized to the maturity date, and end-of-month payment rule in effect).",
    "page_number": 65,
    "bbox": [
      89.99697875976562,
      575.1373901367188,
      554.0970458984375,
      634.767333984375
    ],
    "caption": null,
    "context": "ivided\nby (1+rate/frequency). The Macaulay duration is a measure of price sensitivity to yield changes. This\nduration is measured in years and is a weighted average-time-to-maturity of an instrument.\nTo illustrate, the following code computes the annualized Macaulay and modified durations and the\nperiodic Macaulay duration for a bond with settlement (12-Jan-2000) and maturity (01-Oct-2001)\ndates, a 5% coupon rate, and a 4.5% yield to maturity. For simplicity, any optional input arguments\nassume default values (that is, semiannual coupons, and day-count basis = 0 (actual/actual), coupon\npayment structure synchronized to the maturity date, and end-of-month payment rule in effect).\nCouponRate = 0.05;\nYield = 0.045;\nSettle = datetime(2000,1,12);\nMaturity = datetime(2001,10,1);\n[ModDuration, YearDuration, PerDuration] = bnddury(Yield, ... \nCouponRate, Settle, Maturity)\n2\nPerforming Comm"
  },
  {
    "element_type": "code",
    "content": "CouponRate = 0.05;\nYield = 0.045;\nSettle = datetime(2000,1,12);\nMaturity = datetime(2001,10,1);",
    "page_number": 65,
    "bbox": [
      89.99697875976562,
      643.8250732421875,
      257.9549865722656,
      686.6921997070312
    ],
    "caption": null,
    "context": "ents\nassume default values (that is, semiannual coupons, and day-count basis = 0 (actual/actual), coupon\npayment structure synchronized to the maturity date, and end-of-month payment rule in effect).\nCouponRate = 0.05;\nYield = 0.045;\nSettle = datetime(2000,1,12);\nMaturity = datetime(2001,10,1);\n[ModDuration, YearDuration, PerDuration] = bnddury(Yield, ... \nCouponRate, Settle, Maturity)\n2\nPerforming Common Financial Tasks\n2-22\n"
  },
  {
    "element_type": "code",
    "content": "[ModDuration, YearDuration, PerDuration] = bnddury(Yield, \n...\n \nCouponRate, Settle, Maturity)",
    "page_number": 65,
    "bbox": [
      89.99697875976562,
      697.8253173828125,
      425.9399719238281,
      719.0923461914062
    ],
    "caption": null,
    "context": ", coupon\npayment structure synchronized to the maturity date, and end-of-month payment rule in effect).\nCouponRate = 0.05;\nYield = 0.045;\nSettle = datetime(2000,1,12);\nMaturity = datetime(2001,10,1);\n[ModDuration, YearDuration, PerDuration] = bnddury(Yield, ... \nCouponRate, Settle, Maturity)\n2\nPerforming Common Financial Tasks\n2-22\n"
  },
  {
    "element_type": "code",
    "content": "ModDuration = \n1.6107",
    "page_number": 66,
    "bbox": [
      90.0,
      93.02544403076172,
      165.85198974609375,
      114.29243469238281
    ],
    "caption": null,
    "context": "ModDuration = \n1.6107\nYearDuration = \n1.6470\nPerDuration = \n3.2940\nThe durations are:\n\u2022\nModDuration = 1.6107 (years)\n\u2022\nYearDuration = 1.6470 (years)\n\u2022\nPerDuration = 3.2940 (semiannual periods)\nNote that the semiannual peri"
  },
  {
    "element_type": "code",
    "content": "YearDuration = \n1.6470",
    "page_number": 66,
    "bbox": [
      90.0,
      124.43920135498047,
      171.26998901367188,
      145.70620727539062
    ],
    "caption": null,
    "context": "ModDuration = \n1.6107\nYearDuration = \n1.6470\nPerDuration = \n3.2940\nThe durations are:\n\u2022\nModDuration = 1.6107 (years)\n\u2022\nYearDuration = 1.6470 (years)\n\u2022\nPerDuration = 3.2940 (semiannual periods)\nNote that the semiannual periodic Macaulay duration "
  },
  {
    "element_type": "code",
    "content": "PerDuration = \n3.2940",
    "page_number": 66,
    "bbox": [
      90.0,
      155.8529510498047,
      165.85198974609375,
      177.11996459960938
    ],
    "caption": null,
    "context": "ModDuration = \n1.6107\nYearDuration = \n1.6470\nPerDuration = \n3.2940\nThe durations are:\n\u2022\nModDuration = 1.6107 (years)\n\u2022\nYearDuration = 1.6470 (years)\n\u2022\nPerDuration = 3.2940 (semiannual periods)\nNote that the semiannual periodic Macaulay duration (PerDuration) is twice"
  },
  {
    "element_type": "code",
    "content": "\u2022\nModDuration = 1.6107 (\nyears\n)",
    "page_number": 66,
    "bbox": [
      89.99800109863281,
      209.74539184570312,
      268.1579895019531,
      221.37539672851562
    ],
    "caption": null,
    "context": "ModDuration = \n1.6107\nYearDuration = \n1.6470\nPerDuration = \n3.2940\nThe durations are:\n\u2022\nModDuration = 1.6107 (years)\n\u2022\nYearDuration = 1.6470 (years)\n\u2022\nPerDuration = 3.2940 (semiannual periods)\nNote that the semiannual periodic Macau"
  },
  {
    "element_type": "code",
    "content": "\u2022\nYearDuration = 1.6470 (\nyears\n)",
    "page_number": 66,
    "bbox": [
      89.99800109863281,
      226.19747924804688,
      274.1780090332031,
      237.82748413085938
    ],
    "caption": null,
    "context": "ModDuration = \n1.6107\nYearDuration = \n1.6470\nPerDuration = \n3.2940\nThe durations are:\n\u2022\nModDuration = 1.6107 (years)\n\u2022\nYearDuration = 1.6470 (years)\n\u2022\nPerDuration = 3.2940 (semiannual periods)\nNote that the semiannual periodic Macaul"
  },
  {
    "element_type": "code",
    "content": "\u2022\nPerDuration = 3.2940 (\nsemiannual periods\n)",
    "page_number": 66,
    "bbox": [
      89.99800109863281,
      242.64956665039062,
      332.697998046875,
      254.27957153320312
    ],
    "caption": null,
    "context": "ModDuration = \n1.6107\nYearDuration = \n1.6470\nPerDuration = \n3.2940\nThe durations are:\n\u2022\nModDuration = 1.6107 (years)\n\u2022\nYearDuration = 1.6470 (years)\n\u2022\nPerDuration = 3.2940 (semiannual periods)\nNote that the semiannual periodic Macaulay duration "
  },
  {
    "element_type": "code",
    "content": "Note that the semiannual periodic Macaulay duration (\nPerDuration\n) is twice the annualized\nMacaulay duration (\nYearDuration\n).",
    "page_number": 66,
    "bbox": [
      89.99801635742188,
      265.5537414550781,
      519.16796875,
      289.1837463378906
    ],
    "caption": null,
    "context": "ModDuration = \n1.6107\nYearDuration = \n1.6470\nPerDuration = \n3.2940\nThe durations are:\n\u2022\nModDuration = 1.6107 (years)\n\u2022\nYearDuration = 1.6470 (years)\n\u2022\nPerDuration = 3.2940 (semiannual periods)\nNote that the semiannual periodic Macaulay duration (PerDuration) is twice the annualized\nMacaulay duration (YearDuration).\nCalculating Key Rate Durations for Bonds\nThis example shows how to compute the key rate duration of the US Treasury Bond.\nKey rate duration enables you to evaluate the sensitivity and price of a bond to n"
  },
  {
    "element_type": "code",
    "content": "The calculation of \nbndkrdur\n supports",
    "page_number": 66,
    "bbox": [
      89.99800109863281,
      450.6225280761719,
      265.36798095703125,
      462.2525329589844
    ],
    "caption": null,
    "context": "ModDuration = \n1.6107\nYearDuration = \n1.6470\nPerDuration = \n3.2940\nThe durations are:\n\u2022\nModDuration = 1.6107 (years)\n\u2022\nYearDuration = 1.6470 (years)\n\u2022\nPerDuration = 3.2940 (semiannual periods)\nNote that the semiannual periodic Macaulay du"
  },
  {
    "element_type": "code",
    "content": "Settle = datenum(\n'18-Nov-2008'\n); \nCouponRate = 5.500/100;\nMaturity = datenum(\n'15-Aug-2028'\n); \nPrice = 114.83;",
    "page_number": 66,
    "bbox": [
      90.00096130371094,
      676.2252807617188,
      279.6489562988281,
      719.0924072265625
    ],
    "caption": null,
    "context": "ModDuration = \n1.6107\nYearDuration = \n1.6470\nPerDuration = \n3.2940\nThe durations are:\n\u2022\nModDuration = 1.6107 (years)\n\u2022\nYearDuration = 1.6470 (years)\n\u2022\nPerDuration = 3.2940 (semiannual periods)\nNote that the semiannual periodic Macaulay duration (PerDuration) is twice the annualized\nMacaulay duration (YearDuratio"
  },
  {
    "element_type": "code",
    "content": "For the \nZeroData\n information on the current spot curve for this bond, refer to https://\nwww.treasury.gov/resource-center/data-chart-center/interest-rates/Pages/TextView.aspx?data=yield.",
    "page_number": 67,
    "bbox": [
      90.0,
      92.96160125732422,
      547.7999267578125,
      116.59159851074219
    ],
    "caption": null,
    "context": "For the ZeroData information on the current spot curve for this bond, refer to https://\nwww.treasury.gov/resource-center/data-chart-center/interest-rates/Pages/TextView.aspx?data=yield.\nZeroDates = daysadd(Settle ,[30 90 180 360 360*2 360*3 360*5 ...\n360*7 360*10 360*20 360*30]);\nZeroRates = ([0.06 0.12 0.81 1.08 1.22 1.53 2.32 2.92 3.68 4.42 4.20]/100)';\nCompute the key rate duration"
  },
  {
    "element_type": "code",
    "content": "ZeroDates = daysadd(Settle ,[30 90 180 360 360*2 360*3 360*5 \n...\n360*7 360*10 360*20 360*30]);\nZeroRates = ([0.06 0.12 0.81 1.08 1.22 1.53 2.32 2.92 3.68 4.42 4.20]/100)';",
    "page_number": 67,
    "bbox": [
      89.99697875976562,
      126.02544403076172,
      501.76495361328125,
      158.09243774414062
    ],
    "caption": null,
    "context": "For the ZeroData information on the current spot curve for this bond, refer to https://\nwww.treasury.gov/resource-center/data-chart-center/interest-rates/Pages/TextView.aspx?data=yield.\nZeroDates = daysadd(Settle ,[30 90 180 360 360*2 360*3 360*5 ...\n360*7 360*10 360*20 360*30]);\nZeroRates = ([0.06 0.12 0.81 1.08 1.22 1.53 2.32 2.92 3.68 4.42 4.20]/100)';\nCompute the key rate duration using bndkrdur for a specific set of rates (choose this based on the\nmaturities of the available hedging instruments).\nkrd = bndkrdur([ZeroDates ZeroRates],CouponRate,Sett"
  },
  {
    "element_type": "code",
    "content": "Compute the key rate duration using \nbndkrdur\n for a specific set of rates (choose this based on the\nmaturities of the available hedging instruments).",
    "page_number": 67,
    "bbox": [
      89.9949951171875,
      168.36160278320312,
      544.3347778320312,
      191.99160766601562
    ],
    "caption": null,
    "context": "For the ZeroData information on the current spot curve for this bond, refer to https://\nwww.treasury.gov/resource-center/data-chart-center/interest-rates/Pages/TextView.aspx?data=yield.\nZeroDates = daysadd(Settle ,[30 90 180 360 360*2 360*3 360*5 ...\n360*7 360*10 360*20 360*30]);\nZeroRates = ([0.06 0.12 0.81 1.08 1.22 1.53 2.32 2.92 3.68 4.42 4.20]"
  },
  {
    "element_type": "code",
    "content": "krd = bndkrdur([ZeroDates ZeroRates],CouponRate,Settle,Maturity,\n'keyrates'\n,[2 5 10 20])",
    "page_number": 67,
    "bbox": [
      89.99999237060547,
      201.42543029785156,
      561.4020385742188,
      211.89244079589844
    ],
    "caption": null,
    "context": "81 1.08 1.22 1.53 2.32 2.92 3.68 4.42 4.20]/100)';\nCompute the key rate duration using bndkrdur for a specific set of rates (choose this based on the\nmaturities of the available hedging instruments).\nkrd = bndkrdur([ZeroDates ZeroRates],CouponRate,Settle,Maturity,'keyrates',[2 5 10 20])\nkrd = 1\u00d74\n    0.2865    0.8729    2.6451    8.5778\nNote, the sum of the key rate durations approximately equals the duration of the bond.\n[sum(krd) bnddurp(Price,CouponRate,Settle,Maturity)]\nans = 1\u00d72\n "
  },
  {
    "element_type": "code",
    "content": "0.2865    0.8729    2.6451    8.5778",
    "page_number": 67,
    "bbox": [
      90.00003051757812,
      242.8253936767578,
      306.7200012207031,
      253.2924041748047
    ],
    "caption": null,
    "context": "r a specific set of rates (choose this based on the\nmaturities of the available hedging instruments).\nkrd = bndkrdur([ZeroDates ZeroRates],CouponRate,Settle,Maturity,'keyrates',[2 5 10 20])\nkrd = 1\u00d74\n    0.2865    0.8729    2.6451    8.5778\nNote, the sum of the key rate durations approximately equals the duration of the bond.\n[sum(krd) bnddurp(Price,CouponRate,Settle,Maturity)]\nans = 1\u00d72\n   12.3823   12.3919\nSee Also\nbndconvp | bndconvy "
  },
  {
    "element_type": "code",
    "content": "[sum(krd) bnddurp(Price,CouponRate,Settle,Maturity)]",
    "page_number": 67,
    "bbox": [
      89.9980239868164,
      295.4253845214844,
      371.7340087890625,
      305.8923645019531
    ],
    "caption": null,
    "context": "ZeroRates],CouponRate,Settle,Maturity,'keyrates',[2 5 10 20])\nkrd = 1\u00d74\n    0.2865    0.8729    2.6451    8.5778\nNote, the sum of the key rate durations approximately equals the duration of the bond.\n[sum(krd) bnddurp(Price,CouponRate,Settle,Maturity)]\nans = 1\u00d72\n   12.3823   12.3919\nSee Also\nbndconvp | bndconvy | bnddurp | bnddury | bndkrdur\nRelated Examples\n\u2022\n\u201cHandle and Convert Dates\u201d on page 2-2\n\u2022\n\u201cTerm Structure of Interest Rates\u201d on page 2-29\n\u2022"
  },
  {
    "element_type": "code",
    "content": "See Also\nbndconvp\n | \nbndconvy\n | \nbnddurp\n | \nbnddury\n | \nbndkrdur",
    "page_number": 67,
    "bbox": [
      90.0,
      382.7699890136719,
      353.760009765625,
      410.1914978027344
    ],
    "caption": null,
    "context": "For the ZeroData information on the current spot curve for this bond, refer to https://\nwww.treasury.gov/resource-center/data-chart-center/interest-rates/Pages/TextView.aspx?data=yield.\nZeroDates = daysadd(Settle ,[30 90 180 360 360*2 360*3 360*5 ...\n360*7 360*10 360"
  },
  {
    "element_type": "code",
    "content": "See Also\ntbilldisc2yield\n | \ntbillprice\n | \ntbillrepo\n | \ntbillyield\n | \ntbillyield2disc\n | \ntbillval01\n |\ntbl2bond\n | \ntr2bonds\n | \nzbtprice\n | \nzbtyield",
    "page_number": 68,
    "bbox": [
      90.00103759765625,
      253.57009887695312,
      555.0310668945312,
      292.9916076660156
    ],
    "caption": null,
    "context": "Treasury Bills Defined\nTreasury bills are short-term securities (issued with maturities of one year or less) sold by the United\nStates Treasury. Sales of these securities are frequent, usually weekly. From time to time, the\nTreasury also offers longer duration securities called Treasury notes and Treasury bonds.\nA Treasury bill is a discount security. "
  },
  {
    "element_type": "code",
    "content": "tbilldisc2yield\nConvert discount rate to yield.",
    "page_number": 69,
    "bbox": [
      92.25,
      294.7074890136719,
      390.53997802734375,
      306.3374938964844
    ],
    "caption": null,
    "context": "y Bill Yields\u201d on page 2-27\nIntroduction\nFinancial Toolbox software provides the following suite of functions for computing price and yield on\nTreasury bills.\nTreasury Bill Functions\nFunction\nPurpose\ntbilldisc2yield\nConvert discount rate to yield.\ntbillprice\nPrice Treasury bill given its yield or discount rate.\ntbillrepo\nBreak-even discount of repurchase agreement.\ntbillyield\nYield and discount of Treasury bill given its price.\ntbillyield2disc\n"
  },
  {
    "element_type": "code",
    "content": "tbillprice\nPrice Treasury bill given its yield or discount rate.",
    "page_number": 69,
    "bbox": [
      92.25,
      311.2074890136719,
      480.96002197265625,
      322.8374938964844
    ],
    "caption": null,
    "context": "al Toolbox software provides the following suite of functions for computing price and yield on\nTreasury bills.\nTreasury Bill Functions\nFunction\nPurpose\ntbilldisc2yield\nConvert discount rate to yield.\ntbillprice\nPrice Treasury bill given its yield or discount rate.\ntbillrepo\nBreak-even discount of repurchase agreement.\ntbillyield\nYield and discount of Treasury bill given its price.\ntbillyield2disc\nConvert yield to discount rate.\ntbillval01\nThe value of 1 basis p"
  },
  {
    "element_type": "code",
    "content": "tbillrepo\nBreak-even discount of repurchase agreement.",
    "page_number": 69,
    "bbox": [
      92.25,
      327.7074890136719,
      465.69000244140625,
      339.3374938964844
    ],
    "caption": null,
    "context": " computing price and yield on\nTreasury bills.\nTreasury Bill Functions\nFunction\nPurpose\ntbilldisc2yield\nConvert discount rate to yield.\ntbillprice\nPrice Treasury bill given its yield or discount rate.\ntbillrepo\nBreak-even discount of repurchase agreement.\ntbillyield\nYield and discount of Treasury bill given its price.\ntbillyield2disc\nConvert yield to discount rate.\ntbillval01\nThe value of 1 basis point (one hundredth of one percentage point,\nor 0.0001)"
  },
  {
    "element_type": "code",
    "content": "tbillyield\nYield and discount of Treasury bill given its price.",
    "page_number": 69,
    "bbox": [
      92.25,
      344.2074890136719,
      478.71002197265625,
      355.8374938964844
    ],
    "caption": null,
    "context": "Bill Functions\nFunction\nPurpose\ntbilldisc2yield\nConvert discount rate to yield.\ntbillprice\nPrice Treasury bill given its yield or discount rate.\ntbillrepo\nBreak-even discount of repurchase agreement.\ntbillyield\nYield and discount of Treasury bill given its price.\ntbillyield2disc\nConvert yield to discount rate.\ntbillval01\nThe value of 1 basis point (one hundredth of one percentage point,\nor 0.0001) given the characteristics of the Treasury bill, as\nrepresented "
  },
  {
    "element_type": "code",
    "content": "tbillyield2disc\nConvert yield to discount rate.",
    "page_number": 69,
    "bbox": [
      92.2500228881836,
      360.7074890136719,
      390.5400390625,
      372.3374938964844
    ],
    "caption": null,
    "context": " rate to yield.\ntbillprice\nPrice Treasury bill given its yield or discount rate.\ntbillrepo\nBreak-even discount of repurchase agreement.\ntbillyield\nYield and discount of Treasury bill given its price.\ntbillyield2disc\nConvert yield to discount rate.\ntbillval01\nThe value of 1 basis point (one hundredth of one percentage point,\nor 0.0001) given the characteristics of the Treasury bill, as\nrepresented by its settlement and maturity dates. You can re"
  },
  {
    "element_type": "code",
    "content": "tbillval01\nThe value of 1 basis point (one hundredth of one percentage point,\nor 0.0001) given the characteristics of the Treasury bill, as\nrepresented by its settlement and maturity dates. You can relate\nthe basis point to discount, money-market, or bond-equivalent\nyield.",
    "page_number": 69,
    "bbox": [
      92.25003051757812,
      377.2074890136719,
      556.760009765625,
      436.8374938964844
    ],
    "caption": null,
    "context": "iven its yield or discount rate.\ntbillrepo\nBreak-even discount of repurchase agreement.\ntbillyield\nYield and discount of Treasury bill given its price.\ntbillyield2disc\nConvert yield to discount rate.\ntbillval01\nThe value of 1 basis point (one hundredth of one percentage point,\nor 0.0001) given the characteristics of the Treasury bill, as\nrepresented by its settlement and maturity dates. You can relate\nthe basis point to discount, money-market, or bond-equivalent\nyield.\nFor all functions with yield in the computation, you can specify yield as money-market or bond-\nequivalent yield. The functions all assume a face value of $100 for each Treasury bill.\nTreasury Bill Re"
  },
  {
    "element_type": "code",
    "content": "Maturity = \n'26-Dec-2002'\n;\nInitialDiscount = 0.0161;\nPurchaseDate = \n'26-Sep-2002'\n;\nSaleDate = \n'26-Oct-2002'\n;\nRepoRate = 0.0149;",
    "page_number": 69,
    "bbox": [
      89.99800109863281,
      557.451904296875,
      247.13800048828125,
      611.1187744140625
    ],
    "caption": null,
    "context": "Computing Treasury Bill Price and Yield\nIn this section...\n\u201cIntroduction\u201d on page 2-26\n\u201cTreasury Bill Repurchase Agreements\u201d on page 2-26\n\u201cTreasury Bill Yields\u201d on page 2-27\nIntroduction\nFinancial Toolbox software provides the following suite of functions for computing price and yield on\nTreasury bills.\nTreasury Bill Functions\nFun"
  },
  {
    "element_type": "code",
    "content": "BreakevenDiscount = tbillrepo(RepoRate, InitialDiscount, \n...\n \nPurchaseDate, SaleDate, Maturity)",
    "page_number": 69,
    "bbox": [
      89.99800109863281,
      622.2518920898438,
      420.52301025390625,
      643.5189208984375
    ],
    "caption": null,
    "context": "s the Treasury bill such that the profit from selling the tail equals 0.\nMaturity = '26-Dec-2002';\nInitialDiscount = 0.0161;\nPurchaseDate = '26-Sep-2002';\nSaleDate = '26-Oct-2002';\nRepoRate = 0.0149;\nBreakevenDiscount = tbillrepo(RepoRate, InitialDiscount, ... \nPurchaseDate, SaleDate, Maturity)\nBreakevenDiscount = \n0.0167\nYou can check the result of this computation by examining the cash flows in and out from the\nrepurchase transaction. First compute the price of the Treasury bill on the purch"
  },
  {
    "element_type": "code",
    "content": "BreakevenDiscount = \n0.0167",
    "page_number": 69,
    "bbox": [
      89.998046875,
      652.3656616210938,
      198.3580322265625,
      673.6326904296875
    ],
    "caption": null,
    "context": "';\nInitialDiscount = 0.0161;\nPurchaseDate = '26-Sep-2002';\nSaleDate = '26-Oct-2002';\nRepoRate = 0.0149;\nBreakevenDiscount = tbillrepo(RepoRate, InitialDiscount, ... \nPurchaseDate, SaleDate, Maturity)\nBreakevenDiscount = \n0.0167\nYou can check the result of this computation by examining the cash flows in and out from the\nrepurchase transaction. First compute the price of the Treasury bill on the purchase date (September\n26).\n2"
  },
  {
    "element_type": "code",
    "content": "PriceOnPurchaseDate = tbillprice(InitialDiscount, \n...\n \nPurchaseDate, Maturity, 3)",
    "page_number": 70,
    "bbox": [
      90.0,
      93.02544403076172,
      382.5989990234375,
      114.29243469238281
    ],
    "caption": null,
    "context": "PriceOnPurchaseDate = tbillprice(InitialDiscount, ... \nPurchaseDate, Maturity, 3)\nPriceOnPurchaseDate = \n99.5930\nCompute the interest due on the repurchase agreement.\nRepoInterest = ... \nRepoRate*PriceOnPurchaseDate*days360(PurchaseDate,SaleDate)/360\nRepoInterest = \n0.1237\nRepoIntere"
  },
  {
    "element_type": "code",
    "content": "PriceOnPurchaseDate = \n99.5930",
    "page_number": 70,
    "bbox": [
      90.0,
      123.79273223876953,
      209.19598388671875,
      145.0597381591797
    ],
    "caption": null,
    "context": "PriceOnPurchaseDate = tbillprice(InitialDiscount, ... \nPurchaseDate, Maturity, 3)\nPriceOnPurchaseDate = \n99.5930\nCompute the interest due on the repurchase agreement.\nRepoInterest = ... \nRepoRate*PriceOnPurchaseDate*days360(PurchaseDate,SaleDate)/360\nRepoInterest = \n0.1237\nRepoInterest for a 1.49% 30-day term re"
  },
  {
    "element_type": "code",
    "content": "RepoInterest = \n...\n \nRepoRate*PriceOnPurchaseDate*days360(PurchaseDate,SaleDate)/360",
    "page_number": 70,
    "bbox": [
      89.99803161621094,
      176.7458953857422,
      431.3320007324219,
      198.0128936767578
    ],
    "caption": null,
    "context": "PriceOnPurchaseDate = tbillprice(InitialDiscount, ... \nPurchaseDate, Maturity, 3)\nPriceOnPurchaseDate = \n99.5930\nCompute the interest due on the repurchase agreement.\nRepoInterest = ... \nRepoRate*PriceOnPurchaseDate*days360(PurchaseDate,SaleDate)/360\nRepoInterest = \n0.1237\nRepoInteres"
  },
  {
    "element_type": "code",
    "content": "RepoInterest = \n0.1237",
    "page_number": 70,
    "bbox": [
      89.99803161621094,
      207.51318359375,
      171.26803588867188,
      228.7801971435547
    ],
    "caption": null,
    "context": ".. \nPurchaseDate, Maturity, 3)\nPriceOnPurchaseDate = \n99.5930\nCompute the interest due on the repurchase agreement.\nRepoInterest = ... \nRepoRate*PriceOnPurchaseDate*days360(PurchaseDate,SaleDate)/360\nRepoInterest = \n0.1237\nRepoInterest for a 1.49% 30-day term repurchase agreement (30/360 basis) is 0.1237.\nCompute the price of the Treasury bill on the sale date (October 26).\nPriceOnSaleDate = tbillprice(BreakevenDiscount"
  },
  {
    "element_type": "code",
    "content": "RepoInterest\n for a 1.49% 30-day term repurchase agreement (30/360 basis) is \n0.1237\n.",
    "page_number": 70,
    "bbox": [
      89.99603271484375,
      239.2352294921875,
      502.406005859375,
      250.865234375
    ],
    "caption": null,
    "context": "PriceOnPurchaseDate = tbillprice(InitialDiscount, ... \nPurchaseDate, Maturity, 3)\nPriceOnPurchaseDate = \n99.5930\nCompute the interest due on the repurchase agreement.\nRepoInterest = ... \nRepoRate*PriceOnPurchaseDate*days360(PurchaseDate,SaleDate)/360\nRepoInterest = \n0.1237\nRepoInterest"
  },
  {
    "element_type": "code",
    "content": "PriceOnSaleDate = tbillprice(BreakevenDiscount, SaleDate, \n...\n \nMaturity, 3)",
    "page_number": 70,
    "bbox": [
      89.99603271484375,
      282.6522216796875,
      425.9480285644531,
      303.919189453125
    ],
    "caption": null,
    "context": "haseDate,SaleDate)/360\nRepoInterest = \n0.1237\nRepoInterest for a 1.49% 30-day term repurchase agreement (30/360 basis) is 0.1237.\nCompute the price of the Treasury bill on the sale date (October 26).\nPriceOnSaleDate = tbillprice(BreakevenDiscount, SaleDate, ... \nMaturity, 3)\nPriceOnSaleDate = \n99.7167\nExamining the cash flows, observe that the break-even discount causes the sum of the price on the\npurchase date plus the accrued 30-day interest to be equal to the price on sa"
  },
  {
    "element_type": "code",
    "content": "PriceOnSaleDate = \n99.7167",
    "page_number": 70,
    "bbox": [
      89.99603271484375,
      313.41949462890625,
      187.52001953125,
      334.68646240234375
    ],
    "caption": null,
    "context": "y term repurchase agreement (30/360 basis) is 0.1237.\nCompute the price of the Treasury bill on the sale date (October 26).\nPriceOnSaleDate = tbillprice(BreakevenDiscount, SaleDate, ... \nMaturity, 3)\nPriceOnSaleDate = \n99.7167\nExamining the cash flows, observe that the break-even discount causes the sum of the price on the\npurchase date plus the accrued 30-day interest to be equal to the price on sale date. The following\nta"
  },
  {
    "element_type": "code",
    "content": "You can examine the money-market and bond-equivalent yields of a Treasury bill at the time of\npurchase and sale. The function \ntbilldisc2yield\n can perform both computations at one time.",
    "page_number": 70,
    "bbox": [
      89.99500274658203,
      579.8265991210938,
      533.6148681640625,
      603.4566040039062
    ],
    "caption": null,
    "context": "26/2002\nPayment of repo\n99.593\nSell T-bill\n99.7168\nRepo interest\n0.1238\nTotal\n199.3098\n199.3098\nTreasury Bill Yields\nThis example shows how to convert a Treasury bill discount to an equivalent yield.\nYou can examine the money-market and bond-equivalent yields of a Treasury bill at the time of\npurchase and sale. The function tbilldisc2yield can perform both computations at one time.\nMaturity = '26-Dec-2002';\nInitialDiscount = 0.0161;\nPurchaseDate = '26-Sep-2002';\nSaleDate = '26-Oct-2002';\nRepoRate = 0.0149;\nBreakevenDiscount = tbillrepo(RepoRate, InitialDiscount, ... \nPurchaseDate,"
  },
  {
    "element_type": "code",
    "content": "Maturity = \n'26-Dec-2002'\n;\nInitialDiscount = 0.0161;\nPurchaseDate = \n'26-Sep-2002'\n;\nSaleDate = \n'26-Oct-2002'\n;\nRepoRate = 0.0149;\nBreakevenDiscount = tbillrepo(RepoRate, InitialDiscount, \n...\n \nPurchaseDate, SaleDate, Maturity)",
    "page_number": 70,
    "bbox": [
      89.99604797363281,
      613.0578002929688,
      420.52105712890625,
      688.3250732421875
    ],
    "caption": null,
    "context": "PriceOnPurchaseDate = tbillprice(InitialDiscount, ... \nPurchaseDate, Maturity, 3)\nPriceOnPurchaseDate = \n99.5930\nCompute the interest due on the repurchase agreement.\nRepoInterest = ... \nRepoRate*PriceOnPurchaseDate*days360(PurchaseDate,SaleDate)/360\nRepoInterest = \n0.1237\nRepoInterest for a 1.49% 30-day term repurchase agreement (30/360 basis) is 0.1237.\nCompute the price of the Treasury bill on the sale date (October 26).\nPr"
  },
  {
    "element_type": "code",
    "content": "BreakevenDiscount = \n0.0167",
    "page_number": 70,
    "bbox": [
      89.9960708618164,
      697.8253784179688,
      198.3560791015625,
      719.0924072265625
    ],
    "caption": null,
    "context": "';\nInitialDiscount = 0.0161;\nPurchaseDate = '26-Sep-2002';\nSaleDate = '26-Oct-2002';\nRepoRate = 0.0149;\nBreakevenDiscount = tbillrepo(RepoRate, InitialDiscount, ... \nPurchaseDate, SaleDate, Maturity)\nBreakevenDiscount = \n0.0167\n Computing Treasury Bill Price and Yield\n2-27\n"
  },
  {
    "element_type": "code",
    "content": "[BEYield, MMYield] = \n...\ntbilldisc2yield([InitialDiscount; BreakevenDiscount], \n...\n \n[PurchaseDate; SaleDate], Maturity)",
    "page_number": 71,
    "bbox": [
      90.0,
      103.825439453125,
      404.27099609375,
      135.89244079589844
    ],
    "caption": null,
    "context": "[BEYield, MMYield] = ...\ntbilldisc2yield([InitialDiscount; BreakevenDiscount], ... \n[PurchaseDate; SaleDate], Maturity)\nBEYield = 2\u00d71\n    0.0164\n    0.0170\nMMYield = 2\u00d71\n    0.0162\n    0.0168\nFor the short Treasury bill (fewer than 182 days to maturity), the money-market yield is 360/365 of\nthe bond-equivalent yield, as "
  },
  {
    "element_type": "code",
    "content": "See Also\ntbilldisc2yield\n | \ntbillprice\n | \ntbillrepo\n | \ntbillyield\n | \ntbillyield2disc\n | \ntbillval01\n |\ntbl2bond\n | \ntr2bonds\n | \nzbtprice\n | \nzbtyield",
    "page_number": 71,
    "bbox": [
      89.99801635742188,
      320.570068359375,
      555.028076171875,
      359.9916076660156
    ],
    "caption": null,
    "context": "[BEYield, MMYield] = ...\ntbilldisc2yield([InitialDiscount; BreakevenDiscount], ... \n[PurchaseDate; SaleDate], Maturity)\nBEYield = 2\u00d71\n    0.0164\n    0.0170\nMMYield = 2\u00d71\n    0.0162\n    0.0168\nFor the short Treasury bill (fewer than 182 days to maturity), the money-market yield is 360/365 of\nthe bond-equivalent yield, as this example shows.\nSee Also\ntbi"
  },
  {
    "element_type": "code",
    "content": "%        Maturity               Days  Bid     Ask     AskYield\nTBill = [datenum(\n'12/26/2000'\n)  53    0.0503  0.0499  0.0510];",
    "page_number": 72,
    "bbox": [
      90.00003814697266,
      271.94384765625,
      425.9250183105469,
      293.2108154296875
    ],
    "caption": null,
    "context": "ase this conversion. The following code uses\nonly one security each; analysts often use 30, 100, or more of each.\nFirst, capture Treasury bill quotes and Reasury bond quotes in their reported format.\n%        Maturity               Days  Bid     Ask     AskYield\nTBill = [datenum('12/26/2000')  53    0.0503  0.0499  0.0510];\n%        Coupon   Maturity           Bid       Ask       AskYield\nTBond = [0.08875  datenum(2001,11,5) 103+4/32  103+6/32  0.0564];\nNote that these quotes are based on a November 3, 2000 settlement date"
  },
  {
    "element_type": "code",
    "content": "%        Coupon   Maturity           Bid       Ask       AskYield\nTBond = [0.08875  datenum(2001,11,5) 103+4/32  103+6/32  0.0564];",
    "page_number": 72,
    "bbox": [
      90.00009155273438,
      304.34381103515625,
      442.1700744628906,
      325.61077880859375
    ],
    "caption": null,
    "context": "re Treasury bill quotes and Reasury bond quotes in their reported format.\n%        Maturity               Days  Bid     Ask     AskYield\nTBill = [datenum('12/26/2000')  53    0.0503  0.0499  0.0510];\n%        Coupon   Maturity           Bid       Ask       AskYield\nTBond = [0.08875  datenum(2001,11,5) 103+4/32  103+6/32  0.0564];\nNote that these quotes are based on a November 3, 2000 settlement date.\nSettle = datenum('3-Nov-2000');\nUse the tbl2bond to convert the Treasury bill data to Treasury bond format.\nTBTBond = tbl2bond(T"
  },
  {
    "element_type": "code",
    "content": "Settle = datenum(\n'3-Nov-2000'\n);",
    "page_number": 72,
    "bbox": [
      90.00209045410156,
      357.2937927246094,
      257.9690856933594,
      367.7607727050781
    ],
    "caption": null,
    "context": "Term Structure of Interest Rates\nThis example shows how to derive and analyze interest-rate curves, including data conversion and\nextrapolation, bootstrapping, and interest-rate curve conversions.\nOne of the first problems in analyzi"
  },
  {
    "element_type": "code",
    "content": "Use the \ntbl2bond\n to convert the Treasury bill data to Treasury bond format.",
    "page_number": 72,
    "bbox": [
      89.99908447265625,
      378.2141418457031,
      444.2690124511719,
      389.8441467285156
    ],
    "caption": null,
    "context": "Term Structure of Interest Rates\nThis example shows how to derive and analyze interest-rate curves, including data conversion and\nextrapolation, bootstrapping, and interest-rate curve conversions.\nOne of the first problems in analyzing the term structure of interest rates is d"
  },
  {
    "element_type": "code",
    "content": "TBTBond = tbl2bond(TBill)",
    "page_number": 72,
    "bbox": [
      90.0020980834961,
      399.4437561035156,
      225.45208740234375,
      409.9107360839844
    ],
    "caption": null,
    "context": " 103+6/32  0.0564];\nNote that these quotes are based on a November 3, 2000 settlement date.\nSettle = datenum('3-Nov-2000');\nUse the tbl2bond to convert the Treasury bill data to Treasury bond format.\nTBTBond = tbl2bond(TBill)\nTBTBond = 1\u00d75\n105 \u00d7\n         0    7.3085    0.0010    0.0010    0.0000\nThe second element of TBTBond is the serial date number for December 26, 2000.\nCombine short-term (Treasury bill) with long-term "
  },
  {
    "element_type": "code",
    "content": "TBTBond = \n1\u00d75\n10\n5\n \u00d7",
    "page_number": 72,
    "bbox": [
      90.0020980834961,
      419.4095153808594,
      160.43609619140625,
      440.6764831542969
    ],
    "caption": null,
    "context": "Term Structure of Interest Rates\nThis example shows how to derive and analyze interest-rate curves, including data conversion and\nextrapolation, bootstrapping, and interest-rate curve conversions.\nOne of the first problems"
  },
  {
    "element_type": "code",
    "content": "0    7.3085    0.0010    0.0010    0.0000",
    "page_number": 72,
    "bbox": [
      89.99597930908203,
      451.8094787597656,
      360.8959655761719,
      462.2764587402344
    ],
    "caption": null,
    "context": " based on a November 3, 2000 settlement date.\nSettle = datenum('3-Nov-2000');\nUse the tbl2bond to convert the Treasury bill data to Treasury bond format.\nTBTBond = tbl2bond(TBill)\nTBTBond = 1\u00d75\n105 \u00d7\n         0    7.3085    0.0010    0.0010    0.0000\nThe second element of TBTBond is the serial date number for December 26, 2000.\nCombine short-term (Treasury bill) with long-term (Treasury bond) data to set up the overall term\nstructure.\nTBondsAll = "
  },
  {
    "element_type": "code",
    "content": "TBondsAll = [TBTBond; TBond]",
    "page_number": 72,
    "bbox": [
      90.00296020507812,
      538.943603515625,
      241.7069549560547,
      549.4105834960938
    ],
    "caption": null,
    "context": "0    0.0000\nThe second element of TBTBond is the serial date number for December 26, 2000.\nCombine short-term (Treasury bill) with long-term (Treasury bond) data to set up the overall term\nstructure.\nTBondsAll = [TBTBond; TBond]\nTBondsAll = 2\u00d75\n105 \u00d7\n         0    7.3085    0.0010    0.0010    0.0000\n    0.0000    7.3116    0.0010    0.0010    0.0000\nUse tr2bonds to convert the bond data into a form ready for the bootstrappin"
  },
  {
    "element_type": "code",
    "content": "TBondsAll = \n2\u00d75\n10\n5\n \u00d7",
    "page_number": 72,
    "bbox": [
      90.00296020507812,
      558.9093627929688,
      171.27294921875,
      580.1763305664062
    ],
    "caption": null,
    "context": "Term Structure of Interest Rates\nThis example shows how to derive and analyze interest-rate curves, including data conversion and\nextrapolation, bootstrapping, and interest-rate curve conversions.\nOne of the first problems i"
  },
  {
    "element_type": "code",
    "content": "0    7.3085    0.0010    0.0010    0.0000\n    0.0000    7.3116    0.0010    0.0010    0.0000",
    "page_number": 72,
    "bbox": [
      89.99684143066406,
      591.309326171875,
      360.8968505859375,
      612.5762939453125
    ],
    "caption": null,
    "context": " based on a November 3, 2000 settlement date.\nSettle = datenum('3-Nov-2000');\nUse the tbl2bond to convert the Treasury bill data to Treasury bond format.\nTBTBond = tbl2bond(TBill)\nTBTBond = 1\u00d75\n105 \u00d7\n         0    7.3085    0.0010    0.0010    0.0000\nThe second element of TBTBond is the serial date number for December 26, 2000.\nCombine short-term (Treasury bill) with long-term (Treasury bond) data to set up the overall term\nstructure.\nTBondsAll = [TBTBond; TBond]\nTBondsAll = 2\u00d75\n105 \u00d7\n         0  "
  },
  {
    "element_type": "code",
    "content": "Use \ntr2bonds\n to convert the bond data into a form ready for the bootstrapping functions. \ntr2bonds\ngenerates a matrix of bond information sorted by maturity date, plus vectors of prices and yields.",
    "page_number": 72,
    "bbox": [
      89.99684143066406,
      633.8297119140625,
      555.2467651367188,
      657.459716796875
    ],
    "caption": null,
    "context": "Term Structure of Interest Rates\nThis example shows how to derive and analyze interest-rate curves, including data conversion and\nextrapolation, bootstrapping, and interest-rate curve conversions.\nOne of the first problems in analyzing the term structure of interest rates is dealing with market data\nreported in different formats. Treasury bills, for example, are quoted with bid and asked bank-\ndi"
  },
  {
    "element_type": "code",
    "content": "[Bonds, Prices, Yields] = tr2bonds(TBondsAll)",
    "page_number": 72,
    "bbox": [
      90.00386810302734,
      667.0593872070312,
      333.8138427734375,
      677.5263671875
    ],
    "caption": null,
    "context": "00\nUse tr2bonds to convert the bond data into a form ready for the bootstrapping functions. tr2bonds\ngenerates a matrix of bond information sorted by maturity date, plus vectors of prices and yields.\n[Bonds, Prices, Yields] = tr2bonds(TBondsAll)\nBonds = 2\u00d76\n105 \u00d7\n Term Structure of Interest Rates\n2-29\n"
  },
  {
    "element_type": "code",
    "content": "7.3085         0    0.0010         0         0    0.0000\n    7.3116    0.0000    0.0010    0.0000         0    0.0000",
    "page_number": 73,
    "bbox": [
      90.0,
      93.02544403076172,
      415.0799865722656,
      114.29243469238281
    ],
    "caption": null,
    "context": "    7.3085         0    0.0010         0         0    0.0000\n    7.3116    0.0000    0.0010    0.0000         0    0.0000\nPrices = 2\u00d71\n   99.2654\n  103.1875\nYields = 2\u00d71\n    0.0510\n    0.0564\nUse a bootstrapping function to derive an implied zero curve. Bootstrapping is a process whereby you\nbegin with known data points "
  },
  {
    "element_type": "code",
    "content": "Use a bootstrapping function to derive an implied zero curve. Bootstrapping is a process whereby you\nbegin with known data points and solve for unknown data points using an underlying arbitrage\ntheory. Every coupon bond can be valued as a package of zero-coupon bonds which mimic its cash\nflow and risk characteristics. By mapping yields-to-maturity for each theoretical zero-coupon bond, to\nthe dates spanning the investment horizon, you can create a theoretical zero-rate curve. The\nFinancial Toolbox\u2122 software provides two bootstrapping functions: \nzbtprice\n derives a zero curve\nfrom bond data and \nprices\n, and \nzbtyield\n derives a zero curve from bond data and \nyields\n. Using\nzbtprice",
    "page_number": 73,
    "bbox": [
      90.0,
      262.7237548828125,
      556.9298706054688,
      358.353759765625
    ],
    "caption": null,
    "context": "    7.3085         0    0.0010         0         0    0.0000\n    7.3116    0.0000    0.0010    0.0000         0    0.0000\nPrices = 2\u00d71\n   99.2654\n  103.1875\nYields = 2\u00d71\n    0.0510\n    0.0564\nUse a bootstrapping function to derive an implied zero curve. Bootstrapping is a process whereby you\nbegin with known data points and solve for unknown data points using an underlying arbitrage\ntheory. Every coupon bond can be valued as a package of zero-coupon bonds which mimic its cash\nflow and risk characteristics. By mapping yields-to-maturity for each theoretical zero-coupon bond, to\nthe dates spanning the investment horizon, you can create a theoretical zero-rate curve. The\nFinancial Toolbox\u2122 software provides two bootstrapping functions: zbtprice derives a zero curve\nfrom bond data and prices, and zbtyield derives a zero curve from bond data and yields. Using\nzbtprice\n[ZeroRates, CurveDates] = zbtprice(Bonds, Prices, Settle)\nZeroRates = 2\u00d71\n    0.0516\n    0.0558\nCurveDates = 2\u00d71\n      730846\n      731160\nCurveDates gives the investment horizon.\ndatestr(CurveDates)\nans = 2\u00d7"
  },
  {
    "element_type": "code",
    "content": "[ZeroRates, CurveDates] = zbtprice(Bonds, Prices, Settle)",
    "page_number": 73,
    "bbox": [
      90.0009994506836,
      368.2254333496094,
      398.8269958496094,
      378.6924133300781
    ],
    "caption": null,
    "context": "\nFinancial Toolbox\u2122 software provides two bootstrapping functions: zbtprice derives a zero curve\nfrom bond data and prices, and zbtyield derives a zero curve from bond data and yields. Using\nzbtprice\n[ZeroRates, CurveDates] = zbtprice(Bonds, Prices, Settle)\nZeroRates = 2\u00d71\n    0.0516\n    0.0558\nCurveDates = 2\u00d71\n      730846\n      731160\nCurveDates gives the investment horizon.\ndatestr(CurveDates)\nans = 2\u00d711 char array\n    '26-Dec-2000'\n    '05-Nov-2001'\n"
  },
  {
    "element_type": "code",
    "content": "CurveDates\n gives the investment horizon.",
    "page_number": 73,
    "bbox": [
      89.99702453613281,
      516.3235473632812,
      287.79705810546875,
      527.9535522460938
    ],
    "caption": null,
    "context": "    7.3085         0    0.0010         0         0    0.0000\n    7.3116    0.0000    0.0010    0.0000         0    0.0000\nPrices = 2\u00d71\n   99.2654\n  103.1875\nYields = 2\u00d71\n    0.0510\n    0.0564\nUse a bootstrapping function to derive an implied"
  },
  {
    "element_type": "code",
    "content": "ans = \n2\u00d711 char array\n    '26-Dec-2000'\n    '05-Nov-2001'",
    "page_number": 73,
    "bbox": [
      90.00402069091797,
      558.0631103515625,
      203.78201293945312,
      590.1300659179688
    ],
    "caption": null,
    "context": "    7.3085         0    0.0010         0         0    0.0000\n    7.3116    0.0000    0.0010    0.0000         0    0.0000\nPrices = 2\u00d71\n   99.2654\n  103.1875\nYields = 2\u00d71\n    0.0510\n    0.0564\nUse a bootstrapping function to derive an implied zero curve. Boot"
  },
  {
    "element_type": "code",
    "content": "Use the functions \nzero2disc\n, \nzero2fwd\n, and \nzero2pyld\n to construct discount, forward, and par\nyield curves from the zero curve, and vice versa.",
    "page_number": 73,
    "bbox": [
      90.0,
      611.6856079101562,
      543.3897705078125,
      635.3156127929688
    ],
    "caption": null,
    "context": "    7.3085         0    0.0010         0         0    0.0000\n    7.3116    0.0000    0.0010    0.0000         0    0.0000\nPrices = 2\u00d71\n   99.2654\n  103.1875\nYields = 2\u00d71\n    0.0510\n    0.0564\nUse a bootstrapping function to derive an implied zero curve. Bootstrapping is a process whereby you\nbegin with known data points and solve for unknown data"
  },
  {
    "element_type": "code",
    "content": "[DiscRates, CurveDates] = zero2disc(ZeroRates, CurveDates, Settle)",
    "page_number": 73,
    "bbox": [
      90.0000228881836,
      645.1873168945312,
      447.5879821777344,
      655.654296875
    ],
    "caption": null,
    "context": "ns = 2\u00d711 char array\n    '26-Dec-2000'\n    '05-Nov-2001'\nUse the functions zero2disc, zero2fwd, and zero2pyld to construct discount, forward, and par\nyield curves from the zero curve, and vice versa.\n[DiscRates, CurveDates] = zero2disc(ZeroRates, CurveDates, Settle)\nDiscRates = 2\u00d71\n    0.9926\n    0.9462\n2\nPerforming Common Financial Tasks\n2-30\n"
  },
  {
    "element_type": "code",
    "content": "[FwdRates, CurveDates] = zero2fwd(ZeroRates, CurveDates, Settle)",
    "page_number": 74,
    "bbox": [
      90.0,
      156.0254364013672,
      436.7519836425781,
      166.49244689941406
    ],
    "caption": null,
    "context": "CurveDates = 2\u00d71\n      730846\n      731160\n[FwdRates, CurveDates] = zero2fwd(ZeroRates, CurveDates, Settle)\nFwdRates = 2\u00d71\n    0.0516\n    0.0565\nCurveDates = 2\u00d71\n      730846\n      731160\n[PYldRates, CurveDates] = zero2pyld(ZeroRates, CurveDates, Settle)\nPYldRates = 2\u00d71\n    0.0522\n    0.0557\nCurveDates = 2\u00d7"
  },
  {
    "element_type": "code",
    "content": "[PYldRates, CurveDates] = zero2pyld(ZeroRates, CurveDates, Settle)",
    "page_number": 74,
    "bbox": [
      90.00003814697266,
      301.8254089355469,
      447.5880126953125,
      312.2923889160156
    ],
    "caption": null,
    "context": "CurveDates = 2\u00d71\n      730846\n      731160\n[FwdRates, CurveDates] = zero2fwd(ZeroRates, CurveDates, Settle)\nFwdRates = 2\u00d71\n    0.0516\n    0.0565\nCurveDates = 2\u00d71\n      730846\n      731160\n[PYldRates, CurveDates] = zero2pyld(ZeroRates, CurveDates, Settle)\nPYldRates = 2\u00d71\n    0.0522\n    0.0557\nCurveDates = 2\u00d71\n      730846\n      731160\nSee Also\ntbilldisc2yield | tbillprice | tbillrepo | tbillyield | tbillyield2disc | tbillval01 |\ntbl2bond | tr2bonds | z"
  },
  {
    "element_type": "code",
    "content": "See Also\ntbilldisc2yield\n | \ntbillprice\n | \ntbillrepo\n | \ntbillyield\n | \ntbillyield2disc\n | \ntbillval01\n |\ntbl2bond\n | \ntr2bonds\n | \nzbtprice\n | \nzbtyield",
    "page_number": 74,
    "bbox": [
      90.00006866455078,
      462.96990966796875,
      555.0300903320312,
      502.39141845703125
    ],
    "caption": null,
    "context": "CurveDates = 2\u00d71\n      730846\n      731160\n[FwdRates, CurveDates] = zero2fwd(ZeroRates, CurveDates, Settle)\nFwdRates = 2\u00d71\n    0.0516\n    0.0565\nCurveDates = 2\u00d71\n      730846\n      731160\n[PYldRates, CurveDates] = zero2pyld(ZeroRates, CurveDates, Settle)\nPYldRates = 2\u00d71\n    0.0522\n    0.0557\nCurveDates = 2\u00d71\n      730846\n      731160\nSee Also\ntbilldisc"
  },
  {
    "element_type": "code",
    "content": "Financial Toolbox functions \nret2tick\n and \ntick2ret\n support converting between price series \np\n(\nt\n)\nand return series \nr\n(\nt\n).",
    "page_number": 75,
    "bbox": [
      89.99510192871094,
      333.4328918457031,
      544.1551513671875,
      357.06292724609375
    ],
    "caption": null,
    "context": "Returns with Negative Prices\nOnce considered a mathematical impossibility, negative prices have become an established aspect of\nmany financial markets. Negative prices arise in situations where investors determine that holding an\nasset entails more risk than the current value of the asset. For example, energy futures see negativ"
  },
  {
    "element_type": "code",
    "content": "The functions \nprice2ret\n and \nret2price\n implement the same formulas, but they divide by \u0394\nt\n in the\nreturn formulas and they multiply by \u0394\nt\n in the price formulas. A positive factor of \u0394\nt\n (enforced by\nrequired monotonic observation times) does not affect the behavior of the functions. Econometrics\nToolbox\u2122 calls simple returns \nperiodic\n, and continuous returns are the default. Otherwise, the\nfunctionality between the set of functions is identical. This example concentrates on the Financial\nToolbox functions.",
    "page_number": 75,
    "bbox": [
      89.99586486816406,
      524.403076171875,
      554.805908203125,
      596.0330810546875
    ],
    "caption": null,
    "context": "Returns with Negative Prices\nOnce considered a mathematical impossibility, negative prices have become an established aspect of\nmany financial markets. Negative prices arise in situations where investors determine that holding an\nasset entails more risk than the current value of the asset. For example, energy futures see negative\nprices because of costs associated with overproduction and limited storage capacity. In a different\nsetting, central banks impose negative interest rates when national economies become deflationary,\nand the pricing of interest rate derivatives, traditionally based on positivity, have to be rethought (see\n\u201cWork with Negative Interest Rates Using Functions\u201d (Financial Instruments Toolbo"
  },
  {
    "element_type": "code",
    "content": "p = [3; 1; -2; -1; 1]",
    "page_number": 76,
    "bbox": [
      90.00045013427734,
      496.97991943359375,
      203.7784423828125,
      507.4468994140625
    ],
    "caption": null,
    "context": ". Therefore, zero prices (that is, free\nexchanges) are unsupported.\nAnalysis of Negative Price Returns\nTo illustrate negative price inputs, consider the following price series and its simple returns.\np = [3; 1; -2; -1; 1]\np =\n     3\n     1\n    -2\n    -1\n     1\nrs = tick2ret(p)\nrs =\n   -0.6667\n   -3.0000\n   -0.5000\n   -2.0000\nThis table summarizes the recursions.\n Returns with Negative Prices\n2-33\n"
  },
  {
    "element_type": "code",
    "content": "3\n     1\n    -2\n    -1\n     1",
    "page_number": 76,
    "bbox": [
      90.00045013427734,
      540.1798706054688,
      122.50845336914062,
      593.8468017578125
    ],
    "caption": null,
    "context": "that is, free\nexchanges) are unsupported.\nAnalysis of Negative Price Returns\nTo illustrate negative price inputs, consider the following price series and its simple returns.\np = [3; 1; -2; -1; 1]\np =\n     3\n     1\n    -2\n    -1\n     1\nrs = tick2ret(p)\nrs =\n   -0.6667\n   -3.0000\n   -0.5000\n   -2.0000\nThis table summarizes the recursions.\n Returns with Negative Prices\n2-33\n"
  },
  {
    "element_type": "code",
    "content": "-0.6667\n   -3.0000\n   -0.5000\n   -2.0000",
    "page_number": 76,
    "bbox": [
      90.00045013427734,
      648.1799926757812,
      144.18045043945312,
      691.047119140625
    ],
    "caption": null,
    "context": "ative Price Returns\nTo illustrate negative price inputs, consider the following price series and its simple returns.\np = [3; 1; -2; -1; 1]\np =\n     3\n     1\n    -2\n    -1\n     1\nrs = tick2ret(p)\nrs =\n   -0.6667\n   -3.0000\n   -0.5000\n   -2.0000\nThis table summarizes the recursions.\n Returns with Negative Prices\n2-33\n"
  },
  {
    "element_type": "code",
    "content": "The round trip produced by \nret2tick\n returns the original price series.",
    "page_number": 77,
    "bbox": [
      90.00059509277344,
      312.8703308105469,
      418.41058349609375,
      324.5003356933594
    ],
    "caption": null,
    "context": "The returns have the correct size (66%, 300%, 50%, 200%), but do they have the correct sign? If you\ninterpret negative returns as losses, as with the positive price series, the signs seem wrong\u2014the last\ntwo returns should be gains (that is, if you interpret less negative "
  },
  {
    "element_type": "code",
    "content": "ps = ret2tick(rs,StartPrice=3)",
    "page_number": 77,
    "bbox": [
      90.0006103515625,
      333.58929443359375,
      252.5406036376953,
      344.0562744140625
    ],
    "caption": null,
    "context": "itions to ps(t \u2212 1). Briefly, a negative return on a negative price produces\na positive price movement. The returns are correct.\nThe round trip produced by ret2tick returns the original price series.\nps = ret2tick(rs,StartPrice=3)\nps =\n     3\n     1\n    -2\n    -1\n     1\nAlso, the following computations shows that time aggregation holds.\np(5)/p(1) - 1\nans =\n   -0.6667\nprod(rs + 1) - 1\nans =\n   -0.6667\nFor continuous returns, neg"
  },
  {
    "element_type": "code",
    "content": "3\n     1\n    -2\n    -1\n     1",
    "page_number": 77,
    "bbox": [
      90.0006103515625,
      374.64434814453125,
      122.50861358642578,
      428.311279296875
    ],
    "caption": null,
    "context": "tive return on a negative price produces\na positive price movement. The returns are correct.\nThe round trip produced by ret2tick returns the original price series.\nps = ret2tick(rs,StartPrice=3)\nps =\n     3\n     1\n    -2\n    -1\n     1\nAlso, the following computations shows that time aggregation holds.\np(5)/p(1) - 1\nans =\n   -0.6667\nprod(rs + 1) - 1\nans =\n   -0.6667\nFor continuous returns, negative price ratios pc(t)/pc(t \u2212 1) are i"
  },
  {
    "element_type": "code",
    "content": "rc = tick2ret(p,Method=\n\"continuous\"\n)",
    "page_number": 77,
    "bbox": [
      89.99580383300781,
      613.5532836914062,
      285.0617980957031,
      624.020263671875
    ],
    "caption": null,
    "context": "The returns have the correct size (66%, 300%, 50%, 200%), but do they have the correct sign? If you\ninterpret negative returns as losses, as with the positive price series, the signs seem wrong\u2014the last\ntwo returns should be gains (that i"
  },
  {
    "element_type": "code",
    "content": "-1.0986 + 0.0000i\n   0.6931 + 3.1416i\n  -0.6931 + 0.0000i\n   0.0000 - 3.1416i",
    "page_number": 77,
    "bbox": [
      89.99581909179688,
      654.6084594726562,
      192.93780517578125,
      697.4755859375
    ],
    "caption": null,
    "context": "\nFor continuous returns, negative price ratios pc(t)/pc(t \u2212 1) are interpreted as complex numbers with\nphase angles \u00b1\u03c0, and the complex logarithm is invoked.\nrc = tick2ret(p,Method=\"continuous\")\nrc =\n  -1.0986 + 0.0000i\n   0.6931 + 3.1416i\n  -0.6931 + 0.0000i\n   0.0000 - 3.1416i\nThis table summarizes the recursions.\n2\nPerforming Common Financial Tasks\n2-34\n"
  },
  {
    "element_type": "code",
    "content": "p = -5:0.01:5;\nhold \non\nplot(p,real(log(p)),\n\"b\"\n)\nplot(p,imag(log(p)),\n\"r\"\n)\nxticks(-5:5)\nxlabel(\n\"Price (p)\"\n)\nylabel(\n\"Ordinate\"\n)\nlegend([\n\"real(log(p))\"\n \n\"imag(log(p))\"\n],AutoUpdate=false)\ngrid \nminor",
    "page_number": 78,
    "bbox": [
      90.00346374511719,
      415.8338623046875,
      393.4204406738281,
      512.7007446289062
    ],
    "caption": null,
    "context": "The real part shows the trend in the absolute price series. When |pc(t \u2212 1)| < |pc(t)|, that is, when\nprices move away from zero, rc(t) has a positive real part. When |pc(t \u2212 1)| > |pc(t)|, that is, when\nprices move toward zero, rc(t) has a negative real part. When |pc(t \u2212 1)| = |pc(t)|, that is, when the\nabsolute size of the prices is unchanged, rc(t) has a zero real part. For positive price series, wh"
  },
  {
    "element_type": "code",
    "content": "p = [-4; 2];\nplot(p,real(log(p)),\n\"bo-\"\n,MarkerFaceColor=\n\"b\"\n)\nplot(p,imag(log(p)),\n\"ro-\"\n,MarkerFaceColor=\n\"r\"\n)\nhold \noff",
    "page_number": 79,
    "bbox": [
      90.00395202636719,
      560.5853881835938,
      339.2499694824219,
      603.452392578125
    ],
    "caption": null,
    "context": "Due to the following identity\nrc(t) = log\npc(t)\npc(t \u22121)\n\u00a0\u00a0\u00a0\u00a0=log(pc(t)) \u2212log(pc(t \u22121))\n\u00a0\u00a0\u00a0\u00a0=\u00a0[real(log(pc(t)) \u2212real(log(pc(t \u22121)))]\n\u2a09\nblue curve\n+ [imag(log(pc(t))) \u2212imag(log(pc(t \u22121)))]\n\u2a09\nred curve\n\u22c5i,\nyou can read the real part of a continuous return as a difference in ordinates on the blue graph, and\nyou can read the i"
  },
  {
    "element_type": "code",
    "content": "-0.6667 + 0.0000i\n  -3.0000 + 0.0000i\n  -0.5000 + 0.0000i\n  -2.0000 - 0.0000i",
    "page_number": 80,
    "bbox": [
      89.99638366699219,
      515.7523193359375,
      192.93838500976562,
      558.6192626953125
    ],
    "caption": null,
    "context": "ntinuous returns rc(t) = log(pc(t)/pc(t \u2212 1) ) to simple returns rs = (ps(t)/ps(t \u2212 1)\n\u2212 1) by the following computation, the result is the same simple returns series as before.\nrs = exp(rc) - 1\nrs =\n  -0.6667 + 0.0000i\n  -3.0000 + 0.0000i\n  -0.5000 + 0.0000i\n  -2.0000 - 0.0000i\nYou can complete the round trip, which results in the expected price series, by the computation\npc = ret2tick(rc,Method=\"continuous\",StartPrice=3)\npc =\n   3.0000 + 0.0000i\n   1.0000 + 0.0000i\n  -2.000"
  },
  {
    "element_type": "code",
    "content": "pc = ret2tick(rc,Method=\n\"continuous\"\n,StartPrice=3)",
    "page_number": 80,
    "bbox": [
      90.00341796875,
      588.9522705078125,
      360.91241455078125,
      599.4192504882812
    ],
    "caption": null,
    "context": "If pc(t \u2212 1) = \u22124 and pc(t) = 2, the real part of log(pc(t)) \u2212 log(pc(t \u2212 1)) is negative (line slopes\ndown), corresponding to a decrease in absolute price. The imaginary part is 0 \u2013 \u03c0 = \u2212\u03c0,\ncorresponding to a change of sign from negative to positive. "
  },
  {
    "element_type": "code",
    "content": "3.0000 + 0.0000i\n   1.0000 + 0.0000i\n  -2.0000 + 0.0000i\n  -1.0000 + 0.0000i\n   1.0000 + 0.0000i",
    "page_number": 80,
    "bbox": [
      90.00340270996094,
      630.3523559570312,
      192.94540405273438,
      684.01953125
    ],
    "caption": null,
    "context": "0.0000i\n  -0.5000 + 0.0000i\n  -2.0000 - 0.0000i\nYou can complete the round trip, which results in the expected price series, by the computation\npc = ret2tick(rc,Method=\"continuous\",StartPrice=3)\npc =\n   3.0000 + 0.0000i\n   1.0000 + 0.0000i\n  -2.0000 + 0.0000i\n  -1.0000 + 0.0000i\n   1.0000 + 0.0000i\n Returns with Negative Prices\n2-37\n"
  },
  {
    "element_type": "code",
    "content": "Complex continuous returns are a necessary intermediary when considering logarithms of negative\nprice ratios. \ntick2ret\n computes a continuous complex extension of the function on the positive real\naxis. The logarithm maintains the additivity property, used when computing multiperiod returns.",
    "page_number": 81,
    "bbox": [
      90.00199890136719,
      118.56159973144531,
      552.5418701171875,
      154.1916046142578
    ],
    "caption": null,
    "context": "Conclusion\nComplex continuous returns are a necessary intermediary when considering logarithms of negative\nprice ratios. tick2ret computes a continuous complex extension of the function on the positive real\naxis. The logarithm maintains the additivity property, used when computing multiperiod returns.\nBecause of the extensible logarithm implemented in MATLAB, current implementations of\nComputational Finance tools that accept prices and returns behave logically with negative prices. The\ninterpretation"
  },
  {
    "element_type": "code",
    "content": "See Also\ntick2ret\n | \nret2tick",
    "page_number": 81,
    "bbox": [
      90.0020751953125,
      227.9700927734375,
      195.0720977783203,
      255.3916015625
    ],
    "caption": null,
    "context": "Conclusion\nComplex continuous returns are a necessary intermediary when considering logarithms of negative\nprice ratios. tick2ret computes a continuous complex extension of the function on the positive real\naxis. The logarithm mai"
  },
  {
    "element_type": "code",
    "content": "To illustrate toolbox Black-Scholes functions (\nblsprice\n, \nblsdelta\n, \nblsgamma\n, \nblsvega\n, and\nblslambda\n) this example computes the call and put prices of a European option and its delta,\ngamma, lambda, and implied volatility. The asset price is $100.00, the exercise price is $95.00, the\nrisk-free interest rate is 10%, the time to maturity is 0.25 years, the volatility is 0.50, and the\ndividend rate is 0.",
    "page_number": 84,
    "bbox": [
      90.0,
      153.6907958984375,
      541.8399047851562,
      213.32080078125
    ],
    "caption": null,
    "context": "\u2022\nTrading is a continuous process.\n\u2022\nThe risk-free interest rate is constant and remains the same for all maturities.\nIf any of these assumptions is untrue, Black-Scholes may not be an appropriate model.\nTo illustrate toolbox Black-Scholes functions (blsprice, blsdelta, blsgamma, blsvega, and\nblslambda) this example computes the call and put prices of a European option and its delta,\ngamma, lambda, and implied volatility. The asset price is $100.00, the exercise price is $95.00, the\nrisk-free interest rate is 10%, the time to maturity is 0.25 years, the volatility is 0.50, and the\ndividend rate is 0.\n[Opt"
  },
  {
    "element_type": "code",
    "content": "[OptCall, OptPut] = blsprice(100, 95, 0.10, 0.25, 0.50, 0)",
    "page_number": 84,
    "bbox": [
      90.00401306152344,
      223.0171356201172,
      404.24798583984375,
      233.48414611816406
    ],
    "caption": null,
    "context": "plied volatility. The asset price is $100.00, the exercise price is $95.00, the\nrisk-free interest rate is 10%, the time to maturity is 0.25 years, the volatility is 0.50, and the\ndividend rate is 0.\n[OptCall, OptPut] = blsprice(100, 95, 0.10, 0.25, 0.50, 0)\nOptCall = \n13.6953\nOptPut = \n6.3497\n[CallVal, PutVal] = blsdelta(100, 95, 0.10, 0.25, 0.50, 0)\nCallVal = \n0.6665\nPutVal = \n-0.3335\nGammaVal = blsgamma(100, 95, 0.10, 0.25, 0.50, 0)\nGammaVal = \n0.0145\n"
  },
  {
    "element_type": "code",
    "content": "[CallVal, PutVal] = blsdelta(100, 95, 0.10, 0.25, 0.50, 0)",
    "page_number": 84,
    "bbox": [
      90.00401306152344,
      304.80462646484375,
      404.24798583984375,
      315.2716064453125
    ],
    "caption": null,
    "context": "est rate is 10%, the time to maturity is 0.25 years, the volatility is 0.50, and the\ndividend rate is 0.\n[OptCall, OptPut] = blsprice(100, 95, 0.10, 0.25, 0.50, 0)\nOptCall = \n13.6953\nOptPut = \n6.3497\n[CallVal, PutVal] = blsdelta(100, 95, 0.10, 0.25, 0.50, 0)\nCallVal = \n0.6665\nPutVal = \n-0.3335\nGammaVal = blsgamma(100, 95, 0.10, 0.25, 0.50, 0)\nGammaVal = \n0.0145\nVegaVal = blsvega(100, 95, 0.10, 0.25, 0.50, 0)\nVegaVal = \n18.1843\n[LamCall, LamPut] = blslambd"
  },
  {
    "element_type": "code",
    "content": "GammaVal = blsgamma(100, 95, 0.10, 0.25, 0.50, 0)",
    "page_number": 84,
    "bbox": [
      90.00404357910156,
      386.5921325683594,
      355.48602294921875,
      397.0591125488281
    ],
    "caption": null,
    "context": "ate is 0.\n[OptCall, OptPut] = blsprice(100, 95, 0.10, 0.25, 0.50, 0)\nOptCall = \n13.6953\nOptPut = \n6.3497\n[CallVal, PutVal] = blsdelta(100, 95, 0.10, 0.25, 0.50, 0)\nCallVal = \n0.6665\nPutVal = \n-0.3335\nGammaVal = blsgamma(100, 95, 0.10, 0.25, 0.50, 0)\nGammaVal = \n0.0145\nVegaVal = blsvega(100, 95, 0.10, 0.25, 0.50, 0)\nVegaVal = \n18.1843\n[LamCall, LamPut] = blslambda(100, 95, 0.10, 0.25, 0.50, 0)\nLamCall = \n4.8664\nLamPut = \n-5.2528\nTo summarize:\n\u2022\nTh"
  },
  {
    "element_type": "code",
    "content": "VegaVal = blsvega(100, 95, 0.10, 0.25, 0.50, 0)",
    "page_number": 84,
    "bbox": [
      90.00404357910156,
      437.5171203613281,
      344.6500244140625,
      447.9841003417969
    ],
    "caption": null,
    "context": "OptCall = \n13.6953\nOptPut = \n6.3497\n[CallVal, PutVal] = blsdelta(100, 95, 0.10, 0.25, 0.50, 0)\nCallVal = \n0.6665\nPutVal = \n-0.3335\nGammaVal = blsgamma(100, 95, 0.10, 0.25, 0.50, 0)\nGammaVal = \n0.0145\nVegaVal = blsvega(100, 95, 0.10, 0.25, 0.50, 0)\nVegaVal = \n18.1843\n[LamCall, LamPut] = blslambda(100, 95, 0.10, 0.25, 0.50, 0)\nLamCall = \n4.8664\nLamPut = \n-5.2528\nTo summarize:\n\u2022\nThe option call price OptCall = $13.70\n\u2022\nThe option put price OptPut "
  },
  {
    "element_type": "code",
    "content": "[LamCall, LamPut] = blslambda(100, 95, 0.10, 0.25, 0.50, 0)",
    "page_number": 84,
    "bbox": [
      90.00404357910156,
      488.4421081542969,
      409.666015625,
      498.9090881347656
    ],
    "caption": null,
    "context": "0, 95, 0.10, 0.25, 0.50, 0)\nCallVal = \n0.6665\nPutVal = \n-0.3335\nGammaVal = blsgamma(100, 95, 0.10, 0.25, 0.50, 0)\nGammaVal = \n0.0145\nVegaVal = blsvega(100, 95, 0.10, 0.25, 0.50, 0)\nVegaVal = \n18.1843\n[LamCall, LamPut] = blslambda(100, 95, 0.10, 0.25, 0.50, 0)\nLamCall = \n4.8664\nLamPut = \n-5.2528\nTo summarize:\n\u2022\nThe option call price OptCall = $13.70\n\u2022\nThe option put price OptPut = $6.35\n\u2022\ndelta for a call CallVal = 0.6665 and delta for a put PutVal = -0.333"
  },
  {
    "element_type": "code",
    "content": "\u2022\nThe option call price \nOptCall\n = \n$13.70",
    "page_number": 84,
    "bbox": [
      90.0000228881836,
      592.3406982421875,
      293.3800354003906,
      603.970703125
    ],
    "caption": null,
    "context": "\u2022\nTrading is a continuous process.\n\u2022\nThe risk-free interest rate is constant and remains the same for all maturities.\nIf any of these assumptions is untrue, Black-Scholes may not be an appropriate model.\nTo illustrate toolbox Black-Scholes fun"
  },
  {
    "element_type": "code",
    "content": "\u2022\nThe option put price \nOptPut\n = \n$6.35",
    "page_number": 84,
    "bbox": [
      90.00003051757812,
      608.4865112304688,
      280.35003662109375,
      620.1165161132812
    ],
    "caption": null,
    "context": "\u2022\nTrading is a continuous process.\n\u2022\nThe risk-free interest rate is constant and remains the same for all maturities.\nIf any of these assumptions is untrue, Black-Scholes may not be an appropriate model.\nTo illustrate toolbox Black-Scholes "
  },
  {
    "element_type": "code",
    "content": "\u2022\ndelta for a call \nCallVal\n = \n0.6665\n and delta for a put PutVal = \n-0.3335",
    "page_number": 84,
    "bbox": [
      90.00003051757812,
      624.63232421875,
      440.6699523925781,
      636.2623291015625
    ],
    "caption": null,
    "context": "\u2022\nTrading is a continuous process.\n\u2022\nThe risk-free interest rate is constant and remains the same for all maturities.\nIf any of these assumptions is untrue, Black-Scholes may not be an appropriate model.\nTo illustrate toolbox Black-Scholes functions (blsprice, blsdelta, blsgam"
  },
  {
    "element_type": "code",
    "content": "\u2022\ngamma \nGammaVal\n = \n0.0145",
    "page_number": 84,
    "bbox": [
      90.00006103515625,
      640.7781372070312,
      238.93006896972656,
      652.4081420898438
    ],
    "caption": null,
    "context": "\u2022\nTrading is a continuous process.\n\u2022\nThe risk-free interest rate is constant and remains the same for all maturities.\nIf any of these assumptions is untrue, Black-Scholes may not be an appropriate model.\nTo illustrate toolbox Bl"
  },
  {
    "element_type": "code",
    "content": "\u2022\nvega \nVegaVal\n = \n18.1843",
    "page_number": 84,
    "bbox": [
      90.00006103515625,
      656.9239501953125,
      226.92007446289062,
      668.553955078125
    ],
    "caption": null,
    "context": "\u2022\nTrading is a continuous process.\n\u2022\nThe risk-free interest rate is constant and remains the same for all maturities.\nIf any of these assumptions is untrue, Black-Scholes may not be an appropriate model.\nTo illustrate toolbox B"
  },
  {
    "element_type": "code",
    "content": "\u2022\nlambda for a call \nLamCal\nl = \n4.8664\n and lambda for a put \nLamPut\n = \n\u20135.2528",
    "page_number": 84,
    "bbox": [
      90.00004577636719,
      673.0697631835938,
      465.7899169921875,
      684.6997680664062
    ],
    "caption": null,
    "context": "\u2022\nTrading is a continuous process.\n\u2022\nThe risk-free interest rate is constant and remains the same for all maturities.\nIf any of these assumptions is untrue, Black-Scholes may not be an appropriate model.\nTo illustrate toolbox Black-Scholes functions (blsprice, blsdelta, blsgamma, "
  },
  {
    "element_type": "code",
    "content": "As a computation check, find the implied volatility of the option using the call option price from\nblsprice\n.",
    "page_number": 84,
    "bbox": [
      90.0,
      695.3614501953125,
      526.7900390625,
      718.991455078125
    ],
    "caption": null,
    "context": "\n\u2022\ndelta for a call CallVal = 0.6665 and delta for a put PutVal = -0.3335\n\u2022\ngamma GammaVal = 0.0145\n\u2022\nvega VegaVal = 18.1843\n\u2022\nlambda for a call LamCall = 4.8664 and lambda for a put LamPut = \u20135.2528\nAs a computation check, find the implied volatility of the option using the call option price from\nblsprice.\n Pricing and Analyzing Equity Derivatives\n2-41\n"
  },
  {
    "element_type": "code",
    "content": "Volatility = blsimpv(100, 95, 0.10, 0.25, OptCall)",
    "page_number": 85,
    "bbox": [
      90.0,
      93.02544403076172,
      360.8999938964844,
      103.49243927001953
    ],
    "caption": null,
    "context": "Volatility = blsimpv(100, 95, 0.10, 0.25, OptCall)\nVolatility = \n0.5000\nThe function returns an implied volatility of 0.500, the original blsprice input.\nBinomial Model\nThis example shows how to price an American call option using a binomial model.\nTh"
  },
  {
    "element_type": "code",
    "content": "The function returns an implied volatility of \n0.500\n, the original \nblsprice\n input.",
    "page_number": 85,
    "bbox": [
      89.99800109863281,
      148.16159057617188,
      461.33795166015625,
      159.79159545898438
    ],
    "caption": null,
    "context": "Volatility = blsimpv(100, 95, 0.10, 0.25, OptCall)\nVolatility = \n0.5000\nThe function returns an implied volatility of 0.500, the original blsprice input.\nBinomial Model\nThis example shows how to price an American call option using a binomial model.\nThe binomial model for pricing optio"
  },
  {
    "element_type": "code",
    "content": "This example prices an American call option using a binomial model. The asset price is $100.00, the\nexercise price is $95.00, the risk-free interest rate is 10%, and the time to maturity is 0.25 years. The\nfunction \nbinprice\n computes the tree in increments of 0.05 years, so there are 0.25/0.05 = 5 periods\nin the example. The volatility is 0.50, this is a call (\nflag\n = \n1\n), the dividend rate is 0, and it pays a\ndividend of $5.00 after three periods (an ex-dividend date).",
    "page_number": 85,
    "bbox": [
      89.99789428710938,
      326.1615905761719,
      554.8777465820312,
      385.7916259765625
    ],
    "caption": null,
    "context": "quent two values each, and so on over\ntime, is known as \"building a binomial tree.\". This model applies to American options, which can be\nexercised any time up to and including their expiration date.\nThis example prices an American call option using a binomial model. The asset price is $100.00, the\nexercise price is $95.00, the risk-free interest rate is 10%, and the time to maturity is 0.25 years. The\nfunction binprice computes the tree in increments of 0.05 years, so there are 0.25/0.05 = 5 periods\nin the example. The volatility is 0.50, this is a call (flag = 1), the dividend rate is 0, and it pays a\ndividend of $5.00 after three periods (an ex-dividend date).\n[StockPrice, OptionPrice] = binprice(100, 95, 0.10, 0.25, ... \n0.05,  0.50, 1, 0, 5.0, 3)\nStockPrice = 6\u00d76\n  100.0000  111.2713  123.8732  137.9629  148.6915  166.2807\n         0   89.9677  100.0495  111.32"
  },
  {
    "element_type": "code",
    "content": "[StockPrice, OptionPrice] = binprice(100, 95, 0.10, 0.25, \n...\n \n0.05,  0.50, 1, 0, 5.0, 3)",
    "page_number": 85,
    "bbox": [
      89.99588012695312,
      397.02545166015625,
      425.9478759765625,
      418.29241943359375
    ],
    "caption": null,
    "context": "o there are 0.25/0.05 = 5 periods\nin the example. The volatility is 0.50, this is a call (flag = 1), the dividend rate is 0, and it pays a\ndividend of $5.00 after three periods (an ex-dividend date).\n[StockPrice, OptionPrice] = binprice(100, 95, 0.10, 0.25, ... \n0.05,  0.50, 1, 0, 5.0, 3)\nStockPrice = 6\u00d76\n  100.0000  111.2713  123.8732  137.9629  148.6915  166.2807\n         0   89.9677  100.0495  111.3211  118.8981  132.9629\n         0         0   80.9994   90.0175   95.0744  106.3211\n  "
  },
  {
    "element_type": "code",
    "content": "100.0000  111.2713  123.8732  137.9629  148.6915  166.2807\n         0   89.9677  100.0495  111.3211  118.8981  132.9629\n         0         0   80.9994   90.0175   95.0744  106.3211\n         0         0         0   72.9825   76.0243   85.0175\n         0         0         0         0   60.7913   67.9825\n         0         0         0         0         0   54.3608",
    "page_number": 85,
    "bbox": [
      89.99588012695312,
      451.025390625,
      415.07586669921875,
      515.4923095703125
    ],
    "caption": null,
    "context": "vidend rate is 0, and it pays a\ndividend of $5.00 after three periods (an ex-dividend date).\n[StockPrice, OptionPrice] = binprice(100, 95, 0.10, 0.25, ... \n0.05,  0.50, 1, 0, 5.0, 3)\nStockPrice = 6\u00d76\n  100.0000  111.2713  123.8732  137.9629  148.6915  166.2807\n         0   89.9677  100.0495  111.3211  118.8981  132.9629\n         0         0   80.9994   90.0175   95.0744  106.3211\n         0         0         0   72.9825   76.0243   85.0175\n         0         0         0         0   60.7913   67.9825\n         0         0         0         0         0   54.3608\nOptionPrice = 6\u00d76\n   12.1011   19.1708   29.3470   42.9629   54.1653   71.2807\n         0    5.3068    9.4081   16.3211   24.3719   37.9629\n         0         0    1.3481    2.7402    5.5698   11.3211"
  },
  {
    "element_type": "code",
    "content": "12.1011   19.1708   29.3470   42.9629   54.1653   71.2807\n         0    5.3068    9.4081   16.3211   24.3719   37.9629\n         0         0    1.3481    2.7402    5.5698   11.3211\n         0         0         0         0         0         0\n         0         0         0         0         0         0\n         0         0         0         0         0         0",
    "page_number": 85,
    "bbox": [
      89.99588012695312,
      559.0252685546875,
      415.07586669921875,
      623.4921875
    ],
    "caption": null,
    "context": "        0         0         0   72.9825   76.0243   85.0175\n         0         0         0         0   60.7913   67.9825\n         0         0         0         0         0   54.3608\nOptionPrice = 6\u00d76\n   12.1011   19.1708   29.3470   42.9629   54.1653   71.2807\n         0    5.3068    9.4081   16.3211   24.3719   37.9629\n         0         0    1.3481    2.7402    5.5698   11.3211\n         0         0         0         0         0         0\n         0         0         0         0         0         0\n         0         0         0         0         0         0\nThe output from the binomial function is a binary tree. Read the StockPrice matrix this way:\ncolumn 1 shows the price for period 0, column 2 shows the up and down prices for period 1, column 3\nshows t"
  },
  {
    "element_type": "code",
    "content": "The output from the binomial function is a binary tree. Read the \nStockPrice\n matrix this way:\ncolumn 1 shows the price for period 0, column 2 shows the up and down prices for period 1, column 3\nshows the up-up, up-down, and down-down prices for period 2, and so on. Ignore the zeros. The\nOptionPrice\n matrix gives the associated option value for each node in the price tree. Ignore the\nzeros that correspond to a zero in the price tree.",
    "page_number": 85,
    "bbox": [
      89.99581909179688,
      646.5614013671875,
      557.0157470703125,
      706.19140625
    ],
    "caption": null,
    "context": "5.5698   11.3211\n         0         0         0         0         0         0\n         0         0         0         0         0         0\n         0         0         0         0         0         0\nThe output from the binomial function is a binary tree. Read the StockPrice matrix this way:\ncolumn 1 shows the price for period 0, column 2 shows the up and down prices for period 1, column 3\nshows the up-up, up-down, and down-down prices for period 2, and so on. Ignore the zeros. The\nOptionPrice matrix gives the associated option value for each node in the price tree. Ignore the\nzeros that correspond to a zero in the price tree.\n2\nPerforming Common Financial Tasks\n2-42\n"
  },
  {
    "element_type": "code",
    "content": "See Also\nblsprice\n | \nbinprice\n | \nblkimpv\n | \nblkprice\n | \nblsdelta\n | \nblsgamma\n | \nblsimpv\n | \nblslambda\n |\nblsrho\n | \nblstheta\n | \nblsvega\n | \nopprofit",
    "page_number": 86,
    "bbox": [
      89.99697875976562,
      92.77008056640625,
      536.3970336914062,
      132.1916046142578
    ],
    "caption": null,
    "context": "See Also\nblsprice | binprice | blkimpv | blkprice | blsdelta | blsgamma | blsimpv | blslambda |\nblsrho | blstheta | blsvega | opprofit\nRelated Examples\n\u2022\n\u201cHandle and Convert Dates\u201d on page 2-2\n\u2022\n\u201cGreek-Neutral Portfolios of European Stock Options\u201d on page 10-14\n\u2022\n\u201cPlotting Sensitivities of an Option\u201d on page 10-25\n\u2022\n\u201cPlotting Sensitivities of a Portfoli"
  },
  {
    "element_type": "code",
    "content": "Although primarily designed for life insurance applications, the life tables functions\n(\nlifetableconv\n, \nlifetablefit\n, and \nlifetablegen\n can also be used by social scientists,\nbehavioral psychologists, public health officials, and medical researchers.",
    "page_number": 87,
    "bbox": [
      89.99749755859375,
      513.8411865234375,
      517.3773193359375,
      549.47119140625
    ],
    "caption": null,
    "context": "of age.\nFinancial Toolbox can handle arbitrary life table data supporting several standard models of mortality\nand provides various interpolation methods to calibrate and analyze the life table data.\nAlthough primarily designed for life insurance applications, the life tables functions\n(lifetableconv, lifetablefit, and lifetablegen can also be used by social scientists,\nbehavioral psychologists, public health officials, and medical researchers.\nLife Tables Theory\nLife tables are based on hazard functions and survival functions which are, in turn, derived from\nprobability distributions. Specifically, given a continuous probability distribution, its"
  },
  {
    "element_type": "code",
    "content": "The survival function, (\ns(x)\n), which characterizes the probability that an individual lives beyond a\nspecified age\n x\n > \n0\n, is",
    "page_number": 87,
    "bbox": [
      89.99996185302734,
      695.3616333007812,
      534.599853515625,
      718.9916381835938
    ],
    "caption": null,
    "context": "About Life Tables\nLife tables are used for life insurance and work with the probability distribution of human mortality.\nThis distribution, which is age-dependent, has several characteristic features that are consequences\nof biological, cultural, and behavioral factors. Usually, the practitioners of life studies use life tables\n"
  },
  {
    "element_type": "code",
    "content": "which is the probability a person at age \nx\n dies by age \nx\n + \n1\n (where \nx\n is in years). The discrete survival\nfunction is presented in terms of an initial number of survivors at birth called the life table radix\n(which is usually 100,000 individuals) and is denoted as",
    "page_number": 88,
    "bbox": [
      89.9998779296875,
      386.5784606933594,
      557.689697265625,
      422.2084655761719
    ],
    "caption": null,
    "context": "s(x) = Pr[X > x]\n= 1 \u2212F(x)\nFor a continuous probability distribution, the hazard function is a function of the survival function\nwith\nh(x) = lim\n\u0394x\n0\nPr[x \u2264X < x + \u0394x X \u2265x]\n\u0394x\n= \u2212\n1\ns(x)\nd(s(x))\ndx\nand the survival functions is a function of the hazard function with\ns(x) = exp \u2212\u222b\n0\nx\nh(\u03be)d\u03be\nLife table models generally specify either the hazard function or the survival function. However, life\ntables are discrete and work with discrete versions of the hazard and surviva"
  },
  {
    "element_type": "code",
    "content": "with radix \nl\n0\n = \n100000\n. This number, \nl\nx\n, represents the number of individuals out of 100,000 at birth\nwho are still alive at age \nx\n.",
    "page_number": 88,
    "bbox": [
      89.99600219726562,
      454.2200622558594,
      550.4606323242188,
      477.8500671386719
    ],
    "caption": null,
    "context": "s(x) = Pr[X > x]\n= 1 \u2212F(x)\nFor a continuous probability distribution, the hazard function is a function of the survival function\nwith\nh(x) = lim\n\u0394x\n0\nPr[x \u2264X < x + \u0394x X \u2265x]\n\u0394x\n= \u2212\n1\ns(x)\nd(s(x))\ndx\nand the survival functions is a function of the hazard function with\ns(x) = exp \u2212\u222b\n0\nx\nh(\u03be)d\u03be\nLife table models generally specify either the ha"
  },
  {
    "element_type": "code",
    "content": "See Also\nlifetableconv\n | \nlifetablefit\n | \nlifetablegen",
    "page_number": 88,
    "bbox": [
      89.99900817871094,
      583.2700805664062,
      330.239013671875,
      610.691650390625
    ],
    "caption": null,
    "context": "s(x) = Pr[X > x]\n= 1 \u2212F(x)\nFor a continuous probability distribution, the hazard function is a function of the survival function\nwith\nh(x) = lim\n\u0394x\n0\nPr[x \u2264X < x + \u0394x X \u2265x]\n\u0394x\n= \u2212\n1\ns(x)\nd(s(x))\ndx\nand the survival functions is a function of the hazard fun"
  },
  {
    "element_type": "code",
    "content": "load \nus_lifetable_2009",
    "page_number": 89,
    "bbox": [
      89.9990005493164,
      175.69908142089844,
      209.1949920654297,
      186.1660919189453
    ],
    "caption": null,
    "context": "Case Study for Life Tables Analysis\nThis example shows how to use the basic workflow for life tables.\nLoad the life table data file.\nload us_lifetable_2009\nCalibrate life table from survival data with the default heligman-p"
  },
  {
    "element_type": "code",
    "content": "Calibrate life table from survival data with the default \nheligman-pollard\n parametric model.",
    "page_number": 89,
    "bbox": [
      89.99500274658203,
      195.90892028808594,
      523.10498046875,
      207.53892517089844
    ],
    "caption": null,
    "context": "Case Study for Life Tables Analysis\nThis example shows how to use the basic workflow for life tables.\nLoad the life table data file.\nload us_lifetable_2009\nCalibrate life table from survival data with the default heligman-pollard parametric model.\na = lifetablefit(x, lx);\nGenerate life table series from the calibrated mortality model.\nqx = lifetablegen((0:100), a);\ndisplay(qx(1:40,:))\n    0.0063    0.0069    0.0057\n    0.0005    0.0006    0.0004\n"
  },
  {
    "element_type": "code",
    "content": "a = lifetablefit(x, lx);",
    "page_number": 89,
    "bbox": [
      89.99801635742188,
      216.4990692138672,
      220.02999877929688,
      226.96607971191406
    ],
    "caption": null,
    "context": " shows how to use the basic workflow for life tables.\nLoad the life table data file.\nload us_lifetable_2009\nCalibrate life table from survival data with the default heligman-pollard parametric model.\na = lifetablefit(x, lx);\nGenerate life table series from the calibrated mortality model.\nqx = lifetablegen((0:100), a);\ndisplay(qx(1:40,:))\n    0.0063    0.0069    0.0057\n    0.0005    0.0006    0.0004\n    0.0002    0.0003   "
  },
  {
    "element_type": "code",
    "content": "qx = lifetablegen((0:100), a);\ndisplay(qx(1:40,:))",
    "page_number": 89,
    "bbox": [
      90.00103759765625,
      257.2990417480469,
      252.54103088378906,
      278.5660095214844
    ],
    "caption": null,
    "context": " us_lifetable_2009\nCalibrate life table from survival data with the default heligman-pollard parametric model.\na = lifetablefit(x, lx);\nGenerate life table series from the calibrated mortality model.\nqx = lifetablegen((0:100), a);\ndisplay(qx(1:40,:))\n    0.0063    0.0069    0.0057\n    0.0005    0.0006    0.0004\n    0.0002    0.0003    0.0002\n    0.0002    0.0002    0.0002\n    0.0001    0.0001    0.0001\n    0.0001    0.0001    0.0001\n    0.0001    "
  },
  {
    "element_type": "code",
    "content": "0.0063    0.0069    0.0057\n    0.0005    0.0006    0.0004\n    0.0002    0.0003    0.0002\n    0.0002    0.0002    0.0002\n    0.0001    0.0001    0.0001\n    0.0001    0.0001    0.0001\n    0.0001    0.0001    0.0001\n    0.0001    0.0001    0.0001\n    0.0001    0.0001    0.0001\n    0.0001    0.0001    0.0001\n    0.0001    0.0001    0.0001\n    0.0001    0.0001    0.0001\n    0.0002    0.0002    0.0001\n    0.0002    0.0002    0.0002\n    0.0002    0.0003    0.0002\n    0.0003    0.0004    0.0002\n    0.0004    0.0005    0.0002\n    0.0005    0.0006    0.0003\n    0.0006    0.0008    0.0003\n    0.0007    0.0009    0.0003\n    0.0008    0.0011    0.0003\n    0.0008    0.0012    0.0004\n    0.0009    0.0013    0.0004\n    0.0009    0.0014    0.0005\n    0.0010    0.0014    0.0005\n    0.0010    0.0015    0.0005\n    0.0010    0.0015    0.0006\n    0.0010    0.0015    0.0006\n    0.0010    0.0015    0.0007\n    0.0010    0.0014    0.0007\n    0.0011    0.0014    0.0007\n    0.0011    0.0014    0.0008\n    0.0011    0.0014    0.0008\n    0.0011    0.0014    0.0009\n    0.0011    0.0014    0.0009\n    0.0012    0.0015    0.0010\n    0.0012    0.0015    0.0011\n    0.0013    0.0016    0.0011\n    0.0014    0.0017    0.0012\n    0.0015    0.0018    0.0013",
    "page_number": 89,
    "bbox": [
      90.00103759765625,
      287.4253234863281,
      252.54103088378906,
      719.0924072265625
    ],
    "caption": null,
    "context": "al data with the default heligman-pollard parametric model.\na = lifetablefit(x, lx);\nGenerate life table series from the calibrated mortality model.\nqx = lifetablegen((0:100), a);\ndisplay(qx(1:40,:))\n    0.0063    0.0069    0.0057\n    0.0005    0.0006    0.0004\n    0.0002    0.0003    0.0002\n    0.0002    0.0002    0.0002\n    0.0001    0.0001    0.0001\n    0.0001    0.0001    0.0001\n    0.0001    0.0001    0.0001\n    0.0001    0.0001    0.0001\n    0.0001    0.0001    0.0001\n    0.0001    0.0001    0.0001\n    0.0001    0.0001    0.0001\n    0.0001    0.0001    0.0001\n    0.0002    0.0002    0.0001\n    0.0002    0.0002    0.0002\n    0.0002    0.0003    0.0002\n    0.0003    0.0004    0.0002\n    0.0004    0.0005    0.0002\n    0.0005    0.0006    0.0003\n    0.0006    0.0008    0.0003\n    0.0007    0.0009    0.0003\n    0.0008    0.0011    0.0003\n    0.0008    0.0012    0.0004\n    0.0009    0.0013    0.0004\n    0.0009    0.0014    0.0005\n    0.0010    0.0014    0.0005\n    0.0010    0.0015    0.0005\n    0.0010    0.0015    0.0006\n    0.0010    0.0015    0.0006\n    0.0010    0.0015    0.0007\n    0.0010    0.0014    0.0007\n    0.0011    0.0014    0.0007\n    0.0011    0.0014    0.0008\n    0.0011    0.0014    0.0008\n    0.0011    0.0014    0.0009\n    0.0011    0.0014    0.0009\n    0.0012    0.0015    0.0010\n    0.0012    0.0015    0.0011\n    0.0013    0.0016    0.0011\n    0.0014    0.0017    0.0012\n    0.0015    0.0018    0.0013\n2\nPerforming Common Financial Tasks\n2-46\n"
  },
  {
    "element_type": "code",
    "content": "Plot the \nqx\n series and display the legend. The series \nqx\n is the conditional probability that a person at\nage \nx\n will die between age \nx\n and the next age in the series",
    "page_number": 90,
    "bbox": [
      89.99995422363281,
      92.96160125732422,
      553.769775390625,
      116.59159851074219
    ],
    "caption": null,
    "context": "Plot the qx series and display the legend. The series qx is the conditional probability that a person at\nage x will die between age x and the next age in the series\nplot((0:100), log(qx));\nlegend(series, 'location', 'southeast');\ntitle('Conditional Probability of Dying within One Year of Current Age');\nxlabel('Age');\nylabel('Log Probability');\nSee Also\nlifetableconv | l"
  },
  {
    "element_type": "code",
    "content": "plot((0:100), log(qx));\nlegend(series, \n'location'\n, \n'southeast'\n);\ntitle(\n'Conditional Probability of Dying within One Year of Current Age'\n);\nxlabel(\n'Age'\n);\nylabel(\n'Log Probability'\n);",
    "page_number": 90,
    "bbox": [
      90.00397491455078,
      126.02544403076172,
      485.5450134277344,
      179.69244384765625
    ],
    "caption": null,
    "context": "Plot the qx series and display the legend. The series qx is the conditional probability that a person at\nage x will die between age x and the next age in the series\nplot((0:100), log(qx));\nlegend(series, 'location', 'southeast');\ntitle('Conditional Probability of Dying within One Year of Current Age');\nxlabel('Age');\nylabel('Log Probability');\nSee Also\nlifetableconv | lifetablefit | life"
  },
  {
    "element_type": "code",
    "content": "See Also\nlifetableconv\n | \nlifetablefit\n | \nlifetablegen",
    "page_number": 90,
    "bbox": [
      89.99699401855469,
      470.4784851074219,
      330.24700927734375,
      497.8999938964844
    ],
    "caption": null,
    "context": "Plot the qx series and display the legend. The series qx is the conditional probability that a person at\nage x will die between age x and the next age in the series\nplot((0:100), log(qx));\nlegend(series, 'location', 'southeast');\ntitle('Conditional Probabi"
  },
  {
    "element_type": "code",
    "content": "This example uses one trading day of NASDAQ exchange data [2] on one security (INTC) in a sample\nprovided by LOBSTER [1] and included with Financial Toolbox\u2122 documentation in the zip file\nLOBSTER_SampleFile_INTC_2012-06-21_5.zip\n. Extract the contents of the zip file into your\ncurrent folder. The expanded files, including two CSV files of data and the text file\nLOBSTER_SampleFiles_ReadMe.txt\n, consume 93.7 MB of memory.",
    "page_number": 93,
    "bbox": [
      89.99807739257812,
      358.3350830078125,
      551.5479125976562,
      417.965087890625
    ],
    "caption": null,
    "context": "pacity, whereas external storage\noffers low-speed access but potentially unlimited capacity. Computation takes place in memory. The\ncomputer recalls data and results from external storage.\nData Files\nThis example uses one trading day of NASDAQ exchange data [2] on one security (INTC) in a sample\nprovided by LOBSTER [1] and included with Financial Toolbox\u2122 documentation in the zip file\nLOBSTER_SampleFile_INTC_2012-06-21_5.zip. Extract the contents of the zip file into your\ncurrent folder. The expanded files, including two CSV files of data and the text file\nLOBSTER_SampleFiles_ReadMe.txt, consume 93.7 MB of memory.\nunzip(\"LOBSTER_SampleFile_INTC_2012-06-21_5.zip\");\nThe data describes the intraday evolution of the limit order book (LOB), which is the record of market\norders (best price), limit orders (designated pr"
  },
  {
    "element_type": "code",
    "content": "unzip(\n\"LOBSTER_SampleFile_INTC_2012-06-21_5.zip\"\n);",
    "page_number": 93,
    "bbox": [
      90.00108337402344,
      427.57415771484375,
      360.9190979003906,
      438.0411376953125
    ],
    "caption": null,
    "context": "Machine Learning for Statistical Arbitrage I: Data Management\nand Visualization\nThis example shows techniques for managing, processing, and visualizing large amounts of financial\ndata in MATLAB\u00ae. It is part of a series of related examples on machine le"
  },
  {
    "element_type": "code",
    "content": "MSGFileName = \n\"INTC_2012-06-21_34200000_57600000_message_5.csv\"\n;   \n% Message file (description of\nLOBFileName = \n\"INTC_2012-06-21_34200000_57600000_orderbook_5.csv\"\n; \n% Data file",
    "page_number": 93,
    "bbox": [
      90.00396728515625,
      551.9387817382812,
      615.5770263671875,
      573.2057495117188
    ],
    "caption": null,
    "context": "Machine Learning for Statistical Arbitrage I: Data Management\nand Visualization\nThis example shows techniques for managing, processing, and visualizing large amounts of financial\ndata in MATLAB\u00ae. It is part of a series of related examples on machine learning for statistical\narbitrage (see \u201cMachine Learning Applications\u201d).\nWorking with Big Data\nFinancial markets, with electronic e"
  },
  {
    "element_type": "code",
    "content": "[ticker,rem] = strtok(MSGFileName,\n'_'\n);\ndate = strtok(rem,\n'_'\n);",
    "page_number": 93,
    "bbox": [
      90.0040283203125,
      584.3387451171875,
      301.3150329589844,
      605.605712890625
    ],
    "caption": null,
    "context": "Machine Learning for Statistical Arbitrage I: Data Management\nand Visualization\nThis example shows techniques for managing, processing, and visualizing large amounts of financial\ndata in MATLAB\u00ae. It is part of a series of related examples on machine learning for stati"
  },
  {
    "element_type": "code",
    "content": "Use \ntabularTextDatastore\n to create datastores for the message and data files. Because the files\ncontain data with different formats, create the datastores separately. Ignore generic column headers\n(for example, \nVarName1\n) by setting the \n'ReadVariableNames'\n name-value argument to \nfalse\n.\nReplace the headers with descriptive variable names obtained from",
    "page_number": 93,
    "bbox": [
      90.00497436523438,
      671.3616333007812,
      550.96484375,
      718.9916381835938
    ],
    "caption": null,
    "context": "Machine Learning for Statistical Arbitrage I: Data Management\nand Visualization\nThis example shows techniques for managing, processing, and visualizing large amounts of financial\ndata in MATLAB\u00ae. It is part of a series of related examples on machine learning for statistical\narbitrage (see \u201cMachine Learning Applications\u201d).\nWorking with Big Data\nFinancial markets, with electronic exchanges such as NASDAQ executing orders on a timescale of\nmilliseconds, generate vast amounts of data. Data streams can be mined for statistical arbitrage\nopportunities, but tr"
  },
  {
    "element_type": "code",
    "content": "LOBSTER_SampleFiles_ReadMe.txt\n. Set the \n'ReadSize'\n name-value argument to \n'file'\n to\nallow similarly formatted files to be appended to existing datastores at the end of each trading day.",
    "page_number": 94,
    "bbox": [
      90.0,
      92.96160125732422,
      543.3497314453125,
      116.59159851074219
    ],
    "caption": null,
    "context": "LOBSTER_SampleFiles_ReadMe.txt. Set the 'ReadSize' name-value argument to 'file' to\nallow similarly formatted files to be appended to existing datastores at the end of each trading day.\nDSMSG = tabularTextDatastore(MSGFileName,'ReadVariableNames',false,'ReadSize','file');\nDSMSG.VariableNames = [\"Time\",\"Type\",\"OrderID\",\"Size\",\"Price\",\"Direction\"];\nDSLOB = tabularTextDatastore(LOBFileName,"
  },
  {
    "element_type": "code",
    "content": "DSMSG = tabularTextDatastore(MSGFileName,\n'ReadVariableNames'\n,false,\n'ReadSize'\n,\n'file'\n);\nDSMSG.VariableNames = [\n\"Time\"\n,\n\"Type\"\n,\n\"OrderID\"\n,\n\"Size\"\n,\n\"Price\"\n,\n\"Direction\"\n];",
    "page_number": 94,
    "bbox": [
      90.00199890136719,
      126.71778106689453,
      555.9860229492188,
      147.9847869873047
    ],
    "caption": null,
    "context": "LOBSTER_SampleFiles_ReadMe.txt. Set the 'ReadSize' name-value argument to 'file' to\nallow similarly formatted files to be appended to existing datastores at the end of each trading day.\nDSMSG = tabularTextDatastore(MSGFileName,'ReadVariableNames',false,'ReadSize','file');\nDSMSG.VariableNames = [\"Time\",\"Type\",\"OrderID\",\"Size\",\"Price\",\"Direction\"];\nDSLOB = tabularTextDatastore(LO"
  },
  {
    "element_type": "code",
    "content": "DSLOB = tabularTextDatastore(LOBFileName,\n'ReadVariableNames'\n,false,\n'ReadSize'\n,\n'file'\n);\nDSLOB.VariableNames = [\n\"AskPrice1\"\n,\n\"AskSize1\"\n,\n\"BidPrice1\"\n,\n\"BidSize1\"\n,\n...\n                       \n\"AskPrice2\"\n,\n\"AskSize2\"\n,\n\"BidPrice2\"\n,\n\"BidSize2\"\n,\n...\n                       \n\"AskPrice3\"\n,\n\"AskSize3\"\n,\n\"BidPrice3\"\n,\n\"BidSize3\"\n,\n...\n                       \n\"AskPrice4\"\n,\n\"AskSize4\"\n,\n\"BidPrice4\"\n,\n\"BidSize4\"\n,\n...\n                       \n\"AskPrice5\"\n,\n\"AskSize5\"\n,\n\"BidPrice5\"\n,\n\"BidSize5\"\n];",
    "page_number": 94,
    "bbox": [
      90.00189208984375,
      159.11778259277344,
      555.9860229492188,
      223.58482360839844
    ],
    "caption": null,
    "context": "LOBSTER_SampleFiles_ReadMe.txt. Set the 'ReadSize' name-value argument to 'file' to\nallow similarly formatted files to be appended to existing datastores at the end of each trading day.\nDSMSG = tabularTextDatastore(MSGFileName,'ReadVariableNames',false,'ReadSize','file');\nDSMSG.VariableNames = [\"Time\",\"Type\",\"OrderID\",\"Size\",\"Price\",\"Direction\"];\nDSLOB = tabularTextDatastore(LOBFileName,'ReadVariableNames',false,'ReadSize','file');\nDSLOB.VariableNames = [\"AskPrice1\",\"AskSize1\",\"BidPrice1\",\"BidSize1\",...\n                       \"AskPrice2\",\"AskSize2\",\"BidPrice2\",\"BidSize2\",...\n                       \"AskPrice3\",\"AskSize3\",\"BidPrice3\",\"BidSize3\",...\n                       \"AskPrice4\",\"AskSize4"
  },
  {
    "element_type": "code",
    "content": "Create a combined datastore by selecting \nTime\n and the level 3 data.",
    "page_number": 94,
    "bbox": [
      89.99887084960938,
      234.62322998046875,
      403.3887939453125,
      246.25323486328125
    ],
    "caption": null,
    "context": "LOBSTER_SampleFiles_ReadMe.txt. Set the 'ReadSize' name-value argument to 'file' to\nallow similarly formatted files to be appended to existing datastores at the end of each trading day.\nDSMSG = tabularTextDatastore(MSGFileName,'ReadVariableNames',false,'ReadSize','file"
  },
  {
    "element_type": "code",
    "content": "TimeVariable = \n\"Time\"\n;\nDSMSG.SelectedVariableNames = TimeVariable;",
    "page_number": 94,
    "bbox": [
      89.99986267089844,
      256.37939453125,
      322.9738464355469,
      277.6463623046875
    ],
    "caption": null,
    "context": "LOBSTER_SampleFiles_ReadMe.txt. Set the 'ReadSize' name-value argument to 'file' to\nallow similarly formatted files to be appended to existing datastores at the end of each trading day.\nDSMSG = tabularTextDatastore(MSGFileName,'ReadVariableNames',false,'ReadSize','fil"
  },
  {
    "element_type": "code",
    "content": "LOB3Variables = [\n\"AskPrice1\"\n,\n\"AskSize1\"\n,\n\"BidPrice1\"\n,\n\"BidSize1\"\n,\n...\n                 \n\"AskPrice2\"\n,\n\"AskSize2\"\n,\n\"BidPrice2\"\n,\n\"BidSize2\"\n,\n...\n                 \n\"AskPrice3\"\n,\n\"AskSize3\"\n,\n\"BidPrice3\"\n,\n\"BidSize3\"\n];\nDSLOB.SelectedVariableNames = LOB3Variables;\n                               \nDS = combine(DSMSG,DSLOB);",
    "page_number": 94,
    "bbox": [
      89.99988555908203,
      288.77935791015625,
      447.6148986816406,
      353.2463073730469
    ],
    "caption": null,
    "context": "LOBSTER_SampleFiles_ReadMe.txt. Set the 'ReadSize' name-value argument to 'file' to\nallow similarly formatted files to be appended to existing datastores at the end of each trading day.\nDSMSG = tabularTextDatastore(MSGFileName,'ReadVariableNames',false,'ReadSize','file');\nDSMSG.VariableNames = [\"Time\",\"Type\",\"OrderID\",\"Size\",\"Price\",\"Direction\"];\nDSLOB = tabularTextDatastore(LOBFileName,'ReadVariableNames',false,'ReadSize','file');\nDSLOB.VariableNames = [\"AskPrice1\",\"AskSize1\",\"BidPrice1\",\"BidSize1\",...\n                       \"AskP"
  },
  {
    "element_type": "code",
    "content": "DSPreview = preview(DS);\nLOBPreview = DSPreview(:,1:5)",
    "page_number": 94,
    "bbox": [
      89.99993133544922,
      386.0408935546875,
      247.12191772460938,
      407.307861328125
    ],
    "caption": null,
    "context": "lectedVariableNames = LOB3Variables;\n                               \nDS = combine(DSMSG,DSLOB);         \nYou can preview the first few rows in the combined datastore without loading data into memory.\nDSPreview = preview(DS);\nLOBPreview = DSPreview(:,1:5)\nLOBPreview=8\u00d75 table\n    Time     AskPrice1    AskSize1    BidPrice1    BidSize1\n    _____    _________    ________    _________    ________\n    34200    2.752e+05       66       2.751e+05      400   "
  },
  {
    "element_type": "code",
    "content": "LOBPreview=\n8\u00d75 table\n    Time     AskPrice1    AskSize1    BidPrice1    BidSize1\n    _____    _________    ________    _________    ________",
    "page_number": 94,
    "bbox": [
      89.99993133544922,
      417.33319091796875,
      409.66192626953125,
      449.400146484375
    ],
    "caption": null,
    "context": "LOBSTER_SampleFiles_ReadMe.txt. Set the 'ReadSize' name-value argument to 'file' to\nallow similarly formatted files to be appended to existing datastores at the end of each trading day.\nDSMSG = tabularTextDatastore(MSGFileName,'ReadVariableNames',false,'ReadSize','file');\nDSMSG.VariableNames = [\"Time\",\"Type\",\"OrderID\",\"Size\",\"Price\",\"Direc"
  },
  {
    "element_type": "code",
    "content": "34200    2.752e+05       66       2.751e+05      400   \n    34200    2.752e+05      166       2.751e+05      400   \n    34200    2.752e+05      166       2.751e+05      400   \n    34200    2.752e+05      166       2.751e+05      400   \n    34200    2.752e+05      166       2.751e+05      300   \n    34200    2.752e+05      166       2.751e+05      300   \n    34200    2.752e+05      166       2.751e+05      300   \n    34200    2.752e+05      166       2.751e+05      300",
    "page_number": 94,
    "bbox": [
      89.99993133544922,
      460.53314208984375,
      409.6618957519531,
      546.6000366210938
    ],
    "caption": null,
    "context": "ry.\nDSPreview = preview(DS);\nLOBPreview = DSPreview(:,1:5)\nLOBPreview=8\u00d75 table\n    Time     AskPrice1    AskSize1    BidPrice1    BidSize1\n    _____    _________    ________    _________    ________\n    34200    2.752e+05       66       2.751e+05      400   \n    34200    2.752e+05      166       2.751e+05      400   \n    34200    2.752e+05      166       2.751e+05      400   \n    34200    2.752e+05      166       2.751e+05      400   \n    34200    2.752e+05      166       2.751e+05      300   \n    34200    2.752e+05      166       2.751e+05      300   \n    34200    2.752e+05      166       2.751e+05      300   \n    34200    2.752e+05      166       2.751e+05      300   \nThe preview shows asks and bids at the touch, meaning the level 1 data, which is closest to the\nmidprice. Time units are seconds after midnight, price units are dollar amounts times 10,000, and\nsize u"
  },
  {
    "element_type": "code",
    "content": "The preview shows asks and bids \nat the touch\n, meaning the level 1 data, which is closest to the\nmidprice. Time units are seconds after midnight, price units are dollar amounts times 10,000, and\nsize units are the number of shares (see \nLOBSTER_SampleFiles_ReadMe.txt\n).",
    "page_number": 94,
    "bbox": [
      90.0019302368164,
      568.4384155273438,
      539.041748046875,
      604.0684204101562
    ],
    "caption": null,
    "context": "LOBSTER_SampleFiles_ReadMe.txt. Set the 'ReadSize' name-value argument to 'file' to\nallow similarly formatted files to be appended to existing datastores at the end of each trading day.\nDSMSG = tabularTextDatastore(MSGFileName,'ReadVariableNames',false,'ReadSize','file');\nDSMSG.VariableNames = [\"Time\",\"Type\",\"OrderID\",\"Size\",\"Price\",\"Direction\"];\nDSLOB = tabularTextDatastore(LOBFileName,'ReadVariableNames',false,'ReadSize','file');\nDSLOB.VariableNames = [\"AskPrice1\","
  },
  {
    "element_type": "code",
    "content": "Set the execution environment for MapReduce to the local MATLAB session, instead of using Parallel\nComputing Toolbox\u2122, by calling \nmapreducer(0)\n. Then, create a tall array from the datastore \nDS\n by\nusing \ntall\n. Preview the data in the tall array.",
    "page_number": 94,
    "bbox": [
      90.00186157226562,
      683.361572265625,
      552.5917358398438,
      718.9915771484375
    ],
    "caption": null,
    "context": "a datastore using the MapReduce technique (see\n\u201cTall Arrays for Out-of-Memory Data\u201d). When you use MapReduce, tall arrays remain unevaluated\nuntil you execute specific computations that use the data.\nSet the execution environment for MapReduce to the local MATLAB session, instead of using Parallel\nComputing Toolbox\u2122, by calling mapreducer(0). Then, create a tall array from the datastore DS by\nusing tall. Preview the data in the tall array.\n Machine Learning for Statistical Arbitrage I: Data Management and Visualization\n2-51\n"
  },
  {
    "element_type": "code",
    "content": "mapreducer(0)\nDT = tall(DS);",
    "page_number": 95,
    "bbox": [
      90.0,
      93.02544403076172,
      165.85198974609375,
      114.29243469238281
    ],
    "caption": null,
    "context": "mapreducer(0)\nDT = tall(DS);\nDTPreview = DT(:,1:5)\nDTPreview =\n  M\u00d75 tall table\n    Time     AskPrice1    AskSize1    BidPrice1    BidSize1\n    _____    _________    ________    _________    ________\n    34200    2.752e+05       "
  },
  {
    "element_type": "code",
    "content": "DTPreview = DT(:,1:5)",
    "page_number": 95,
    "bbox": [
      90.0,
      125.4254379272461,
      203.77798461914062,
      135.89244079589844
    ],
    "caption": null,
    "context": "mapreducer(0)\nDT = tall(DS);\nDTPreview = DT(:,1:5)\nDTPreview =\n  M\u00d75 tall table\n    Time     AskPrice1    AskSize1    BidPrice1    BidSize1\n    _____    _________    ________    _________    ________\n    34200    2.752e+05       66       2.751e+05    "
  },
  {
    "element_type": "code",
    "content": "Time     AskPrice1    AskSize1    BidPrice1    BidSize1\n    _____    _________    ________    _________    ________",
    "page_number": 95,
    "bbox": [
      90.0,
      187.89927673339844,
      409.6619873046875,
      209.1663055419922
    ],
    "caption": null,
    "context": "mapreducer(0)\nDT = tall(DS);\nDTPreview = DT(:,1:5)\nDTPreview =\n  M\u00d75 tall table\n    Time     AskPrice1    AskSize1    BidPrice1    BidSize1\n    _____    _________    ________    _________    ________\n    34200    2.752e+05       66       2.751e+05      400   \n    34200    2.752e+05      166       2.751e+05      400   \n    34200    2.752e+05      166       2.751e+05      400   \n    34200    2.752e+"
  },
  {
    "element_type": "code",
    "content": "34200    2.752e+05       66       2.751e+05      400   \n    34200    2.752e+05      166       2.751e+05      400   \n    34200    2.752e+05      166       2.751e+05      400   \n    34200    2.752e+05      166       2.751e+05      400   \n    34200    2.752e+05      166       2.751e+05      300   \n    34200    2.752e+05      166       2.751e+05      300   \n    34200    2.752e+05      166       2.751e+05      300   \n    34200    2.752e+05      166       2.751e+05      300   \n      :          :           :            :           :\n      :          :           :            :           :",
    "page_number": 95,
    "bbox": [
      90.0,
      220.29930114746094,
      409.6619873046875,
      327.9661865234375
    ],
    "caption": null,
    "context": "mapreducer(0)\nDT = tall(DS);\nDTPreview = DT(:,1:5)\nDTPreview =\n  M\u00d75 tall table\n    Time     AskPrice1    AskSize1    BidPrice1    BidSize1\n    _____    _________    ________    _________    ________\n    34200    2.752e+05       66       2.751e+05      400   \n    34200    2.752e+05      166       2.751e+05      400   \n    34200    2.752e+05      166       2.751e+05      400   \n    34200    2.752e+05      166       2.751e+05      400   \n    34200    2.752e+05      166       2.751e+05      300   \n    34200    2.752e+05      166       2.751e+05      300   \n    34200    2.752e+05      166       2.751e+05      300   \n    34200    2.752e+05      166       2.751e+05      300   \n      :          :           :            :           :\n      :          :           :            :           :\nTimetables allow you to perform operations specific to time series (see \u201cCreate Timetables\u201d). Because\nthe LOB data consists of concurrent time series, convert DT to a tall timetable.\nDT.Time = seconds"
  },
  {
    "element_type": "code",
    "content": "Timetables allow you to perform operations specific to time series (see \u201cCreate Timetables\u201d). Because\nthe LOB data consists of concurrent time series, convert \nDT\n to a tall timetable.",
    "page_number": 95,
    "bbox": [
      90.0,
      337.6507263183594,
      556.93994140625,
      361.2807312011719
    ],
    "caption": null,
    "context": "      2.751e+05      300   \n    34200    2.752e+05      166       2.751e+05      300   \n      :          :           :            :           :\n      :          :           :            :           :\nTimetables allow you to perform operations specific to time series (see \u201cCreate Timetables\u201d). Because\nthe LOB data consists of concurrent time series, convert DT to a tall timetable.\nDT.Time = seconds(DT.Time); % Cast time as a duration from midnight.\nDTT = table2timetable(DT);\nDTTPreview = DTT(:,1:4)\nDTTPreview =\n  M\u00d74 tall timetable\n      Time       AskPrice1    AskSize1    BidPri"
  },
  {
    "element_type": "code",
    "content": "DT.Time = seconds(DT.Time); \n% Cast time as a duration from midnight.\nDTT = table2timetable(DT);",
    "page_number": 95,
    "bbox": [
      89.99700927734375,
      370.18841552734375,
      458.4389953613281,
      391.45538330078125
    ],
    "caption": null,
    "context": "mapreducer(0)\nDT = tall(DS);\nDTPreview = DT(:,1:5)\nDTPreview =\n  M\u00d75 tall table\n    Time     AskPrice1    AskSize1    BidPrice1    BidSize1\n    _____    _________    ________    _________    ________\n    34200    2.752e+05       66       2.751e+05      400   \n    34200    2.752e+05      166     "
  },
  {
    "element_type": "code",
    "content": "DTTPreview = DTT(:,1:4)",
    "page_number": 95,
    "bbox": [
      89.99700927734375,
      402.58837890625,
      214.61099243164062,
      413.05535888671875
    ],
    "caption": null,
    "context": " Timetables\u201d). Because\nthe LOB data consists of concurrent time series, convert DT to a tall timetable.\nDT.Time = seconds(DT.Time); % Cast time as a duration from midnight.\nDTT = table2timetable(DT);\nDTTPreview = DTT(:,1:4)\nDTTPreview =\n  M\u00d74 tall timetable\n      Time       AskPrice1    AskSize1    BidPrice1    BidSize1\n    _________    _________    ________    _________    ________\n    34200 sec    2.752e+05       66   "
  },
  {
    "element_type": "code",
    "content": "Time       AskPrice1    AskSize1    BidPrice1    BidSize1\n    _________    _________    ________    _________    ________",
    "page_number": 95,
    "bbox": [
      89.99700927734375,
      465.0621643066406,
      431.3310241699219,
      486.3291320800781
    ],
    "caption": null,
    "context": " time series, convert DT to a tall timetable.\nDT.Time = seconds(DT.Time); % Cast time as a duration from midnight.\nDTT = table2timetable(DT);\nDTTPreview = DTT(:,1:4)\nDTTPreview =\n  M\u00d74 tall timetable\n      Time       AskPrice1    AskSize1    BidPrice1    BidSize1\n    _________    _________    ________    _________    ________\n    34200 sec    2.752e+05       66       2.751e+05      400   \n    34200 sec    2.752e+05      166       2.751e+05      400   \n    34200 sec    2.752e+05      166       2.751e+05      400   \n    3420"
  },
  {
    "element_type": "code",
    "content": "34200 sec    2.752e+05       66       2.751e+05      400   \n    34200 sec    2.752e+05      166       2.751e+05      400   \n    34200 sec    2.752e+05      166       2.751e+05      400   \n    34200 sec    2.752e+05      166       2.751e+05      400   \n    34200 sec    2.752e+05      166       2.751e+05      300   \n    34200 sec    2.752e+05      166       2.751e+05      300   \n    34200 sec    2.752e+05      166       2.751e+05      300   \n    34200 sec    2.752e+05      166       2.751e+05      300   \n        :            :           :            :           :\n        :            :           :            :           :",
    "page_number": 95,
    "bbox": [
      89.99708557128906,
      497.4621276855469,
      431.3310546875,
      605.1289672851562
    ],
    "caption": null,
    "context": "imetable(DT);\nDTTPreview = DTT(:,1:4)\nDTTPreview =\n  M\u00d74 tall timetable\n      Time       AskPrice1    AskSize1    BidPrice1    BidSize1\n    _________    _________    ________    _________    ________\n    34200 sec    2.752e+05       66       2.751e+05      400   \n    34200 sec    2.752e+05      166       2.751e+05      400   \n    34200 sec    2.752e+05      166       2.751e+05      400   \n    34200 sec    2.752e+05      166       2.751e+05      400   \n    34200 sec    2.752e+05      166       2.751e+05      300   \n    34200 sec    2.752e+05      166       2.751e+05      300   \n    34200 sec    2.752e+05      166       2.751e+05      300   \n    34200 sec    2.752e+05      166       2.751e+05      300   \n        :            :           :            :           :\n        :            :           :            :           :\nDisplay all variables in the MATLAB workspace.\nwhos\n  Name               Size            Bytes  Class                                       Attribute\n  DS                 1x1                 8  matlab"
  },
  {
    "element_type": "code",
    "content": "Name               Size            Bytes  Class                                       Attribute",
    "page_number": 95,
    "bbox": [
      90.00205993652344,
      654.6251220703125,
      615.548095703125,
      665.0921020507812
    ],
    "caption": null,
    "context": "      2.751e+05      300   \n        :            :           :            :           :\n        :            :           :            :           :\nDisplay all variables in the MATLAB workspace.\nwhos\n  Name               Size            Bytes  Class                                       Attribute\n  DS                 1x1                 8  matlab.io.datastore.CombinedDatastore                \n  DSLOB              1x1                 8  matlab.io.datastore.TabularTextDatastore             \n  DS"
  },
  {
    "element_type": "code",
    "content": "DS                 1x1                 8  matlab.io.datastore.CombinedDatastore                \n  DSLOB              1x1                 8  matlab.io.datastore.TabularTextDatastore             \n  DSMSG              1x1                 8  matlab.io.datastore.TabularTextDatastore             \n  DSPreview          8x13             4899  table",
    "page_number": 95,
    "bbox": [
      90.00208282470703,
      676.2252197265625,
      615.548095703125,
      719.0923461914062
    ],
    "caption": null,
    "context": "           :           :            :           :\nDisplay all variables in the MATLAB workspace.\nwhos\n  Name               Size            Bytes  Class                                       Attribute\n  DS                 1x1                 8  matlab.io.datastore.CombinedDatastore                \n  DSLOB              1x1                 8  matlab.io.datastore.TabularTextDatastore             \n  DSMSG              1x1                 8  matlab.io.datastore.TabularTextDatastore             \n  DSPreview          8x13             4899  table                                                \n2\nPerforming Common Financial Tasks\n2-52\n"
  },
  {
    "element_type": "code",
    "content": "DT                 Mx13             5292  tall                                                 \n  DTPreview          Mx5              2926  tall                                                 \n  DTT                Mx12             5056  tall                                                 \n  DTTPreview         Mx4              2704  tall                                                 \n  LOB3Variables      1x12              952  string                                               \n  LOBFileName        1x1               262  string                                               \n  LOBPreview         8x5              2331  table                                                \n  MSGFileName        1x1               246  string                                               \n  TimeVariable       1x1               166  string                                               \n  date               1x1               182  string                                               \n  rem                1x1               246  string                                               \n  ticker             1x1               166  string",
    "page_number": 96,
    "bbox": [
      90.0,
      93.02544403076172,
      615.5460205078125,
      222.29246520996094
    ],
    "caption": null,
    "context": "  DT                 Mx13             5292  tall                                                 \n  DTPreview          Mx5              2926  tall                                                 \n  DTT                Mx12             5056  tall                                                 \n  DTTPreview         Mx4              2704  tall                                                 \n  LOB3Variables      1x12              952  string                                               \n  LOBFileName        1x1               262  string                                               \n  LOBPreview         8x5              2331  table                                                \n  MSGFileName        1x1               246  string                                               \n  TimeVariable       1x1               166  string                                               \n  date               1x1               182  string                                               \n  rem                1x1               246  string                                               \n  ticker             1x1               166  string                                               \nBecause all the data is in the datastore, the workspace uses little memory.\nPreprocess and Evaluate Data\nTall arrays allow preprocessing, or queuing, of computations before they are evaluated, which\ni"
  },
  {
    "element_type": "code",
    "content": "Midprice \nS\n and imbalance index \nI\n are used to model LOB dynamics. To queue their computations,\ndefine them, and the time base, in terms of \nDTT\n.",
    "page_number": 96,
    "bbox": [
      90.00398254394531,
      314.5435791015625,
      539.2738037109375,
      338.173583984375
    ],
    "caption": null,
    "context": "  DT                 Mx13             5292  tall                                                 \n  DTPreview          Mx5              2926  tall                                                 \n  DTT                Mx12             5056  tall                                                 \n  DTTPreview         Mx4              2704  tall      "
  },
  {
    "element_type": "code",
    "content": "timeBase = DTT.Time;\nMidPrice = (DTT.BidPrice1 + DTT.AskPrice1)/2;",
    "page_number": 96,
    "bbox": [
      89.99998474121094,
      348.8885192871094,
      333.8099670410156,
      370.1554870605469
    ],
    "caption": null,
    "context": "ated, which\nimproves memory management in the workspace.\nMidprice S and imbalance index I are used to model LOB dynamics. To queue their computations,\ndefine them, and the time base, in terms of DTT.\ntimeBase = DTT.Time;\nMidPrice = (DTT.BidPrice1 + DTT.AskPrice1)/2;\n% LOB level 3 imbalance index:\nlambda  = 0.5; % Hyperparameter\nweights = exp(-(lambda)*[0 1 2]);\nVAsk = weights(1)*DTT.AskSize1 + weights(2)*DTT.AskSize2 + weights(3)*DTT.AskSize3;\nVBid = weights(1)*D"
  },
  {
    "element_type": "code",
    "content": "% LOB level 3 imbalance index:",
    "page_number": 96,
    "bbox": [
      89.99998474121094,
      381.2884826660156,
      252.53997802734375,
      391.7554626464844
    ],
    "caption": null,
    "context": " and imbalance index I are used to model LOB dynamics. To queue their computations,\ndefine them, and the time base, in terms of DTT.\ntimeBase = DTT.Time;\nMidPrice = (DTT.BidPrice1 + DTT.AskPrice1)/2;\n% LOB level 3 imbalance index:\nlambda  = 0.5; % Hyperparameter\nweights = exp(-(lambda)*[0 1 2]);\nVAsk = weights(1)*DTT.AskSize1 + weights(2)*DTT.AskSize2 + weights(3)*DTT.AskSize3;\nVBid = weights(1)*DTT.BidSize1 + weights(2)*DTT.Bi"
  },
  {
    "element_type": "code",
    "content": "lambda  = 0.5; \n% Hyperparameter\nweights = exp(-(lambda)*[0 1 2]);\nVAsk = weights(1)*DTT.AskSize1 + weights(2)*DTT.AskSize2 + weights(3)*DTT.AskSize3;\nVBid = weights(1)*DTT.BidSize1 + weights(2)*DTT.BidSize2 + weights(3)*DTT.BidSize3;\nImbalanceIndex = (VBid-VAsk)./(VBid+VAsk);",
    "page_number": 96,
    "bbox": [
      89.99998474121094,
      402.8884582519531,
      539.6940307617188,
      456.5553894042969
    ],
    "caption": null,
    "context": "  DT                 Mx13             5292  tall                                                 \n  DTPreview          Mx5              2926  tall                                                 \n  DTT                Mx12             5056  tall                                                 \n  DTTPreview         Mx4              2704  tall                                                 \n  LOB3Variables      1x12              952  string                                   "
  },
  {
    "element_type": "code",
    "content": "The imbalance index is a weighted average of ask and bid volumes on either side of the midprice [3].\nThe imbalance index is a potential indicator of future price movements. The variable \nlambda\n is a\nhyperparameter\n, which is a parameter specified before training rather than estimated by the machine\nlearning algorithm. A hyperparameter can influence the performance of the model. \nFeature\nengineering\n is the process of choosing domain-specific hyperparameters to use in machine learning\nalgorithms. You can tune hyperparameters to optimize a trading strategy.",
    "page_number": 96,
    "bbox": [
      89.99591064453125,
      468.24798583984375,
      557.1656494140625,
      539.8779296875
    ],
    "caption": null,
    "context": "hts(1)*DTT.AskSize1 + weights(2)*DTT.AskSize2 + weights(3)*DTT.AskSize3;\nVBid = weights(1)*DTT.BidSize1 + weights(2)*DTT.BidSize2 + weights(3)*DTT.BidSize3;\nImbalanceIndex = (VBid-VAsk)./(VBid+VAsk);\nThe imbalance index is a weighted average of ask and bid volumes on either side of the midprice [3].\nThe imbalance index is a potential indicator of future price movements. The variable lambda is a\nhyperparameter, which is a parameter specified before training rather than estimated by the machine\nlearning algorithm. A hyperparameter can influence the performance of the model. Feature\nengineering is the process of choosing domain-specific hyperparameters to use in machine learning\nalgorithms. You can tune hyperparameters to optimize a trading strategy.\nTo bring preprocessed expressions into memory and evaluate them, use the gather function. This\nprocess is called deferred evaluation.\n[t,S,I] = gather(timeBase,MidPrice,ImbalanceIndex);\nEvaluating tall exp"
  },
  {
    "element_type": "code",
    "content": "To bring preprocessed expressions into memory and evaluate them, use the \ngather\n function. This\nprocess is called \ndeferred evaluation\n.",
    "page_number": 96,
    "bbox": [
      89.99588012695312,
      551.67138671875,
      540.5657958984375,
      575.3013916015625
    ],
    "caption": null,
    "context": "rmance of the model. Feature\nengineering is the process of choosing domain-specific hyperparameters to use in machine learning\nalgorithms. You can tune hyperparameters to optimize a trading strategy.\nTo bring preprocessed expressions into memory and evaluate them, use the gather function. This\nprocess is called deferred evaluation.\n[t,S,I] = gather(timeBase,MidPrice,ImbalanceIndex);\nEvaluating tall expression using the Local MATLAB Session:\n- Pass 1 of 1: Completed in 4.5 sec\nEvaluation completed in 5 sec\nA single call to gather eva"
  },
  {
    "element_type": "code",
    "content": "[t,S,I] = gather(timeBase,MidPrice,ImbalanceIndex);",
    "page_number": 96,
    "bbox": [
      90.00387573242188,
      586.0162963867188,
      366.3218688964844,
      596.4832763671875
    ],
    "caption": null,
    "context": "hms. You can tune hyperparameters to optimize a trading strategy.\nTo bring preprocessed expressions into memory and evaluate them, use the gather function. This\nprocess is called deferred evaluation.\n[t,S,I] = gather(timeBase,MidPrice,ImbalanceIndex);\nEvaluating tall expression using the Local MATLAB Session:\n- Pass 1 of 1: Completed in 4.5 sec\nEvaluation completed in 5 sec\nA single call to gather evaluates multiple preprocessed expressions with a "
  },
  {
    "element_type": "code",
    "content": "Evaluating tall expression using the Local MATLAB Session:\n- Pass 1 of 1: Completed in 4.5 sec\nEvaluation completed in 5 sec",
    "page_number": 96,
    "bbox": [
      90.00387573242188,
      607.097412109375,
      404.24786376953125,
      639.1644897460938
    ],
    "caption": null,
    "context": "ing strategy.\nTo bring preprocessed expressions into memory and evaluate them, use the gather function. This\nprocess is called deferred evaluation.\n[t,S,I] = gather(timeBase,MidPrice,ImbalanceIndex);\nEvaluating tall expression using the Local MATLAB Session:\n- Pass 1 of 1: Completed in 4.5 sec\nEvaluation completed in 5 sec\nA single call to gather evaluates multiple preprocessed expressions with a single pass through the\ndatastore.\nDetermine the sample size, which is the number of ticks, or updates, in the data.\nnumTicks"
  },
  {
    "element_type": "code",
    "content": "A single call to \ngather\n evaluates multiple preprocessed expressions with a single pass through the\ndatastore.",
    "page_number": 96,
    "bbox": [
      89.99589538574219,
      650.8570556640625,
      545.4457397460938,
      674.487060546875
    ],
    "caption": null,
    "context": "  DT                 Mx13             5292  tall                                                 \n  DTPreview          Mx5              2926  tall                                                 \n  DTT                Mx12             5056  tall                                                 \n  DTTPreview     "
  },
  {
    "element_type": "code",
    "content": "Prepend the time base with the date, and cast the result as a datetime array. Save the resulting\ndatetime array, \nMidPrice\n, and \nImbalanceIndex\n to a MAT-file in a specified location.",
    "page_number": 97,
    "bbox": [
      89.99800109863281,
      191.86090087890625,
      526.7277221679688,
      215.49090576171875
    ],
    "caption": null,
    "context": "numTicks = \n581030\nThe daily LOB data contains 581,030 ticks.\nCheckpoint Data\nYou can save both unevaluated and evaluated data to external storage for later use.\nPrepend the time base with the date, and cast the result as a datetime array. Save the resulting\ndatetime array, MidPrice, and ImbalanceIndex to a MAT-file in a specified location.\ndateTimeBase = datetime(date) + timeBase; \nToday = timetable(dateTimeBase,MidPrice,ImbalanceIndex)\nToday =\n  581,030\u00d72 tall timetable\n        dateTimeBase         MidPrice     ImbalanceIndex\n    _________"
  },
  {
    "element_type": "code",
    "content": "dateTimeBase = datetime(date) + timeBase; \nToday = timetable(dateTimeBase,MidPrice,ImbalanceIndex)",
    "page_number": 97,
    "bbox": [
      90.00006103515625,
      225.5159454345703,
      387.9900817871094,
      246.78294372558594
    ],
    "caption": null,
    "context": "age for later use.\nPrepend the time base with the date, and cast the result as a datetime array. Save the resulting\ndatetime array, MidPrice, and ImbalanceIndex to a MAT-file in a specified location.\ndateTimeBase = datetime(date) + timeBase; \nToday = timetable(dateTimeBase,MidPrice,ImbalanceIndex)\nToday =\n  581,030\u00d72 tall timetable\n        dateTimeBase         MidPrice     ImbalanceIndex\n    ____________________    __________    ______________\n    21-Jun-2012 09:30:00    2.7515e+05         -0.2"
  },
  {
    "element_type": "code",
    "content": "581,030\u00d72 tall timetable",
    "page_number": 97,
    "bbox": [
      90.00011444091797,
      278.3071594238281,
      230.86810302734375,
      288.7741394042969
    ],
    "caption": null,
    "context": "esulting\ndatetime array, MidPrice, and ImbalanceIndex to a MAT-file in a specified location.\ndateTimeBase = datetime(date) + timeBase; \nToday = timetable(dateTimeBase,MidPrice,ImbalanceIndex)\nToday =\n  581,030\u00d72 tall timetable\n        dateTimeBase         MidPrice     ImbalanceIndex\n    ____________________    __________    ______________\n    21-Jun-2012 09:30:00    2.7515e+05         -0.205   \n    21-Jun-2012 09:30:00    2"
  },
  {
    "element_type": "code",
    "content": "dateTimeBase         MidPrice     ImbalanceIndex\n    ____________________    __________    ______________",
    "page_number": 97,
    "bbox": [
      90.00011444091797,
      299.9071350097656,
      393.4080810546875,
      321.1741027832031
    ],
    "caption": null,
    "context": "dPrice, and ImbalanceIndex to a MAT-file in a specified location.\ndateTimeBase = datetime(date) + timeBase; \nToday = timetable(dateTimeBase,MidPrice,ImbalanceIndex)\nToday =\n  581,030\u00d72 tall timetable\n        dateTimeBase         MidPrice     ImbalanceIndex\n    ____________________    __________    ______________\n    21-Jun-2012 09:30:00    2.7515e+05         -0.205   \n    21-Jun-2012 09:30:00    2.7515e+05       -0.26006   \n    21-Jun-2012 09:30:00    2.7515e+05       -0.26006   \n    21-Jun-2012 09:30:00    2"
  },
  {
    "element_type": "code",
    "content": "21-Jun-2012 09:30:00    2.7515e+05         -0.205   \n    21-Jun-2012 09:30:00    2.7515e+05       -0.26006   \n    21-Jun-2012 09:30:00    2.7515e+05       -0.26006   \n    21-Jun-2012 09:30:00    2.7515e+05      -0.086772   \n    21-Jun-2012 09:30:00    2.7515e+05       -0.15581   \n    21-Jun-2012 09:30:00    2.7515e+05       -0.35382   \n    21-Jun-2012 09:30:00    2.7515e+05       -0.19084   \n    21-Jun-2012 09:30:00    2.7515e+05       -0.19084   \n             :                  :               :\n             :                  :               :",
    "page_number": 97,
    "bbox": [
      90.00009155273438,
      332.3070983886719,
      393.4080810546875,
      439.9739685058594
    ],
    "caption": null,
    "context": " = timetable(dateTimeBase,MidPrice,ImbalanceIndex)\nToday =\n  581,030\u00d72 tall timetable\n        dateTimeBase         MidPrice     ImbalanceIndex\n    ____________________    __________    ______________\n    21-Jun-2012 09:30:00    2.7515e+05         -0.205   \n    21-Jun-2012 09:30:00    2.7515e+05       -0.26006   \n    21-Jun-2012 09:30:00    2.7515e+05       -0.26006   \n    21-Jun-2012 09:30:00    2.7515e+05      -0.086772   \n    21-Jun-2012 09:30:00    2.7515e+05       -0.15581   \n    21-Jun-2012 09:30:00    2.7515e+05       -0.35382   \n    21-Jun-2012 09:30:00    2.7515e+05       -0.19084   \n    21-Jun-2012 09:30:00    2.7515e+05       -0.19084   \n             :                  :               :\n             :                  :               :\nlocation = fullfile(pwd,\"ExchangeData\",ticker,date);\nwrite(location,Today,'FileType','mat')\nWriting tall data to folder C:\\TEMP\\tp5b508469\\finance-ex97702880\\ExchangeData\\INTC\\2012-06-21\nEvaluating ta"
  },
  {
    "element_type": "code",
    "content": "location = fullfile(pwd,\n\"ExchangeData\"\n,ticker,date);\nwrite(location,Today,\n'FileType'\n,\n'mat'\n)",
    "page_number": 97,
    "bbox": [
      90.00007629394531,
      449.8982238769531,
      371.75408935546875,
      471.1651916503906
    ],
    "caption": null,
    "context": "numTicks = \n581030\nThe daily LOB data contains 581,030 ticks.\nCheckpoint Data\nYou can save both unevaluated and evaluated data to external storage for later use.\nPrepend the time base with the date, and cast the result as a datetime array. Save the resulting\ndatetime array, MidPrice, and Imbalanc"
  },
  {
    "element_type": "code",
    "content": "Writing tall data to folder C:\\TEMP\\tp5b508469\\finance-ex97702880\\ExchangeData\\INTC\\2012-06-21\nEvaluating tall expression using the Local MATLAB Session:\n- Pass 1 of 1: Completed in 5.8 sec\nEvaluation completed in 6.7 sec",
    "page_number": 97,
    "bbox": [
      90.00004577636719,
      481.0894470214844,
      599.2920532226562,
      523.9563598632812
    ],
    "caption": null,
    "context": "9084   \n             :                  :               :\n             :                  :               :\nlocation = fullfile(pwd,\"ExchangeData\",ticker,date);\nwrite(location,Today,'FileType','mat')\nWriting tall data to folder C:\\TEMP\\tp5b508469\\finance-ex97702880\\ExchangeData\\INTC\\2012-06-21\nEvaluating tall expression using the Local MATLAB Session:\n- Pass 1 of 1: Completed in 5.8 sec\nEvaluation completed in 6.7 sec\nThe file is written once, at the end of each trading day. The code saves the data to a file in a date-\nstamped folder. The series of ExchangeData subfolders serves as a historical data repository.\nAlt"
  },
  {
    "element_type": "code",
    "content": "The file is written once, at the end of each trading day. The code saves the data to a file in a date-\nstamped folder. The series of \nExchangeData\n subfolders serves as a historical data repository.",
    "page_number": 97,
    "bbox": [
      89.99808502197266,
      534.8824462890625,
      535.5380249023438,
      558.512451171875
    ],
    "caption": null,
    "context": "older C:\\TEMP\\tp5b508469\\finance-ex97702880\\ExchangeData\\INTC\\2012-06-21\nEvaluating tall expression using the Local MATLAB Session:\n- Pass 1 of 1: Completed in 5.8 sec\nEvaluation completed in 6.7 sec\nThe file is written once, at the end of each trading day. The code saves the data to a file in a date-\nstamped folder. The series of ExchangeData subfolders serves as a historical data repository.\nAlternatively, you can save workspace variables evaluated with gather directly to a MAT-file in the\ncurrent folder.\nsave(\"LOBVars.mat\",\"t\",\"S\",\"I\")\nIn preparation for model validation later on, evaluate"
  },
  {
    "element_type": "code",
    "content": "Alternatively, you can save workspace variables evaluated with \ngather\n directly to a MAT-file in the\ncurrent folder.",
    "page_number": 97,
    "bbox": [
      89.99806213378906,
      569.5394287109375,
      543.9180297851562,
      593.16943359375
    ],
    "caption": null,
    "context": "ec\nThe file is written once, at the end of each trading day. The code saves the data to a file in a date-\nstamped folder. The series of ExchangeData subfolders serves as a historical data repository.\nAlternatively, you can save workspace variables evaluated with gather directly to a MAT-file in the\ncurrent folder.\nsave(\"LOBVars.mat\",\"t\",\"S\",\"I\")\nIn preparation for model validation later on, evaluate and add market order prices to the same file.\n[MOBid,MOAsk] = gather(DTT.BidPrice1,DTT.AskPrice1);\nEvaluating tall "
  },
  {
    "element_type": "code",
    "content": "save(\n\"LOBVars.mat\"\n,\n\"t\"\n,\n\"S\"\n,\n\"I\"\n)",
    "page_number": 97,
    "bbox": [
      89.99907684326172,
      603.1945190429688,
      257.9750671386719,
      613.6614990234375
    ],
    "caption": null,
    "context": "numTicks = \n581030\nThe daily LOB data contains 581,030 ticks.\nCheckpoint Data\nYou can save both unevaluated and evaluated data to external storage for later use.\nPrepend the time base with the date, and cast the result as a datetime array."
  },
  {
    "element_type": "code",
    "content": "[MOBid,MOAsk] = gather(DTT.BidPrice1,DTT.AskPrice1);",
    "page_number": 97,
    "bbox": [
      89.99603271484375,
      646.2427368164062,
      371.7320251464844,
      656.709716796875
    ],
    "caption": null,
    "context": "valuated with gather directly to a MAT-file in the\ncurrent folder.\nsave(\"LOBVars.mat\",\"t\",\"S\",\"I\")\nIn preparation for model validation later on, evaluate and add market order prices to the same file.\n[MOBid,MOAsk] = gather(DTT.BidPrice1,DTT.AskPrice1);\nEvaluating tall expression using the Local MATLAB Session:\n- Pass 1 of 1: Completed in 4.1 sec\nEvaluation completed in 4.2 sec\nsave(\"LOBVars.mat\",\"MOBid\",\"MOAsk\",\"-append\")\n2\nPerforming Common Financi"
  },
  {
    "element_type": "code",
    "content": "Evaluating tall expression using the Local MATLAB Session:\n- Pass 1 of 1: Completed in 4.1 sec\nEvaluation completed in 4.2 sec",
    "page_number": 97,
    "bbox": [
      89.99603271484375,
      666.634033203125,
      404.2400207519531,
      698.7011108398438
    ],
    "caption": null,
    "context": "           :\nlocation = fullfile(pwd,\"ExchangeData\",ticker,date);\nwrite(location,Today,'FileType','mat')\nWriting tall data to folder C:\\TEMP\\tp5b508469\\finance-ex97702880\\ExchangeData\\INTC\\2012-06-21\nEvaluating tall expression using the Local MATLAB Session:\n- Pass 1 of 1: Completed in 5.8 sec\nEvaluation completed in 6.7 sec\nThe file is written once, at the end of each trading day. The code saves the data to a file in a date-\nstamped folder. The series of ExchangeData subfolders serves as a historical data repository.\nAlt"
  },
  {
    "element_type": "code",
    "content": "save(\n\"LOBVars.mat\"\n,\n\"MOBid\"\n,\n\"MOAsk\"\n,\n\"-append\"\n)",
    "page_number": 97,
    "bbox": [
      89.99605560302734,
      708.6254272460938,
      333.8330383300781,
      719.0924072265625
    ],
    "caption": null,
    "context": "numTicks = \n581030\nThe daily LOB data contains 581,030 ticks.\nCheckpoint Data\nYou can save both unevaluated and evaluated data to external storage for later use.\nPrepend the time base with the date, and cast the result as a datetime array. Save the resu"
  },
  {
    "element_type": "code",
    "content": "clearvars \n-except\n \nDTT\n \nwhos",
    "page_number": 98,
    "bbox": [
      89.99798583984375,
      125.90740203857422,
      209.20298767089844,
      147.17440795898438
    ],
    "caption": null,
    "context": "The remainder of this example uses only the unevaluated tall timetable DTT. Clear other variables\nfrom the workspace.\nclearvars -except DTT \nwhos\n  Name            Size            Bytes  Class    Attributes\n  DTT       581,030x12  "
  },
  {
    "element_type": "code",
    "content": "Name            Size            Bytes  Class    Attributes",
    "page_number": 98,
    "bbox": [
      89.99798583984375,
      156.3893585205078,
      415.0779724121094,
      166.8563690185547
    ],
    "caption": null,
    "context": "The remainder of this example uses only the unevaluated tall timetable DTT. Clear other variables\nfrom the workspace.\nclearvars -except DTT \nwhos\n  Name            Size            Bytes  Class    Attributes\n  DTT       581,030x12             5056  tall               \nData Visualization\nTo visualize large amounts of data, you must summarize, bin, or sample the data in some way to\nreduce the number of poin"
  },
  {
    "element_type": "code",
    "content": "DTT       581,030x12             5056  tall",
    "page_number": 98,
    "bbox": [
      89.99798583984375,
      177.98936462402344,
      415.0779724121094,
      188.4563751220703
    ],
    "caption": null,
    "context": "ainder of this example uses only the unevaluated tall timetable DTT. Clear other variables\nfrom the workspace.\nclearvars -except DTT \nwhos\n  Name            Size            Bytes  Class    Attributes\n  DTT       581,030x12             5056  tall               \nData Visualization\nTo visualize large amounts of data, you must summarize, bin, or sample the data in some way to\nreduce the number of points plotted on the screen.\nLOB Snapshot\nOne method of visualiz"
  },
  {
    "element_type": "code",
    "content": "sampleTimeTarget = seconds(11*60*60);               \n% Seconds after midnight\nsampleTimes = withtol(sampleTimeTarget,seconds(1)); \n% 1 second tolerance\nsampleLOB = DTT(sampleTimes,:);",
    "page_number": 98,
    "bbox": [
      90.00094604492188,
      307.2778625488281,
      501.7959289550781,
      339.3448181152344
    ],
    "caption": null,
    "context": " number of points plotted on the screen.\nLOB Snapshot\nOne method of visualization is to evaluate only a selected subsample of the data. Create a snapshot of\nthe LOB at a specific time of day (11 AM).\nsampleTimeTarget = seconds(11*60*60);               % Seconds after midnight\nsampleTimes = withtol(sampleTimeTarget,seconds(1)); % 1 second tolerance\nsampleLOB = DTT(sampleTimes,:);\nnumTimes = gather(size(sampleLOB,1))\nEvaluating tall expression using the Local MATLAB Session:\n- Pass 1 of 1: Completed in 4.1 sec\nEvaluation completed in 4.4 sec\nnumTimes = \n23\nThere are 23 ticks with"
  },
  {
    "element_type": "code",
    "content": "numTimes = gather(size(sampleLOB,1))",
    "page_number": 98,
    "bbox": [
      90.00094604492188,
      350.4778137207031,
      285.0489196777344,
      360.9447937011719
    ],
    "caption": null,
    "context": "e of day (11 AM).\nsampleTimeTarget = seconds(11*60*60);               % Seconds after midnight\nsampleTimes = withtol(sampleTimeTarget,seconds(1)); % 1 second tolerance\nsampleLOB = DTT(sampleTimes,:);\nnumTimes = gather(size(sampleLOB,1))\nEvaluating tall expression using the Local MATLAB Session:\n- Pass 1 of 1: Completed in 4.1 sec\nEvaluation completed in 4.4 sec\nnumTimes = \n23\nThere are 23 ticks within one second of 11 AM. For the sna"
  },
  {
    "element_type": "code",
    "content": "Evaluating tall expression using the Local MATLAB Session:\n- Pass 1 of 1: Completed in 4.1 sec\nEvaluation completed in 4.4 sec",
    "page_number": 98,
    "bbox": [
      90.00096893310547,
      370.1597595214844,
      404.24493408203125,
      402.2267150878906
    ],
    "caption": null,
    "context": "seconds(11*60*60);               % Seconds after midnight\nsampleTimes = withtol(sampleTimeTarget,seconds(1)); % 1 second tolerance\nsampleLOB = DTT(sampleTimes,:);\nnumTimes = gather(size(sampleLOB,1))\nEvaluating tall expression using the Local MATLAB Session:\n- Pass 1 of 1: Completed in 4.1 sec\nEvaluation completed in 4.4 sec\nnumTimes = \n23\nThere are 23 ticks within one second of 11 AM. For the snapshot, use the tick closest to the midtime.\nsampleLOB = sampleLOB(round(numTimes/2),:);\nsampleTime = sampleLOB.Time;\nsampleBidP"
  },
  {
    "element_type": "code",
    "content": "sampleLOB = sampleLOB(round(numTimes/2),:);\nsampleTime = sampleLOB.Time;",
    "page_number": 98,
    "bbox": [
      89.9959945678711,
      463.7924499511719,
      322.9700012207031,
      485.0594177246094
    ],
    "caption": null,
    "context": "ATLAB Session:\n- Pass 1 of 1: Completed in 4.1 sec\nEvaluation completed in 4.4 sec\nnumTimes = \n23\nThere are 23 ticks within one second of 11 AM. For the snapshot, use the tick closest to the midtime.\nsampleLOB = sampleLOB(round(numTimes/2),:);\nsampleTime = sampleLOB.Time;\nsampleBidPrices = [sampleLOB.BidPrice1,sampleLOB.BidPrice2,sampleLOB.BidPrice3];\nsampleBidSizes  = [sampleLOB.BidSize1,sampleLOB.BidSize2,sampleLOB.BidSize3];\nsampleAskPrices = [sampleLOB.AskPrice1,sa"
  },
  {
    "element_type": "code",
    "content": "sampleBidPrices = [sampleLOB.BidPrice1,sampleLOB.BidPrice2,sampleLOB.BidPrice3];\nsampleBidSizes  = [sampleLOB.BidSize1,sampleLOB.BidSize2,sampleLOB.BidSize3];\nsampleAskPrices = [sampleLOB.AskPrice1,sampleLOB.AskPrice2,sampleLOB.AskPrice3];\nsampleAskSizes  = [sampleLOB.AskSize1,sampleLOB.AskSize2,sampleLOB.AskSize3];",
    "page_number": 98,
    "bbox": [
      89.99601745605469,
      496.1924133300781,
      523.4360961914062,
      539.059326171875
    ],
    "caption": null,
    "context": "n 4.4 sec\nnumTimes = \n23\nThere are 23 ticks within one second of 11 AM. For the snapshot, use the tick closest to the midtime.\nsampleLOB = sampleLOB(round(numTimes/2),:);\nsampleTime = sampleLOB.Time;\nsampleBidPrices = [sampleLOB.BidPrice1,sampleLOB.BidPrice2,sampleLOB.BidPrice3];\nsampleBidSizes  = [sampleLOB.BidSize1,sampleLOB.BidSize2,sampleLOB.BidSize3];\nsampleAskPrices = [sampleLOB.AskPrice1,sampleLOB.AskPrice2,sampleLOB.AskPrice3];\nsampleAskSizes  = [sampleLOB.AskSize1,sampleLOB.AskSize2,sampleLOB.AskSize3];\n[sampleTime,sampleBidPrices,sampleBidSizes,sampleAskPrices,sampleAskSizes] = ...\n    gather(sampleTime,sampleBidPrices,sampleBidSizes,sampleAskPrices,sampleAskSizes);\nEvaluating tall expression using "
  },
  {
    "element_type": "code",
    "content": "[sampleTime,sampleBidPrices,sampleBidSizes,sampleAskPrices,sampleAskSizes] = \n...\n    gather(sampleTime,sampleBidPrices,sampleBidSizes,sampleAskPrices,sampleAskSizes);",
    "page_number": 98,
    "bbox": [
      89.99607849121094,
      550.1923217773438,
      550.5260620117188,
      571.4592895507812
    ],
    "caption": null,
    "context": ",sampleLOB.BidSize2,sampleLOB.BidSize3];\nsampleAskPrices = [sampleLOB.AskPrice1,sampleLOB.AskPrice2,sampleLOB.AskPrice3];\nsampleAskSizes  = [sampleLOB.AskSize1,sampleLOB.AskSize2,sampleLOB.AskSize3];\n[sampleTime,sampleBidPrices,sampleBidSizes,sampleAskPrices,sampleAskSizes] = ...\n    gather(sampleTime,sampleBidPrices,sampleBidSizes,sampleAskPrices,sampleAskSizes);\nEvaluating tall expression using the Local MATLAB Session:\n- Pass 1 of 2: Completed in 3.7 sec\n- Pass 2 of 2: Completed in 4 sec\nEvaluation completed in 8.6 sec\nVisualize the limited data sample return"
  },
  {
    "element_type": "code",
    "content": "Evaluating tall expression using the Local MATLAB Session:\n- Pass 1 of 2: Completed in 3.7 sec\n- Pass 2 of 2: Completed in 4 sec\nEvaluation completed in 8.6 sec",
    "page_number": 98,
    "bbox": [
      89.99609375,
      580.6742553710938,
      404.2400817871094,
      623.541259765625
    ],
    "caption": null,
    "context": "seconds(11*60*60);               % Seconds after midnight\nsampleTimes = withtol(sampleTimeTarget,seconds(1)); % 1 second tolerance\nsampleLOB = DTT(sampleTimes,:);\nnumTimes = gather(size(sampleLOB,1))\nEvaluating tall expression using the Local MATLAB Session:\n- Pass 1 of 1: Completed in 4.1 sec\nEvaluation completed in 4.4 sec\nnumTimes = \n23\nThere are 23 ticks within one second of 11 AM. For the snapshot, use the tick closest to the midtime.\nsampleLOB = sampleLOB(round(numTimes/2),:);\nsampleTime = sampleLOB.Time;\nsampleBidPrices = [sampleLOB.BidPrice1,sampl"
  },
  {
    "element_type": "code",
    "content": "Visualize the limited data sample returned by \ngather\n by using \nbar\n.",
    "page_number": 98,
    "bbox": [
      90.0041275024414,
      633.6792602539062,
      402.26409912109375,
      645.3092651367188
    ],
    "caption": null,
    "context": "The remainder of this example uses only the unevaluated tall timetable DTT. Clear other variables\nfrom the workspace.\nclearvars -except DTT \nwhos\n  Name            Size            Bytes  Class    Attributes\n  DTT       581,030x12             5056  tall               \nDa"
  },
  {
    "element_type": "code",
    "content": "bar((sampleBidPrices/10000),sampleBidSizes,\n'r'\n)\nbar((sampleAskPrices/10000),sampleAskSizes,\n'g'\n)\nhold \noff",
    "page_number": 98,
    "bbox": [
      90.0001220703125,
      687.0252685546875,
      344.6641540527344,
      719.0923461914062
    ],
    "caption": null,
    "context": "The remainder of this example uses only the unevaluated tall timetable DTT. Clear other variables\nfrom the workspace.\nclearvars -except DTT \nwhos\n  Name            Size            Bytes  Class    Attributes\n  DTT       581,030x12             5056  tall               \nData Visualization\nTo visualize large amo"
  },
  {
    "element_type": "code",
    "content": "xlabel(\n\"Price (Dollars)\"\n)\nylabel(\n\"Number of Shares\"\n)\nlegend([\n\"Bid\"\n,\n\"Ask\"\n],\n'Location'\n,\n'North'\n)\ntitle(strcat(\n\"Level 3 Limit Order Book: \"\n,datestr(sampleTime,\n\"HH:MM:SS\"\n)))",
    "page_number": 99,
    "bbox": [
      90.0,
      103.825439453125,
      490.9679870605469,
      146.69244384765625
    ],
    "caption": null,
    "context": "xlabel(\"Price (Dollars)\")\nylabel(\"Number of Shares\")\nlegend([\"Bid\",\"Ask\"],'Location','North')\ntitle(strcat(\"Level 3 Limit Order Book: \",datestr(sampleTime,\"HH:MM:SS\")))\nDepth of Market\nSome visualization functions work directly with tall arrays and do not require the use of gather (see\n\u201cVisualization of Tall Arrays\u201d). The functions automatically sample data to decrease pixel densit"
  },
  {
    "element_type": "code",
    "content": "Some visualization functions work directly with tall arrays and do not require the use of \ngather\n \n(\nsee\n\u201cVisualization of Tall Arrays\u201d). The functions automatically sample data to decrease pixel density.\nVisualize the level 3 intraday \ndepth of market\n, which shows the time evolution of liquidity, by using\nplot\n with the tall timetable \nDTT\n.",
    "page_number": 99,
    "bbox": [
      89.99996948242188,
      444.07000732421875,
      555.3499755859375,
      491.70001220703125
    ],
    "caption": null,
    "context": "xlabel(\"Price (Dollars)\")\nylabel(\"Number of Shares\")\nlegend([\"Bid\",\"Ask\"],'Location','North')\ntitle(strcat(\"Level 3 Limit Order Book: \",datestr(sampleTime,\"HH:MM:SS\")))\nDepth of Market\nSome visualization functions work directly with tall arrays and do not require the use of gather (see\n\u201cVisualization of Tall Arrays\u201d). The functions automatically sample data to decrease pixel density.\nVisualize the level 3 intraday depth of market, which shows the time evolution of liquidity, by using\nplot with the tall timetable DTT.\nfigure\nhold on\nplot(DTT.Time,-DTT.BidSize1,'Color',[1.0 0 0],'LineWidth',2)\nplot(DTT.Time,-DTT.BidSize2,'Color',[0.8 0 0],'LineWidth',2)\nplot(DTT.Time,-DTT.BidSize3,'Color',[0.6 0 0],'LineWidth',2)\nplot(DTT.Ti"
  },
  {
    "element_type": "code",
    "content": "plot(DTT.Time,-DTT.BidSize1,\n'Color'\n,[1.0 0 0],\n'LineWidth'\n,2)\nplot(DTT.Time,-DTT.BidSize2,\n'Color'\n,[0.8 0 0],\n'LineWidth'\n,2)\nplot(DTT.Time,-DTT.BidSize3,\n'Color'\n,[0.6 0 0],\n'LineWidth'\n,2)",
    "page_number": 99,
    "bbox": [
      89.99897766113281,
      533.5338134765625,
      415.1059875488281,
      565.6007690429688
    ],
    "caption": null,
    "context": "xlabel(\"Price (Dollars)\")\nylabel(\"Number of Shares\")\nlegend([\"Bid\",\"Ask\"],'Location','North')\ntitle(strcat(\"Level 3 Limit Order Book: \",datestr(sampleTime,\"HH:MM:SS\")))\nDepth of Market\nSome visualization functions work directly with tall arrays and do not require the use of gather (see\n\u201cVisualization of Tall Arrays\u201d). The functions automatically sample data to decrease pixel density.\nVisuali"
  },
  {
    "element_type": "code",
    "content": "plot(DTT.Time,DTT.AskSize1,\n'Color'\n,[0 1.0 0],\n'LineWidth'\n,2)\nplot(DTT.Time,DTT.AskSize2,\n'Color'\n,[0 0.8 0],\n'LineWidth'\n,2)\nplot(DTT.Time,DTT.AskSize3,\n'Color'\n,[0 0.6 0],\n'LineWidth'\n,2)",
    "page_number": 99,
    "bbox": [
      89.9990234375,
      576.7337646484375,
      409.68798828125,
      608.8006591796875
    ],
    "caption": null,
    "context": "xlabel(\"Price (Dollars)\")\nylabel(\"Number of Shares\")\nlegend([\"Bid\",\"Ask\"],'Location','North')\ntitle(strcat(\"Level 3 Limit Order Book: \",datestr(sampleTime,\"HH:MM:SS\")))\nDepth of Market\nSome visualization functions work directly with tall arrays and do not require the use of gather (see\n\u201cVisualization of Tall Arrays\u201d). The functions automatically sample data to decrease pixel density.\nVisu"
  },
  {
    "element_type": "code",
    "content": "xlabel(\n\"Time\"\n)\nylabel(\n\"Number of Shares\"\n)\ntitle(\n\"Depth of Market: Intraday Evolution\"\n)\nlegend([\n\"Bid1\"\n,\n\"Bid2\"\n,\n\"Bid3\"\n,\n\"Ask1\"\n,\n\"Ask2\"\n,\n\"Ask3\"\n],\n'Location'\n,\n'NorthOutside'\n,\n'Orientation'\n,\n'Horiz",
    "page_number": 99,
    "bbox": [
      89.99899291992188,
      641.5338745117188,
      615.5900268554688,
      684.4010009765625
    ],
    "caption": null,
    "context": "xlabel(\"Price (Dollars)\")\nylabel(\"Number of Shares\")\nlegend([\"Bid\",\"Ask\"],'Location','North')\ntitle(strcat(\"Level 3 Limit Order Book: \",datestr(sampleTime,\"HH:MM:SS\")))\nDepth of Market\nSome visualization functions work directly with tall arrays and do not require the use of gather (see\n\u201cVisualization of Tall Arrays\u201d). The functions automatically sample data to decrease pixel density.\nVisualize the level 3 "
  },
  {
    "element_type": "figure",
    "content": "Figure 0-0",
    "page_number": 0,
    "bbox": [
      0.0,
      0.0,
      611.923583984375,
      791.9010620117188
    ],
    "caption": null,
    "context": "Financial Toolbox\u2122\nUser's Guide\nR2025b\n"
  },
  {
    "element_type": "figure",
    "content": "Figure 1-0",
    "page_number": 1,
    "bbox": [
      89.5799789428711,
      90.39997863769531,
      122.46003723144531,
      110.20001220703125
    ],
    "caption": null,
    "context": "How to Contact MathWorks\nLatest news:\nwww.mathworks.com\nSales and services:\nwww.mathworks.com/sales_and_services\nUser community:\nwww.mathworks.com/matlabcentral\nTechnical support:\nwww.mathworks.com/support/contact_us\nPhone:\n508-647-7000\nThe MathWorks, Inc.\n1 Apple Hill Drive\nNatick, MA 01760-2098\nFinancial Toolbox\u2122 User's Guide\n\u00a9 COPYRIGHT 1995\u20132025 by The MathWorks, Inc.\nThe software described in this document is furnished under a license agreement. The software may be used or copied\nonly under"
  },
  {
    "element_type": "figure",
    "content": "Figure 1-1",
    "page_number": 1,
    "bbox": [
      96.47998046875,
      178.3999786376953,
      115.56001281738281,
      191.36000061035156
    ],
    "caption": null,
    "context": "How to Contact MathWorks\nLatest news:\nwww.mathworks.com\nSales and services:\nwww.mathworks.com/sales_and_services\nUser community:\nwww.mathworks.com/matlabcentral\nTechnical support:\nwww.mathworks.com/support/contact_us\nPhone:\n508-647-7000\nThe MathWorks, Inc.\n1 Apple Hill Drive\nNatick, MA 01760-2098\nFinancial Toolbox\u2122 User's Guide\n\u00a9 COPYRIGHT 1995\u20132025 by The MathWorks, Inc.\nThe software described in this document is furnished under a license agreement. The software may be used or copied\nonly under"
  },
  {
    "element_type": "figure",
    "content": "Figure 1-2",
    "page_number": 1,
    "bbox": [
      96.89999389648438,
      205.71839904785156,
      115.14002227783203,
      218.31842041015625
    ],
    "caption": null,
    "context": "How to Contact MathWorks\nLatest news:\nwww.mathworks.com\nSales and services:\nwww.mathworks.com/sales_and_services\nUser community:\nwww.mathworks.com/matlabcentral\nTechnical support:\nwww.mathworks.com/support/contact_us\nPhone:\n508-647-7000\nThe MathWorks, Inc.\n1 Apple Hill Drive\nNatick, MA 01760-2098\nFinancial Toolbox\u2122 User's Guide\n\u00a9 COPYRIGHT 1995\u20132025 by The MathWorks, Inc.\nThe software described in this document is furnished under a license agreement. The software may be used or copied\nonly under"
  },
  {
    "element_type": "table",
    "content": [
      [
        "",
        "M1",
        "M2"
      ],
      [
        "Prime flat:",
        "$100 * 10 units",
        "+ $70 * 20 units = $2400\nreceipts"
      ],
      [
        "Prime down:",
        "$80 * 10 units",
        "+ $40 * 20 units = $1600\nreceipts"
      ]
    ],
    "page_number": 37,
    "bbox": [
      89.96875,
      625.1908772786459,
      553.3512573242188,
      698.7742106119791
    ],
    "caption": null,
    "context": ""
  },
  {
    "element_type": "table",
    "content": [
      [
        "",
        "M1",
        "M2"
      ],
      [
        "Prime flat:",
        "$100 * x units",
        "+ $70 * y units = $7000\nreceipts"
      ],
      [
        "Prime down:",
        "$80 * x units",
        "+ $40 * y units = $5000\nreceipts"
      ]
    ],
    "page_number": 38,
    "bbox": [
      89.96875,
      279.39662679036456,
      553.3512573242188,
      352.97996012369794
    ],
    "caption": null,
    "context": ""
  },
  {
    "element_type": "table",
    "content": [
      [
        "datedisp",
        "Displays a numeric matrix with date entries formatted as date character\nvectors."
      ],
      [
        "datenum",
        "Converts a date character vector to a serial date number."
      ],
      [
        "datestr",
        "Converts a serial date number to a date character vector."
      ],
      [
        "datetime",
        "Converts from date character vectors or serial date numbers to create a\ndatetime array."
      ],
      [
        "datevec",
        "Converts a serial date number or date character vector to a date vector\nwhose elements are [Year Month Day Hour Minute Second]."
      ],
      [
        "m2xdate",
        "Converts MATLAB serial date number to Excel\u00ae serial date number."
      ],
      [
        "x2mdate",
        "Converts Microsoft\u00ae Excel serial date number to MATLAB serial date\nnumber."
      ]
    ],
    "page_number": 46,
    "bbox": [
      89.984375,
      268.81227416992186,
      558.015625,
      432.4122741699219
    ],
    "caption": null,
    "context": ""
  },
  {
    "element_type": "figure",
    "content": "Figure 54-0",
    "page_number": 54,
    "bbox": [
      90.0,
      652.7002563476562,
      307.5,
      683.4502563476562
    ],
    "caption": null,
    "context": "Analyzing and Computing Cash Flows\nIn this section...\n\u201cIntroduction\u201d on page 2-11\n\u201cInterest Rates/Rates of Return\u201d on page 2-11\n\u201cPresent or Future Values\u201d on page 2-12\n\u201cDepreciation\u201d on page 2-13\n\u201cAnnuities\u201d on page 2-13\nIntroduction\nFinancial Toolbox cash-flow functions compute interest rates and rates of return, present or future\nvalues, depreciation streams, and annuities.\nSome examples in this section use this income stream: an initial investment of $20,000 followed by\nthree annual return pa"
  },
  {
    "element_type": "table",
    "content": [
      [
        "Basis\nValue",
        "Day Count Convention"
      ],
      [
        "0",
        "actual/actual (default) \u2014 Number of days in both a period and a year is the actual\nnumber of days. Also, another common actual/actual basis is basis 12."
      ],
      [
        "1",
        "30/360 SIA \u2014 Year fraction is calculated based on a 360 day year with 30-day months,\nafter applying the following rules: If the first date and the second date are the last day\nof February, the second date is changed to the 30th. If the first date falls on the 31st or\nis the last day of February, it is changed to the 30th. If after the preceding test, the first\nday is the 30th and the second day is the 31st, then the second day is changed to the\n30th."
      ],
      [
        "2",
        "actual/360 \u2014 Number of days in a period is equal to the actual number of days,\nhowever the number of days in a year is 360."
      ],
      [
        "3",
        "actual/365 \u2014 Number of days in a period is equal to the actual number of days,\nhowever the number of days in a year is 365 (even in a leap year)."
      ],
      [
        "4",
        "30/360 PSA \u2014 Number of days in every month is set to 30 (including February). If the\nstart date of the period is either the 31st of a month or the last day of February, the start\ndate is set to the 30th, while if the start date is the 30th of a month and the end date is\nthe 31st, the end date is set to the 30th. The number of days in a year is 360."
      ],
      [
        "5",
        "30/360 ISDA \u2014 Number of days in every month is set to 30, except for February where\nit is the actual number of days. If the start date of the period is the 31st of a month, the\nstart date is set to the 30th while if the start date is the 30th of a month and the end\ndate is the 31st, the end date is set to the 30th. The number of days in a year is 360."
      ],
      [
        "6",
        "30E /360 \u2014 Number of days in every month is set to 30 except for February where it is\nequal to the actual number of days. If the start date or the end date of the period is the\n31st of a month, that date is set to the 30th. The number of days in a year is 360."
      ],
      [
        "7",
        "actual/365 Japanese \u2014 Number of days in a period is equal to the actual number of\ndays, except for leap days (29th February) which are ignored. The number of days in a\nyear is 365 (even in a leap year)."
      ],
      [
        "8",
        "actual/actual ICMA \u2014 Number of days in both a period and a year is the actual\nnumber of days and the compounding frequency is annual."
      ],
      [
        "9",
        "actual/360 ICMA \u2014 Number of days in a period is equal to the actual number of days,\nhowever the number of days in a year is 360 and the compounding frequency is annual."
      ],
      [
        "10",
        "actual/365 ICMA \u2014 Number of days in a period is equal to the actual number of days,\nhowever the number of days in a year is 365 (even in a leap year) and the compounding\nfrequency is annual."
      ],
      [
        "11",
        "30/360 ICMA \u2014 Number of days in every month is set to 30, except for February where\nit is equal to the actual number of days. If the start date or the end date of the period is\nthe 31st of a month, that date is set to the 30th. The number of days in a year is 360 and\nthe compounding frequency is annual."
      ],
      [
        "12",
        "actual/365 ISDA \u2014 The day count fraction is calculated using the following formula:\n(Actual number of days in period that fall in a leap year / 366) +\n(Actual number of days in period that fall in a normal year / 365).\nBasis 12 is also referred to as actual/actual ISDA."
      ],
      [
        "13",
        "bus/252 \u2014 The number of days in a period is equal to the actual number of business\ndays. The number of business days in a year is 252."
      ]
    ],
    "page_number": 60,
    "bbox": [
      89.99242424242425,
      93.54998474121093,
      558.0075757575758,
      701.1499755859375
    ],
    "caption": null,
    "context": ""
  },
  {
    "element_type": "figure",
    "content": "Figure 66-0",
    "page_number": 66,
    "bbox": [
      90.0,
      473.7130126953125,
      252.0,
      504.4630126953125
    ],
    "caption": null,
    "context": "ModDuration = \n1.6107\nYearDuration = \n1.6470\nPerDuration = \n3.2940\nThe durations are:\n\u2022\nModDuration = 1.6107 (years)\n\u2022\nYearDuration = 1.6470 (years)\n\u2022\nPerDuration = 3.2940 (semiannual periods)\nNote that the semiannual periodic Macaulay duration (PerDuration) is twice the annualized\nMacaulay duration (YearDuration).\nCalculating Key Rate Durations for Bonds\nThis example shows how to compute the key rate duration of the US Treasury Bond.\nKey rate duration enables you to evaluate the sensitivity and"
  },
  {
    "element_type": "table",
    "content": [
      [
        "3M",
        "1Y",
        "2Y",
        "3Y",
        "5Y",
        "7Y",
        "10Y",
        "15Y",
        "20Y",
        "25Y",
        "30Y"
      ],
      [
        ".01",
        ".04",
        ".09",
        ".21",
        ".4",
        ".65",
        "1.27",
        "1.71",
        "1.68",
        "1.83",
        "7.03"
      ]
    ],
    "page_number": 66,
    "bbox": [
      89.95831807454427,
      576.1598161969866,
      553.3616129557291,
      609.1955304827009
    ],
    "caption": null,
    "context": ""
  },
  {
    "element_type": "table",
    "content": [
      [
        "Function",
        "Purpose"
      ],
      [
        "tbilldisc2yield",
        "Convert discount rate to yield."
      ],
      [
        "tbillprice",
        "Price Treasury bill given its yield or discount rate."
      ],
      [
        "tbillrepo",
        "Break-even discount of repurchase agreement."
      ],
      [
        "tbillyield",
        "Yield and discount of Treasury bill given its price."
      ],
      [
        "tbillyield2disc",
        "Convert yield to discount rate."
      ],
      [
        "tbillval01",
        "The value of 1 basis point (one hundredth of one percentage point,\nor 0.0001) given the characteristics of the Treasury bill, as\nrepresented by its settlement and maturity dates. You can relate\nthe basis point to discount, money-market, or bond-equivalent\nyield."
      ]
    ],
    "page_number": 69,
    "bbox": [
      89.98913043478261,
      276.54588623046874,
      562.6946985581342,
      440.14588623046876
    ],
    "caption": null,
    "context": ""
  },
  {
    "element_type": "table",
    "content": [
      [
        "Date",
        "Cash Out Flow",
        "",
        "Cash In Flow",
        ""
      ],
      [
        "9/26/2002",
        "Purchase T-bill",
        "99.593",
        "Repo money",
        "99.593"
      ],
      [
        "10/26/2002",
        "Payment of repo",
        "99.593",
        "Sell T-bill",
        "99.7168"
      ],
      [
        "",
        "Repo interest",
        "0.1238",
        "",
        ""
      ],
      [
        "",
        "Total",
        "199.3098",
        "",
        "199.3098"
      ]
    ],
    "page_number": 70,
    "bbox": [
      89.98076923076923,
      413.0274658203125,
      558.0192307692307,
      495.5899658203125
    ],
    "caption": null,
    "context": ""
  },
  {
    "element_type": "figure",
    "content": "Figure 77-0",
    "page_number": 77,
    "bbox": [
      90.0,
      94.60000610351562,
      211.5,
      174.85000610351562
    ],
    "caption": null,
    "context": "The returns have the correct size (66%, 300%, 50%, 200%), but do they have the correct sign? If you\ninterpret negative returns as losses, as with the positive price series, the signs seem wrong\u2014the last\ntwo returns should be gains (that is, if you interpret less negative to be a gain). However, if you\ninterpret the negative returns by the formula\nps(t) = ps(t \u22121) + PC \u22c5ps(t \u22121),\nwhich requires the signs, the last two negative percentage changes multiply negative prices ps(t \u2212 1),\nwhich produces "
  },
  {
    "element_type": "figure",
    "content": "Figure 78-0",
    "page_number": 78,
    "bbox": [
      90.0,
      94.60000610351562,
      229.5,
      174.85000610351562
    ],
    "caption": null,
    "context": "The real part shows the trend in the absolute price series. When |pc(t \u2212 1)| < |pc(t)|, that is, when\nprices move away from zero, rc(t) has a positive real part. When |pc(t \u2212 1)| > |pc(t)|, that is, when\nprices move toward zero, rc(t) has a negative real part. When |pc(t \u2212 1)| = |pc(t)|, that is, when the\nabsolute size of the prices is unchanged, rc(t) has a zero real part. For positive price series, where the\nabsolute series is the same as the series itself, the real part has its usual meaning."
  },
  {
    "element_type": "figure",
    "content": "Figure 79-0",
    "page_number": 79,
    "bbox": [
      90.0,
      94.60000610351562,
      425.9580078125,
      346.5685119628906
    ],
    "caption": null,
    "context": "Due to the following identity\nrc(t) = log\npc(t)\npc(t \u22121)\n\u00a0\u00a0\u00a0\u00a0=log(pc(t)) \u2212log(pc(t \u22121))\n\u00a0\u00a0\u00a0\u00a0=\u00a0[real(log(pc(t)) \u2212real(log(pc(t \u22121)))]\n\u2a09\nblue curve\n+ [imag(log(pc(t))) \u2212imag(log(pc(t \u22121)))]\n\u2a09\nred curve\n\u22c5i,\nyou can read the real part of a continuous return as a difference in ordinates on the blue graph, and\nyou can read the imaginary part as a difference in ordinates on the red graph. Absolute price\nmovements toward zero result in a negative real part and absolute price movements away from zero\nres"
  },
  {
    "element_type": "figure",
    "content": "Figure 80-0",
    "page_number": 80,
    "bbox": [
      90.0,
      94.60000610351562,
      425.9580078125,
      346.5685119628906
    ],
    "caption": null,
    "context": "If pc(t \u2212 1) = \u22124 and pc(t) = 2, the real part of log(pc(t)) \u2212 log(pc(t \u2212 1)) is negative (line slopes\ndown), corresponding to a decrease in absolute price. The imaginary part is 0 \u2013 \u03c0 = \u2212\u03c0,\ncorresponding to a change of sign from negative to positive. If the direction of the price movement is\nreversed, so that pc(t \u2212 1) = 2 and pc(t) = \u22124, the positive difference in the real part corresponds to\nan increase in absolute price, and the positive difference in the imaginary part corresponds to a\nchan"
  },
  {
    "element_type": "figure",
    "content": "Figure 87-0",
    "page_number": 87,
    "bbox": [
      90.0,
      205.83767700195312,
      333.282958984375,
      333.00830078125
    ],
    "caption": null,
    "context": "About Life Tables\nLife tables are used for life insurance and work with the probability distribution of human mortality.\nThis distribution, which is age-dependent, has several characteristic features that are consequences\nof biological, cultural, and behavioral factors. Usually, the practitioners of life studies use life tables\nthat contain age-dependent series for specific demographics. The tables are in a standard format with\nstandard notation that is specific to the life studies field. An exa"
  },
  {
    "element_type": "table",
    "content": [
      [
        "Pr[x \u2264 X < x + \u0394x",
        "X \u2265x]"
      ]
    ],
    "page_number": 88,
    "bbox": [
      167.6106414794922,
      164.60000610351562,
      284.9457092285156,
      175.433349609375
    ],
    "caption": null,
    "context": ""
  },
  {
    "element_type": "figure",
    "content": "Figure 90-0",
    "page_number": 90,
    "bbox": [
      89.99999237060547,
      190.60000610351562,
      510.0,
      443.3500061035156
    ],
    "caption": null,
    "context": "Plot the qx series and display the legend. The series qx is the conditional probability that a person at\nage x will die between age x and the next age in the series\nplot((0:100), log(qx));\nlegend(series, 'location', 'southeast');\ntitle('Conditional Probability of Dying within One Year of Current Age');\nxlabel('Age');\nylabel('Log Probability');\nSee Also\nlifetableconv | lifetablefit | lifetablegen\nMore About\n\u2022\n\u201cAbout Life Tables\u201d on page 2-44\n Case Study for Life Tables Analysis\n2-47\n"
  },
  {
    "element_type": "figure",
    "content": "Figure 91-0",
    "page_number": 91,
    "bbox": [
      90.0,
      123.80001831054688,
      509.947509765625,
      438.7606506347656
    ],
    "caption": null,
    "context": "Machine Learning for Statistical Arbitrage: Introduction\nMachine learning techniques for processing large amounts of data are broadly applicable in\ncomputational finance. The series of examples introduced in this topic provides a general workflow,\nillustrating how capabilities in MATLAB apply to a specific problem in financial engineering. The\nworkflow is problem-oriented, exploratory, and guided by the data and the resulting analysis. The\noverall approach, however, is useful for constructing ap"
  },
  {
    "element_type": "figure",
    "content": "Figure 99-0",
    "page_number": 99,
    "bbox": [
      90.0,
      157.60000610351562,
      510.0,
      410.3500061035156
    ],
    "caption": null,
    "context": "xlabel(\"Price (Dollars)\")\nylabel(\"Number of Shares\")\nlegend([\"Bid\",\"Ask\"],'Location','North')\ntitle(strcat(\"Level 3 Limit Order Book: \",datestr(sampleTime,\"HH:MM:SS\")))\nDepth of Market\nSome visualization functions work directly with tall arrays and do not require the use of gather (see\n\u201cVisualization of Tall Arrays\u201d). The functions automatically sample data to decrease pixel density.\nVisualize the level 3 intraday depth of market, which shows the time evolution of liquidity, by using\nplot with t"
  }
]